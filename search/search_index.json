{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview This site is the new upcoming central documentation for IoT products of Lobaro GmbH . The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Documentation Start"},{"location":"index.html#overview","text":"This site is the new upcoming central documentation for IoT products of Lobaro GmbH .","title":"Overview"},{"location":"index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"hardware.html","text":"Lobaro Hardware Variations Beside our standard products we may offer you a custom product variant matching your specific application. Most of our products are compatible with the following variations, for details about a specific product and pricing please contact us at sales@lobaro.de Housing Options Compact Lobaro Box Housing Product Dimensions (pdf) Size: 114,30mm (w) x 59,30mm (l) x 26,80mm (h) Waterproof: IP65 Spelsberg TG PC 1208-6-o Product Specifications (external link) Size: 122mm (w) x 82mm (l) x 55mm (h) Waterproof: IP67 DIN-Rail Housing All DIN-Rail housings that fit our hardware are possible. The DIN-Rail mount can also be used without any housing. We offer to deliver our hardware in the following housings: 130x130 (RK 4/12-L) Product Specifications (external link) Size: 130mm (w) x 130mm (l) x 75mm (h) Oder number: 3000005 110x110 (RK 4/07-L) Product Specifications (external link) Size: 110mm (w) x 110mm (l) x 90mm (h) Oder number: 3000092 Power Supply Options AA-Batteries (3Ah) Only for LoRaWAN products Only our LoRaWAN hardware supports two AA-Batteries inside the Lobaro Box Housing. We recommend to use Energizer Ultimate Lithium for our products. Size: AA-Cell Voltage: 1.5V Capacity: up to 3Ah Operating temperature: -40\u00b0C...+60\u00b0C ER34615 3.6V Battery (D-Cell, 19Ah) Size: D-Cell (34mm x 61.5mm) Connector: JST XH series Voltage: 3.6V Continuous Discharge Current: 200mA (max.) Capacity: up to 19Ah Operating temperature: -55\u00b0C...+60\u00b0C Li-SOCl2 (not rechargeable) 230V External Supply (5VDC) Can be used standalone on an existing DIN-Rail or inside the DIN-Rail Housing (see above) Antennas By default all our products are shipped with an internal pcb-antenna. An external SMA antenna connector can be mounted on request to the housing. External antennas can be connected with a standard SMA RF-connector:","title":"Hardware Variations"},{"location":"hardware.html#lobaro-hardware-variations","text":"Beside our standard products we may offer you a custom product variant matching your specific application. Most of our products are compatible with the following variations, for details about a specific product and pricing please contact us at sales@lobaro.de","title":"Lobaro Hardware Variations"},{"location":"hardware.html#housing-options","text":"","title":"Housing Options"},{"location":"hardware.html#compact-lobaro-box-housing","text":"Product Dimensions (pdf) Size: 114,30mm (w) x 59,30mm (l) x 26,80mm (h) Waterproof: IP65","title":"Compact Lobaro Box Housing"},{"location":"hardware.html#spelsberg-tg-pc-1208-6-o","text":"Product Specifications (external link) Size: 122mm (w) x 82mm (l) x 55mm (h) Waterproof: IP67","title":"Spelsberg TG PC 1208-6-o"},{"location":"hardware.html#din-rail-housing","text":"All DIN-Rail housings that fit our hardware are possible. The DIN-Rail mount can also be used without any housing. We offer to deliver our hardware in the following housings: 130x130 (RK 4/12-L) Product Specifications (external link) Size: 130mm (w) x 130mm (l) x 75mm (h) Oder number: 3000005 110x110 (RK 4/07-L) Product Specifications (external link) Size: 110mm (w) x 110mm (l) x 90mm (h) Oder number: 3000092","title":"DIN-Rail Housing"},{"location":"hardware.html#power-supply-options","text":"","title":"Power Supply Options"},{"location":"hardware.html#aa-batteries-3ah","text":"Only for LoRaWAN products Only our LoRaWAN hardware supports two AA-Batteries inside the Lobaro Box Housing. We recommend to use Energizer Ultimate Lithium for our products. Size: AA-Cell Voltage: 1.5V Capacity: up to 3Ah Operating temperature: -40\u00b0C...+60\u00b0C","title":"AA-Batteries (3Ah)"},{"location":"hardware.html#er34615-36v-battery-d-cell-19ah","text":"Size: D-Cell (34mm x 61.5mm) Connector: JST XH series Voltage: 3.6V Continuous Discharge Current: 200mA (max.) Capacity: up to 19Ah Operating temperature: -55\u00b0C...+60\u00b0C Li-SOCl2 (not rechargeable)","title":"ER34615 3.6V Battery (D-Cell, 19Ah)"},{"location":"hardware.html#230v-external-supply-5vdc","text":"Can be used standalone on an existing DIN-Rail or inside the DIN-Rail Housing (see above)","title":"230V External Supply (5VDC)"},{"location":"hardware.html#antennas","text":"By default all our products are shipped with an internal pcb-antenna. An external SMA antenna connector can be mounted on request to the housing. External antennas can be connected with a standard SMA RF-connector:","title":"Antennas"},{"location":"background/cron-expressions.html","text":"Cron Expressions The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"CRON Expressions"},{"location":"background/cron-expressions.html#cron-expressions","text":"","title":"Cron Expressions"},{"location":"background/cron-expressions.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"background/lorawan.html","text":"LoRaWAN The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"LoRaWAN"},{"location":"background/lorawan.html#lorawan","text":"","title":"LoRaWAN"},{"location":"background/lorawan.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"background/obis-codes.html","text":"OBIS-Codes The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"OBIS Codes"},{"location":"background/obis-codes.html#obis-codes","text":"","title":"OBIS-Codes"},{"location":"background/obis-codes.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"background/weee-disposal.html","text":"Disposal of Lobaro Devices The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"WEEE Disposal"},{"location":"background/weee-disposal.html#disposal-of-lobaro-devices","text":"","title":"Disposal of Lobaro Devices"},{"location":"background/weee-disposal.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"background/weee-entsorgung.html","text":"Entsorgung von Ger\u00e4ten von Lobaro The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Entsorgung von Ger\u00e4ten von Lobaro"},{"location":"background/weee-entsorgung.html#entsorgung-von-geraten-von-lobaro","text":"","title":"Entsorgung von Ger\u00e4ten von Lobaro"},{"location":"background/weee-entsorgung.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"dashboard/index.html","text":"// Page required to support old links from Platform! Dashboard Moved to: Platform window.location.href = window.location.origin + \"/platform\"; //console.log(window.location) //alert(window.location.origin + \"/platform\")","title":"Index"},{"location":"dashboard/index.html#dashboard","text":"Moved to: Platform window.location.href = window.location.origin + \"/platform\"; //console.log(window.location) //alert(window.location.origin + \"/platform\")","title":"Dashboard"},{"location":"lorawan-sensors/config-lorawan.html","text":"The connection to the LoRaWAN network is defined by multiple configuration parameters. This need to be set according to your LoRaWAN network and the way your device is supposed to be attached to it, or the device will not be able to send any data. There are two different methods to attach a device to a LoRaWAN network: Over-the-air-activation (OTAA) and Activation-by-personalisation (ABP). Depending on which method you are using you will have to set different values. Several values are a number of bytes, that need to be entered as hexstrings (without 0x -prefix). So e.g. the DevEUI is a value of 8 bytes encoded in hex will be 16 hexdigits long. A sample value would be 0123456789abcdef . name used type description OTAA both bool true \u2261 use OTAA, false \u2261 use ABP DevEUI OTAA hexbyte[8] the 8 byte DevEUI identifies the hardware on the join operation. The default value is a world wide unique value predefined in the hardware. Should not be changed unless required by the network provider. AppEUI OTAA hexbyte[8] ID defining the application used in the LoRaWAN network. AppKey OTAA hexbyte[16] Key used to encrypt communication with the LoRaWAN network. AppSKey ABP hexbyte[16] Application Session Key to be synced with the LoRaWAN network. NetSKey ABP hexbyte[16] Network Session Key to be synced with the LoRaWAN network. DevAdr ABP hexbyte[4] Device Address used to identify device in the LoRaWAN network. SF both int Initial LoRa spreading factor used for transmissions. Valid range is 7-12. The actual spreading factor used by change during operation if ADR is used. ADR both bool Should adaptive data rate be used? true \u2261 use ADR, false \u2261 don't","title":"Config lorawan"},{"location":"lorawan-sensors/1-wire-lorawan/index.html","text":"LOB-S-1WT-LW The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/1-wire-lorawan/index.html#lob-s-1wt-lw","text":"","title":"LOB-S-1WT-LW"},{"location":"lorawan-sensors/1-wire-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html","text":"Multi Temperature Sensor Box Firmware Downloads: app-lorawan-onewire-bridge-0.5.1.hex app-lorawan-onewire-bridge-0.3.4.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changed Default Keys in v0.5.0 Starting with Firmware 0.5.0, the default values for JoinEUI (aka AppEUI ), AppKey , and NwkKey in the configuration have changed. Be sure to check your LoRaWAN-Configuration between device and Network Server, after you update to this version. You can adjust those values to your need with our config adapter. Changelog 0.5.1 - 2020-10-15 Changed Set standard value for config parameter LostReboot to 1 (from 0). 0.5.0 - 2020-08-12 Added Power-On Selftest Changed BREAKING CHANGE: Default values for JoinEUI , AppKey , NwkKey changed! Uses LoRaWAN-Stack that was certified for wMBus-Bridge Implement changes in LoRaWAN-Stack that happend during certification. Implements some edge-case. Make remote config feature robuster, e.g. when sending downlinks with ACK request. Fixed Fixed Mixup of Sensors that could trigger endless loop 0.4.1 - 2020-07-21 Fixed Fix payload of sensor data 0.4.0 - 2020-06-30 Changed Use lobawan stack v1.2.2 Sensors from SensorIdOrder that are missing will still be uploaded (with -0x8000 value) When SendSensorId == false uploads are done on port 3 (was port 2), Enable 3.3V step-up only if voltage is below 3.1V (was: if below 3.3V). Support up to 32 sensors (only 25 supported in SensorIdOrder ). 0.3.3 - 2019-08-01 Added ADR config parameter 0.3.2 - 2019-08-01 Fixed Onewire init after DeepSleep 0.3.1 - 2019-07-29 Temp sensors will be printed and sent sorted by parameter \"SensorIdOrder\" and by ID or just by ID if parameter \"SensorIdOrder\" is empty 0.2.0 - 2019-02-15 Add parameter \"SendSensorId\" to allow skipping sensor IDs in payload 0.0.3 Bugfixes in LoraWAN stack LoRaWAN Support for RX1 DataRate Offset 0.0.2 Don't send sensor type with ID (support 6 sensors in 50 bytes) Add TestMode config value Add SendInternalTemp config value Internal sensor is send first if SendInternalTemp = true","title":"Firmware & Changelog"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#multi-temperature-sensor-box","text":"","title":"Multi Temperature Sensor Box"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#firmware","text":"Downloads: app-lorawan-onewire-bridge-0.5.1.hex app-lorawan-onewire-bridge-0.3.4.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changed Default Keys in v0.5.0 Starting with Firmware 0.5.0, the default values for JoinEUI (aka AppEUI ), AppKey , and NwkKey in the configuration have changed. Be sure to check your LoRaWAN-Configuration between device and Network Server, after you update to this version. You can adjust those values to your need with our config adapter.","title":"Firmware"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#051-2020-10-15","text":"","title":"0.5.1 - 2020-10-15"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#changed","text":"Set standard value for config parameter LostReboot to 1 (from 0).","title":"Changed"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#050-2020-08-12","text":"","title":"0.5.0 - 2020-08-12"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#added","text":"Power-On Selftest","title":"Added"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#changed_1","text":"BREAKING CHANGE: Default values for JoinEUI , AppKey , NwkKey changed! Uses LoRaWAN-Stack that was certified for wMBus-Bridge Implement changes in LoRaWAN-Stack that happend during certification. Implements some edge-case. Make remote config feature robuster, e.g. when sending downlinks with ACK request.","title":"Changed"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#fixed","text":"Fixed Mixup of Sensors that could trigger endless loop","title":"Fixed"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#041-2020-07-21","text":"","title":"0.4.1 - 2020-07-21"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#fixed_1","text":"Fix payload of sensor data","title":"Fixed"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#040-2020-06-30","text":"","title":"0.4.0 - 2020-06-30"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#changed_2","text":"Use lobawan stack v1.2.2 Sensors from SensorIdOrder that are missing will still be uploaded (with -0x8000 value) When SendSensorId == false uploads are done on port 3 (was port 2), Enable 3.3V step-up only if voltage is below 3.1V (was: if below 3.3V). Support up to 32 sensors (only 25 supported in SensorIdOrder ).","title":"Changed"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#033-2019-08-01","text":"Added ADR config parameter","title":"0.3.3 - 2019-08-01"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#032-2019-08-01","text":"Fixed Onewire init after DeepSleep","title":"0.3.2 - 2019-08-01"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#031-2019-07-29","text":"Temp sensors will be printed and sent sorted by parameter \"SensorIdOrder\" and by ID or just by ID if parameter \"SensorIdOrder\" is empty","title":"0.3.1 - 2019-07-29"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#020-2019-02-15","text":"Add parameter \"SendSensorId\" to allow skipping sensor IDs in payload","title":"0.2.0 - 2019-02-15"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#003","text":"Bugfixes in LoraWAN stack LoRaWAN Support for RX1 DataRate Offset","title":"0.0.3"},{"location":"lorawan-sensors/1-wire-lorawan/firmware.html#002","text":"Don't send sensor type with ID (support 6 sensors in 50 bytes) Add TestMode config value Add SendInternalTemp config value Internal sensor is send first if SendInternalTemp = true","title":"0.0.2"},{"location":"lorawan-sensors/_template/index.html","text":"Name of Sensor Consider using the latest firmware on your hardware See available firmware downloads Target Measurement / Purpose xxxx ** Features ** * 30cm to 3m detection range * up to 8 detected objects","title":"Name of Sensor"},{"location":"lorawan-sensors/_template/index.html#name-of-sensor","text":"Consider using the latest firmware on your hardware See available firmware downloads","title":"Name of Sensor"},{"location":"lorawan-sensors/_template/index.html#target-measurement-purpose","text":"xxxx ** Features ** * 30cm to 3m detection range * up to 8 detected objects","title":"Target Measurement / Purpose"},{"location":"lorawan-sensors/_template/firmware.html","text":"Name of Sensor Firmware Downloads : firmware.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changelog v0.0.1 Initial release","title":"Name of Sensor"},{"location":"lorawan-sensors/_template/firmware.html#name-of-sensor","text":"","title":"Name of Sensor"},{"location":"lorawan-sensors/_template/firmware.html#firmware","text":"Downloads : firmware.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Firmware"},{"location":"lorawan-sensors/_template/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/_template/firmware.html#v001","text":"Initial release","title":"v0.0.1"},{"location":"lorawan-sensors/edl21-opto-lorawan/index.html","text":"EDL21 Electricity meter LoRaWAN Bridge The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/edl21-opto-lorawan/index.html#edl21-electricity-meter-lorawan-bridge","text":"","title":"EDL21 Electricity meter LoRaWAN Bridge"},{"location":"lorawan-sensors/edl21-opto-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html","text":"EDL21 Electricity meter LoRaWAN Bridge Firmware Downloads: WARNING When upgrading from Versions <0.4.1 to 0.4.1 or higher: Due to changes in the generation of the LoRaWAN parameters the default values for JoinEUI and AppKey will change if you use the Restore Default function in the Lobaro Maintenance Tool in order to reset the configuration. app-edl21-opto-0.4.2.hex New Opto-Head Version (round) [current release] app-edl21-opto-0.2.0+LoRa.hex Old Opto-Head Version (square) Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changelog Firmware: app-edl21-opto 0.4.2 - 2020-10-07 - [current release] Built with LoRaWAN-Stack we certified in different Hardware (fixes some edge case issues). 0.4.1 Fixed remote append WARNING: Due to changes in the generation of the LoRa paramters the values for JoinEUI and AppKey will change if you use the Restore Default function in the Lobaro Maintenance Tool in order to reset the configuration. 0.4.0 Added remote config via downlink 0.3.2 Added initial readout before OTAA join to check optical connection 0.3.1 Initial release for new round Opto-Head Legacy Downloads: app-edl21-opto-0.4.1+LoRa.hex New Opto-Head Version (round) app-edl21-opto-0.3.2+LoRa.hex New Opto-Head Version (round) app-edl21-opto-0.3.1+LoRa.hex New Opto-Head Version (round)","title":"Firmware & Changelog"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#edl21-electricity-meter-lorawan-bridge","text":"","title":"EDL21 Electricity meter LoRaWAN Bridge"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#firmware","text":"Downloads: WARNING When upgrading from Versions <0.4.1 to 0.4.1 or higher: Due to changes in the generation of the LoRaWAN parameters the default values for JoinEUI and AppKey will change if you use the Restore Default function in the Lobaro Maintenance Tool in order to reset the configuration. app-edl21-opto-0.4.2.hex New Opto-Head Version (round) [current release] app-edl21-opto-0.2.0+LoRa.hex Old Opto-Head Version (square) Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Firmware"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#changelog","text":"Firmware: app-edl21-opto","title":"Changelog"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#042-2020-10-07-current-release","text":"Built with LoRaWAN-Stack we certified in different Hardware (fixes some edge case issues).","title":"0.4.2 - 2020-10-07 - [current release]"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#041","text":"Fixed remote append WARNING: Due to changes in the generation of the LoRa paramters the values for JoinEUI and AppKey will change if you use the Restore Default function in the Lobaro Maintenance Tool in order to reset the configuration.","title":"0.4.1"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#040","text":"Added remote config via downlink","title":"0.4.0"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#032","text":"Added initial readout before OTAA join to check optical connection","title":"0.3.2"},{"location":"lorawan-sensors/edl21-opto-lorawan/firmware.html#031","text":"Initial release for new round Opto-Head Legacy Downloads: app-edl21-opto-0.4.1+LoRa.hex New Opto-Head Version (round) app-edl21-opto-0.3.2+LoRa.hex New Opto-Head Version (round) app-edl21-opto-0.3.1+LoRa.hex New Opto-Head Version (round)","title":"0.3.1"},{"location":"lorawan-sensors/environment-lorawan/index.html","text":"Environment LoRaWAN Sensor Consider using the latest firmware on your hardware See available firmware downloads Target Measurement / Purpose High precision measuring of Temperature, Humidity, and Pressure, using the Bosch BME680 environmental sensor. Configuration For configuration of the LoRaWAN parameters, please refer to the chapter LoRaWAN configuration in our LoRaWAN background article. name description example value MeasureCron Cron expression \u2020 defining when to read. 0 0/15 * * * * for every 15 minutes \u2020 See also our Introduction to Cron expressions . Payload Example payloads for each port: Status Message (Port 1) Payload: (No Example yet) Decoded: { \"temp\" : 20.4 , \"vBat\" : 3.0 , \"version\" : \"v0.0.1\" } Data Message (Port 2) Structure: name pos len type description timestamp 0 5 uint40 Time of measurement (see timestamps in our LoRaWAN devices ) error flag 5 1 byte 1 : error, 0 : success humidity 6 2 uint16 BE Humidity in 1/10 % rH temperature 8 2 int16 BE Temperature in 1/10 \u00b0C pressure 10 2 uint16 BE Pressure in 10 Pa Example Payload: 00386d440700015400f527d1 Decoded: { \"error\" : false , \"humidity\" : 34 , \"pressure\" : 1019.3 , \"temperature\" : 24.5 , \"time\" : 946684935000 } Parser Javascript Parser function readVersion ( bytes , i ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ i ] + \".\" + bytes [ i + 1 ] + \".\" + bytes [ i + 2 ]; } function signed ( val , bits ) { if (( val & 1 << ( bits - 1 )) > 0 ) { // value is negative (16bit 2's complement) var mask = Math . pow ( 2 , bits ) - 1 ; val = ( ~ val & mask ) + 1 ; // invert all bits & add 1 => now positive value val = val * - 1 ; } return val ; } function uint40_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 32 | bytes [ 1 ] << 24 | bytes [ 2 ] << 16 | bytes [ 3 ] << 8 | bytes [ 4 ] << 0 ; } function uint16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 8 | bytes [ 1 ] << 0 ; } function int40_BE ( bytes , idx ) { return signed ( uint40_BE ( bytes , idx ), 40 ); } function int16_BE ( bytes , idx ) { return signed ( uint16_BE ( bytes , idx ), 16 ); } function ParseStatusMessage ( data ) { var decoded = {}; decoded . version = readVersion ( data , 0 ); decoded . vBat = uint16_BE ( data , 5 ) / 1000.0 ; decoded . temp = int16_BE ( data , 3 ) / 10.0 ; // byte 8-9 (originally in 10th degree C) decoded . msg = \"Firmware Version: \" + decoded . FirmwareVersion + \" Battery: \" + decoded . Vbat + \"V Temperature: \" + decoded . Temp + \"\u00b0C\" ; return decoded ; } function ParseDataMessage ( data ) { return { \"time\" : int40_BE ( data , 0 ) * 1000 , \"error\" : !! data [ 5 ], \"humidity\" : uint16_BE ( data , 6 ) / 10.0 , \"temperature\" : int16_BE ( data , 8 ) / 10.0 , \"pressure\" : uint16_BE ( data , 10 ) / 10 }; } // Decoder function for TTN function Decoder ( bytes , port ) { // Decode an incoming message to an object of fields. var decoded ; switch ( port ) { case 1 : decoded = ParseStatusMessage ( bytes ); break ; case 2 : decoded = ParseDataMessage ( bytes ); break ; default : decoded = {}; } return decoded ; } // Wrapper for Lobaro Platform function Parse ( input ) { // Decode an incoming message to an object of fields. var b = bytes ( atob ( input . data )); var decoded = Decoder ( b , input . fPort ); if ( input . fPort == 2 ) { Device . setProperty ( \"status.firmware\" , decoded . FirmwareVersion ); Device . setProperty ( \"status.voltage\" , decoded . Vbat ); Device . setProperty ( \"status.temperature\" , decoded . Temp ); } return decoded ; } // Wrapper for Loraserver / ChirpStack function Decode ( fPort , bytes ) { return Decoder ( bytes , fPort ); } // Wrapper for Digimondo niota.io module . exports = function ( payload , meta ) { const port = meta . lora . fport ; const buf = Buffer . from ( payload , 'hex' ); return Decoder ( buf , port ); };","title":"Manual"},{"location":"lorawan-sensors/environment-lorawan/index.html#environment-lorawan-sensor","text":"Consider using the latest firmware on your hardware See available firmware downloads","title":"Environment LoRaWAN Sensor"},{"location":"lorawan-sensors/environment-lorawan/index.html#target-measurement-purpose","text":"High precision measuring of Temperature, Humidity, and Pressure, using the Bosch BME680 environmental sensor.","title":"Target Measurement / Purpose"},{"location":"lorawan-sensors/environment-lorawan/index.html#configuration","text":"For configuration of the LoRaWAN parameters, please refer to the chapter LoRaWAN configuration in our LoRaWAN background article. name description example value MeasureCron Cron expression \u2020 defining when to read. 0 0/15 * * * * for every 15 minutes \u2020 See also our Introduction to Cron expressions .","title":"Configuration"},{"location":"lorawan-sensors/environment-lorawan/index.html#payload","text":"Example payloads for each port:","title":"Payload"},{"location":"lorawan-sensors/environment-lorawan/index.html#status-message-port-1","text":"Payload: (No Example yet) Decoded: { \"temp\" : 20.4 , \"vBat\" : 3.0 , \"version\" : \"v0.0.1\" }","title":"Status Message (Port 1)"},{"location":"lorawan-sensors/environment-lorawan/index.html#data-message-port-2","text":"Structure: name pos len type description timestamp 0 5 uint40 Time of measurement (see timestamps in our LoRaWAN devices ) error flag 5 1 byte 1 : error, 0 : success humidity 6 2 uint16 BE Humidity in 1/10 % rH temperature 8 2 int16 BE Temperature in 1/10 \u00b0C pressure 10 2 uint16 BE Pressure in 10 Pa Example Payload: 00386d440700015400f527d1 Decoded: { \"error\" : false , \"humidity\" : 34 , \"pressure\" : 1019.3 , \"temperature\" : 24.5 , \"time\" : 946684935000 }","title":"Data Message (Port 2)"},{"location":"lorawan-sensors/environment-lorawan/index.html#parser","text":"","title":"Parser"},{"location":"lorawan-sensors/environment-lorawan/index.html#javascript-parser","text":"function readVersion ( bytes , i ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ i ] + \".\" + bytes [ i + 1 ] + \".\" + bytes [ i + 2 ]; } function signed ( val , bits ) { if (( val & 1 << ( bits - 1 )) > 0 ) { // value is negative (16bit 2's complement) var mask = Math . pow ( 2 , bits ) - 1 ; val = ( ~ val & mask ) + 1 ; // invert all bits & add 1 => now positive value val = val * - 1 ; } return val ; } function uint40_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 32 | bytes [ 1 ] << 24 | bytes [ 2 ] << 16 | bytes [ 3 ] << 8 | bytes [ 4 ] << 0 ; } function uint16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 8 | bytes [ 1 ] << 0 ; } function int40_BE ( bytes , idx ) { return signed ( uint40_BE ( bytes , idx ), 40 ); } function int16_BE ( bytes , idx ) { return signed ( uint16_BE ( bytes , idx ), 16 ); } function ParseStatusMessage ( data ) { var decoded = {}; decoded . version = readVersion ( data , 0 ); decoded . vBat = uint16_BE ( data , 5 ) / 1000.0 ; decoded . temp = int16_BE ( data , 3 ) / 10.0 ; // byte 8-9 (originally in 10th degree C) decoded . msg = \"Firmware Version: \" + decoded . FirmwareVersion + \" Battery: \" + decoded . Vbat + \"V Temperature: \" + decoded . Temp + \"\u00b0C\" ; return decoded ; } function ParseDataMessage ( data ) { return { \"time\" : int40_BE ( data , 0 ) * 1000 , \"error\" : !! data [ 5 ], \"humidity\" : uint16_BE ( data , 6 ) / 10.0 , \"temperature\" : int16_BE ( data , 8 ) / 10.0 , \"pressure\" : uint16_BE ( data , 10 ) / 10 }; } // Decoder function for TTN function Decoder ( bytes , port ) { // Decode an incoming message to an object of fields. var decoded ; switch ( port ) { case 1 : decoded = ParseStatusMessage ( bytes ); break ; case 2 : decoded = ParseDataMessage ( bytes ); break ; default : decoded = {}; } return decoded ; } // Wrapper for Lobaro Platform function Parse ( input ) { // Decode an incoming message to an object of fields. var b = bytes ( atob ( input . data )); var decoded = Decoder ( b , input . fPort ); if ( input . fPort == 2 ) { Device . setProperty ( \"status.firmware\" , decoded . FirmwareVersion ); Device . setProperty ( \"status.voltage\" , decoded . Vbat ); Device . setProperty ( \"status.temperature\" , decoded . Temp ); } return decoded ; } // Wrapper for Loraserver / ChirpStack function Decode ( fPort , bytes ) { return Decoder ( bytes , fPort ); } // Wrapper for Digimondo niota.io module . exports = function ( payload , meta ) { const port = meta . lora . fport ; const buf = Buffer . from ( payload , 'hex' ); return Decoder ( buf , port ); };","title":"Javascript Parser"},{"location":"lorawan-sensors/environment-lorawan/firmware.html","text":"Environment LoRaWAN Sensor Firmware Downloads: app-lorawan-environment-0.0.2.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changelog v0.0.2 - 2020-06-18 Use Lobawan Stack 1.2.2 (fixes some OTAA Join issues). Make logging of atmospheric values human readable. v0.0.1 - 2020-01-06 Initial release","title":"Firmware & Changelog"},{"location":"lorawan-sensors/environment-lorawan/firmware.html#environment-lorawan-sensor","text":"","title":"Environment LoRaWAN Sensor"},{"location":"lorawan-sensors/environment-lorawan/firmware.html#firmware","text":"Downloads: app-lorawan-environment-0.0.2.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Firmware"},{"location":"lorawan-sensors/environment-lorawan/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/environment-lorawan/firmware.html#v002-2020-06-18","text":"Use Lobawan Stack 1.2.2 (fixes some OTAA Join issues). Make logging of atmospheric values human readable.","title":"v0.0.2 - 2020-06-18"},{"location":"lorawan-sensors/environment-lorawan/firmware.html#v001-2020-01-06","text":"Initial release","title":"v0.0.1 - 2020-01-06"},{"location":"lorawan-sensors/gps-lorawan/index.html","text":"GPS / BeiDou LoRaWAN Tracker The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual V3"},{"location":"lorawan-sensors/gps-lorawan/index.html#gps-beidou-lorawan-tracker","text":"","title":"GPS / BeiDou LoRaWAN Tracker"},{"location":"lorawan-sensors/gps-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/gps-lorawan/firmware.html","text":"LoRaWAN GPS Tracker Firmware Downloads Make sure you install the correct firmware for your hardware revision The device will not work if an incompatible firmware is installed. If you are unsure, which hardware revision your device is, check with the description of hardware revisions . Hardware Revision 3 app-lorawan-gps-8.0.5.hex (hardware v3.x) [current release] Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Hardware Revision 2 Downloads : app-lorawan-gps-button-6.1.0.hex (hardware v2.x) [current release] app-lorawan-gps-button-6.0.3.hex (hardware v2.x) Warning This hardware revision is no longer available for sale! Consider using the improved HW Rev 3. Hardware Revision 1 Downloads : app-lorawan-gps-button-5.0.5.hex (hardware v1.x) app-lorawan-gps-button-4.0.9.hex (hardware v1.x) Info The LoRaWAN GPS data uplink data encoding has been changed between firmware 4.x (\"legacy format\") and 5.x. See the manual for details. Warning This hardware revision is no longer available for sale! Consider using the improved HW Rev 3. Changelog 8.0.5 - 2020-08-10 Fix LoRaWAN: NewChannelReq can remove channels by setting the Frequency to 0 instead of just disable them LoRaWAN: Fix bug where NBTrans > 1 leads to multiple responses from LoRaWAN stack 8.0.4 - 2020-08-06 Fix Fix internal Selftesting result format. 8.0.3 - 2020-08-06 Fix Remove random payload in reboot request ACK upload 8.0.1 - 2020-08-05 Fix Fix config problem with low SF. 8.0.0 - 2020-08-05 Changed Change official product name to LOB-S-GPS-LW-3 . Verify LoRaWAN Stack using official testing tool by LoRaWAN-Alliance. Remove OpMode (class C), ADR, and time sync over LoRaWAN Change internal logic of LostReboot-feature to use ACKs for checking for Network. Added Low Voltage Protection Fix Fix Voltage StepUp logic for GPS and LoRa Send uplink before reboot when ACK required. v7.1.0 - 17.06.2020 Added Add timestamp for last movement event to Port 2 payload Add config parameter movementDistance that configures how GPS-position changes are calculated as movement events. Fixed LoRaWAN 1.1 issue that sometimes led to invalid DevNonces used for OTAA Join. Make sure, mode changes from active to passive are reported in final uplink before change Fix an issue that could lead to all zero position data sent as valid position Upgrade to Lobaro LoRaWAN Stack 1.2.2 (RX Window adjustment). v7.0.0 - 28.04.2020 Completely rewrite firmware for new board rev3 with new LoRaWAN features and concepts. Extend Payload format on port 2 (add HDOP and Timestamp of last Fix). Listen to MEMS events while not asleep. Check for movement by GPS to update activity mode. New LED blinking patterns. Add regular status message on port 1. Update to new Lobaro LoRaWAN Stack (LoRaWAN v1.1, remote Configuration via Downlink, Class C, ...). Enable Time synchronisation from GPS. Change naming from \"Alive Mode\" to \"Passive Mode\" for easier distinguishing from \"Active Mode\". Reduce power consumption during deep sleep by ~20%. Removed Cayenne Payload Format v6.1.0 - 09.12.2019 added new parameters to increase accuracy: maxHDOP & maxDataAfterFix v6.0.3 - 02.08.2019 fixed temperature sensor readout v6.0.2 - 22.07.2019 inverted powerpin for telit module (hardware v2.1) added nmea prefix GN ( Glonass+GPS ) to the parser v5.0.5 - 09.01.2019 Update LoRaWAN Stack Enable stepUp if needed by battery condition v5.0.4 - 15.11.2018 update board driver v5.0.3 - 15.11.2018 fix signed issue with longitude v5.0.0 - 26.10.2018 Add option for Cayenne LLP Payload format Adjust payload format to support neagtive values Add Altitude Send GPS coordinates in Lat/Lon Format Update LoRaWAN Stack v4.0.9 - 05.10.2018 Update LoRaWAN Stack v4.0.7 - 15.08.2018 Fixed bugs with some LoRaWAN Network providers v4.0.6 - 28.05.2018 Clear pending mems IRQ before sleep Updated internal state handling v4.0.4 - 20.03.2018 Disable mems in active mode v4.0.3 - 20.03.2018 compile against new board revision (lower power in sleep) disable external rtc default tx power to 14dBm v4.0.2 - 23.02.2018 Fix lost GPS messages due to broken CRC checks v4.0.1 - 29.01.2018 Port to LoRa v3.2 Board v3.2 Measure vBat when 3.3V Step Up is off Add config parameter gps timeout Add config parameter LoRaWAN ADR v3.1 Enable buttons for sending (Reed contact connectors)","title":"Firmware & Changelog"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#lorawan-gps-tracker","text":"","title":"LoRaWAN GPS Tracker"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#firmware-downloads","text":"Make sure you install the correct firmware for your hardware revision The device will not work if an incompatible firmware is installed. If you are unsure, which hardware revision your device is, check with the description of hardware revisions .","title":"Firmware Downloads"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#hardware-revision-3","text":"app-lorawan-gps-8.0.5.hex (hardware v3.x) [current release] Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Hardware Revision 3"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#hardware-revision-2","text":"Downloads : app-lorawan-gps-button-6.1.0.hex (hardware v2.x) [current release] app-lorawan-gps-button-6.0.3.hex (hardware v2.x) Warning This hardware revision is no longer available for sale! Consider using the improved HW Rev 3.","title":"Hardware Revision 2"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#hardware-revision-1","text":"Downloads : app-lorawan-gps-button-5.0.5.hex (hardware v1.x) app-lorawan-gps-button-4.0.9.hex (hardware v1.x) Info The LoRaWAN GPS data uplink data encoding has been changed between firmware 4.x (\"legacy format\") and 5.x. See the manual for details. Warning This hardware revision is no longer available for sale! Consider using the improved HW Rev 3.","title":"Hardware Revision 1"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#805-2020-08-10","text":"","title":"8.0.5 - 2020-08-10"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#fix","text":"LoRaWAN: NewChannelReq can remove channels by setting the Frequency to 0 instead of just disable them LoRaWAN: Fix bug where NBTrans > 1 leads to multiple responses from LoRaWAN stack","title":"Fix"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#804-2020-08-06","text":"","title":"8.0.4 - 2020-08-06"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#fix_1","text":"Fix internal Selftesting result format.","title":"Fix"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#803-2020-08-06","text":"","title":"8.0.3 - 2020-08-06"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#fix_2","text":"Remove random payload in reboot request ACK upload","title":"Fix"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#801-2020-08-05","text":"","title":"8.0.1 - 2020-08-05"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#fix_3","text":"Fix config problem with low SF.","title":"Fix"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#800-2020-08-05","text":"","title":"8.0.0 - 2020-08-05"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#changed","text":"Change official product name to LOB-S-GPS-LW-3 . Verify LoRaWAN Stack using official testing tool by LoRaWAN-Alliance. Remove OpMode (class C), ADR, and time sync over LoRaWAN Change internal logic of LostReboot-feature to use ACKs for checking for Network.","title":"Changed"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#added","text":"Low Voltage Protection","title":"Added"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#fix_4","text":"Fix Voltage StepUp logic for GPS and LoRa Send uplink before reboot when ACK required.","title":"Fix"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v710-17062020","text":"","title":"v7.1.0 - 17.06.2020"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#added_1","text":"Add timestamp for last movement event to Port 2 payload Add config parameter movementDistance that configures how GPS-position changes are calculated as movement events.","title":"Added"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#fixed","text":"LoRaWAN 1.1 issue that sometimes led to invalid DevNonces used for OTAA Join. Make sure, mode changes from active to passive are reported in final uplink before change Fix an issue that could lead to all zero position data sent as valid position Upgrade to Lobaro LoRaWAN Stack 1.2.2 (RX Window adjustment).","title":"Fixed"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v700-28042020","text":"Completely rewrite firmware for new board rev3 with new LoRaWAN features and concepts. Extend Payload format on port 2 (add HDOP and Timestamp of last Fix). Listen to MEMS events while not asleep. Check for movement by GPS to update activity mode. New LED blinking patterns. Add regular status message on port 1. Update to new Lobaro LoRaWAN Stack (LoRaWAN v1.1, remote Configuration via Downlink, Class C, ...). Enable Time synchronisation from GPS. Change naming from \"Alive Mode\" to \"Passive Mode\" for easier distinguishing from \"Active Mode\". Reduce power consumption during deep sleep by ~20%. Removed Cayenne Payload Format","title":"v7.0.0 - 28.04.2020"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v610-09122019","text":"added new parameters to increase accuracy: maxHDOP & maxDataAfterFix","title":"v6.1.0 - 09.12.2019"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v603-02082019","text":"fixed temperature sensor readout","title":"v6.0.3 - 02.08.2019"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v602-22072019","text":"inverted powerpin for telit module (hardware v2.1) added nmea prefix GN ( Glonass+GPS ) to the parser","title":"v6.0.2 - 22.07.2019"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v505-09012019","text":"Update LoRaWAN Stack Enable stepUp if needed by battery condition","title":"v5.0.5 - 09.01.2019"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v504-15112018","text":"update board driver","title":"v5.0.4 - 15.11.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v503-15112018","text":"fix signed issue with longitude","title":"v5.0.3 - 15.11.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v500-26102018","text":"Add option for Cayenne LLP Payload format Adjust payload format to support neagtive values Add Altitude Send GPS coordinates in Lat/Lon Format Update LoRaWAN Stack","title":"v5.0.0 - 26.10.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v409-05102018","text":"Update LoRaWAN Stack","title":"v4.0.9 - 05.10.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v407-15082018","text":"Fixed bugs with some LoRaWAN Network providers","title":"v4.0.7 - 15.08.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v406-28052018","text":"Clear pending mems IRQ before sleep Updated internal state handling","title":"v4.0.6 - 28.05.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v404-20032018","text":"Disable mems in active mode","title":"v4.0.4 - 20.03.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v403-20032018","text":"compile against new board revision (lower power in sleep) disable external rtc default tx power to 14dBm","title":"v4.0.3 - 20.03.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v402-23022018","text":"Fix lost GPS messages due to broken CRC checks","title":"v4.0.2 - 23.02.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v401-29012018","text":"Port to LoRa v3.2 Board","title":"v4.0.1 - 29.01.2018"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v32","text":"Measure vBat when 3.3V Step Up is off Add config parameter gps timeout Add config parameter LoRaWAN ADR","title":"v3.2"},{"location":"lorawan-sensors/gps-lorawan/firmware.html#v31","text":"Enable buttons for sending (Reed contact connectors)","title":"v3.1"},{"location":"lorawan-sensors/gps-lorawan/revisions.html","text":"GPS-Tracker Hardware Revisions Our GPS-Tracker has been developed over several years. The Hardware has been improved, which lead to some compatibility breaking changes. The current hardware revision is Lobaro LoRaWAN GPS 3 , which runs the firmware starting with v7.0.0 . Older hardware revisions are no longer sold, but in some cases you might still require a firmware update for a previously acquired device. If you are unsure, which hardware revision your device is, you can find out with the information on this page. Current Revision: HW v3 The most recent revision of the LoRaWAN GPS/GSNN Tracker is 3, labeled Lobaro LoRaWAN GPS 3 in the bottom right corner of the circuit board. It has the order number 8000116 . You can also easily identify it by the position of the reset button in the center of the board, as well as the config port on the left side, opposite of the antenna. Please compare with the image bellow. Revision 3 needs to run a firmware starting with version 7.0.0. Usage of the device is described in the GPS-Tracker Manual, HW3 . Order number: 8000116 Previous Revision: HW v2 Previous revisions of the Lobaro LoRaWAN GPS-Tracker where built with a small additional board between the battery clips. On the board would be printed GPS Addon 2.x (e.g. 2.1 as in the image below). You can easily identify revision 2 by the blue and black cable (not green) connecting the small addon strip with the main board, as can be seen in the images below. This revision was available in the small white casing for use with two AA-batteries (order number: 8000014 ) or in a bigger variant with an additional board that can hold a D-cell battery or be used with an external power supply (order number: 8000082 ). Revision 2 runs firmware with major releases of 6, so anything like 6.x.x . For instruction on this device, please refer to the Deprecated GPS-Tracker HW2 manual . Order number: 8000014 Order number: 8000082 Previous Revision: HW v1 The initial revision of the Lobaro LoRaWAN GPS-Tracker was build with a small addon board, similar to revision 2, but with a different layout. The strip is labeled Lobaro GPS Rev1 . You can identify it by the big brown square block on the addon strip and also by the green and black cable (not blue) connecting the addon (see the image below). Revision 1 used the firmware up to major version 5. For instructions on usage of the device, please refer to the Deprecated GPS-Tracker HW1 manual (pdf) or, if you are still using firmware 4, to Deprecated GPS-Tracker HW1 FW4 manual (pdf).","title":"Hardware Revisions"},{"location":"lorawan-sensors/gps-lorawan/revisions.html#gps-tracker-hardware-revisions","text":"Our GPS-Tracker has been developed over several years. The Hardware has been improved, which lead to some compatibility breaking changes. The current hardware revision is Lobaro LoRaWAN GPS 3 , which runs the firmware starting with v7.0.0 . Older hardware revisions are no longer sold, but in some cases you might still require a firmware update for a previously acquired device. If you are unsure, which hardware revision your device is, you can find out with the information on this page.","title":"GPS-Tracker Hardware Revisions"},{"location":"lorawan-sensors/gps-lorawan/revisions.html#current-revision-hw-v3","text":"The most recent revision of the LoRaWAN GPS/GSNN Tracker is 3, labeled Lobaro LoRaWAN GPS 3 in the bottom right corner of the circuit board. It has the order number 8000116 . You can also easily identify it by the position of the reset button in the center of the board, as well as the config port on the left side, opposite of the antenna. Please compare with the image bellow. Revision 3 needs to run a firmware starting with version 7.0.0. Usage of the device is described in the GPS-Tracker Manual, HW3 . Order number: 8000116","title":"Current Revision: HW v3"},{"location":"lorawan-sensors/gps-lorawan/revisions.html#previous-revision-hw-v2","text":"Previous revisions of the Lobaro LoRaWAN GPS-Tracker where built with a small additional board between the battery clips. On the board would be printed GPS Addon 2.x (e.g. 2.1 as in the image below). You can easily identify revision 2 by the blue and black cable (not green) connecting the small addon strip with the main board, as can be seen in the images below. This revision was available in the small white casing for use with two AA-batteries (order number: 8000014 ) or in a bigger variant with an additional board that can hold a D-cell battery or be used with an external power supply (order number: 8000082 ). Revision 2 runs firmware with major releases of 6, so anything like 6.x.x . For instruction on this device, please refer to the Deprecated GPS-Tracker HW2 manual . Order number: 8000014 Order number: 8000082","title":"Previous Revision: HW v2"},{"location":"lorawan-sensors/gps-lorawan/revisions.html#previous-revision-hw-v1","text":"The initial revision of the Lobaro LoRaWAN GPS-Tracker was build with a small addon board, similar to revision 2, but with a different layout. The strip is labeled Lobaro GPS Rev1 . You can identify it by the big brown square block on the addon strip and also by the green and black cable (not blue) connecting the addon (see the image below). Revision 1 used the firmware up to major version 5. For instructions on usage of the device, please refer to the Deprecated GPS-Tracker HW1 manual (pdf) or, if you are still using firmware 4, to Deprecated GPS-Tracker HW1 FW4 manual (pdf).","title":"Previous Revision: HW v1"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html","text":"GPS / GLONASS LoRaWAN Tracker New version available This is the manual for a version of our GPS-Tracker, which is no longer manufactured. This hardware revision uses has an addon strip screwed on the basis board, labeled GPS Addon V2.x (compare the photograph below). Our current hardware revision is labeled Lobaro LoRaWAN GPS 3 and does not have an addon strip (compare the photograph in the current revision's manual). Please be sure you are using the manual for the correct hardware revision. Do not install firmware of version 7 or higher on the old hardware revision, as it will not work! Please refer to GPS-Tracker Hardware Revisions to find out which hardware you have. Variant without Power Addon Order number: 8000014 Variant with Power Addon Order number: 8000082 Hardware Revisions The picture above shows the tracker in hardware revision 2 with GPS and additional GLONASS support for best positioning. Hardware revision 1 with GPS only is no longer available. Show pictures of different hardware revisions Overview The LoRaWAN GPS Tracker (GPS-LoRaWAN) is a battery powered tracking device, that uses the satellite based positioning services GPS and GLONASS to determine its location and transmits the obtained coordinates via LoRaWAN radio technology. Intervals between measurements can be freely configured, in order to adjust the device to individual needs. An integrated motion sensor detects changes in the device's movement (if it is picked up or transported in a vehicle). This allows the device to switch between an Active Mode in which frequent updates are uploaded during phases of movement and an Alive Mode that saves battery power by sending only few updates. While not sending updates, the device enters a sleep mode that only uses \u223c30 \u00b5A. Please read the manual carefully before operating the device. A safe operation of the device is only possible if you follow the guides provided in this manual. Using the device differently than intended by Lobaro my cause damage to people, the environment, or the device. Operating the GPS Tracker Once batteries are inserted into the device, it will start working. The Tracker will most likely need to be adjusted to your personal LoRaWAN configuration (see chapter \"Configuration\"). Batteries The LoRaWAN GPS Tracker default power supply consists of two series connected off-theshelf 1.5V 'AA' sized batteries. Be sure to get the polarity right, see the '+'-Symbol on the board. In general only AA cells of the types Alkali-Manganese (1.5V, LR6) and Lithium-Iron- Sulphide (1.5V, FR6) are allowed to be inserted in the device. Lobaro recommends the use of FR6 batteries like the Energizer Ultimate Lithium over LR6 types because of the higher capacity and better discharge properties. Warning Other Batteries or accumulators with a nominal voltage of more than 1.5V must not inserted into the device under any circumstances. In particular, lithium based cells with a nominal voltage of 3.6V or 3.7V must not be used on the AA battery slots! On request we can supply custom product variants with special housings powered by even bigger batteries. For example a 3.6V C sized mono cell typically has a capacity of 9Ah with leads to a 3x increased battery life compared to the standard AA-cells. With D sized cells of typically 19Ah capacity this value can be doubled once again (6x). Also available on request are options with permanent external power supply (230V, 9-24V, 5V USB). Installation The device can be fixed on a flat surface using the lateral mounting holes of the case, see Hardware Variations for a detailed description of all housing dimensions. Alternatively we offer as accessory a mounting clip for a standard 35mm DIN rail. The device can then easily snapped on a such rails. It can therefore be added to a variety of racks alongside other devices. Note Under any circumstances the device must not be mounted higher than 2 meters above ground to avoid any risks in case of falling down! For optimal RF performance (e.g. LoRa range) any metal obstacles near the internal antenna should be avoided. In this case 'near' is defined as keep-out distance of about 3-5 centimeters around the antenna. The internal helix antenna can be identified by the winding pcb traces near the white printed encircled 'connectivity' symbol. In any case a device mounting directly on top of a metal surface is not advisable since it will degrade the possible RF range. Stone walls, wood or plastic standoffs are perfectly ok. In case of challenging installation locations (e.g. in basements) or unavoidable long distances to the next LoRaWAN gateway, Lobaro offers on request custom product variant equipped with a 'SMA' connector to support a external antenna connection. Work Cycle graph LR; GPS(GPS Collection) Data(Data Transfer) Active(Active Sleep) Alive(Alive Sleep) init(Initial)==>check(LoRaWAN Join); check(LoRaWAN Join)==>GPS(GPS Collect.); Data==>|recent movement|Active(Active Sleep); GPS==>Data(Data Transfer); Active==>|short time cron expression|GPS(GPS Collection); Data(Data Transfer)==>|no recent movement|Alive(Alive Sleep); Alive==>|movement or long time cron expression|GPS(GPS Collection); The GPS Tracker has a work cycle that adapts to detected motion of the device. Initial Phase This is the phase that is executed after the device is started of restarted. The LED flashes once and the configuration is evaluated. If successful, the LoRaWAN Join phase is executed next. LoRaWAN Join Phase If the Device is configured to use over the air activation (OTAA), the OTAA Join is performed at this point. The device will repeatedly try to join its LoRaWAN network until the process is successful. It then enters the Data Collection Phase. If the Device is configured to use ABP instead of OTAA, this phase is left immediately and the Data Collection Phase is entered. GPS Collection Phase During the GPS Collection Phase the device will try to determine its coordinates (latitude, longitude, and height) using GPS. You can identify this phase by the onboard LED flashing on and off in one second intervals. Once the position has been determined successfully (or the attempt timed out and failed, because of bad GPS reception), the device enters the Data Transfer Phase. Data Transfer Phase During the Data Transfer Phase the Tracker uploads the GPS coordinates to the LoRaWAN network. The message contains the information if the measurement was successful. Some status information about the device are included as well. For a detailed description of the data sent refer to \"LoRaWAN Data Upload Formats\". After data transfer, the GPS Tracker enters a sleep state to save power. Depending on how much time passed since the last physical movement of the device (determined by the internal motion sensor), the Tracker enters diferent sleep phases. If the time since the last detected motion is less than a timeout value (configurable, standard value is 65 minutes), the device remains in Active mode enters only a short sleep phase ( Active Sleep ). If no motion was detected for a time longer than the timeout, the device enters the Alive Sleep Phase, which typically has a much longer sleeping time, but in which the device will also be activated through movement. Active Sleep Phase Even in Active Mode, the device spends most of its time in a deep sleep state to conserve energy. The frequency with which the Tracker wakes up in Active Mode can be configured using a Cron expression (see \"GPS configuration parameters\"). Typical values for active sleep time are 5 or 15 minutes. When in Active Sleep Phase, the device will not be triggered to gather more GPS positions through motion, but movement of the device will still be registered to keep the Tracker in Active Mode. Alive Sleep Phase When no movement has been detected for a long amount of time (configurable), the device stops sending updates, since there is not much point in sending frequent position information when the device does not change its position. In Alive Mode, only very few updates are sent to keep the network informed about the device's health. Typically one message is sent per day in this mode (frequency can be configured with a cron expression, see \"GPS configuration parameters\"). When physical movement is detected by the internal motion sensor during this phase, the GPS Tracker immediately wakes up and switches to Active Mode. Configuration The Lobaro Maintenance Tool The initial device configuration can be done very comfortably from your PC via the serial configuration interface. Beside the needed Lobaro USB to UART adapter the Lobaro Maintenance Tool needs to be installed. This tool is freely available for various operating systems including Windows, Linux, Mac and Linux-ARM (e.g. Raspberry-PI) on and works with all Lobaro sensors. Technically this software opens a webserver on port 8585 that runs in a background console window. The actual user interface can be accessed normally using a standard web browser at address http://localhost:8585 . Normally your default browser should be opened with this URL automatically after tool startup . Even remote configuration and logobservation over the Internet is possible, e.g. having a Raspberry PI via USB connected to the Lobaro device and accessing the maintenance tool from a remote machines browser over the Internet. Additionally to the device setup the tool can also be used for firmware updates ('Firmware Tab') , watching real-time device diagnostic output ('Logs Tab') and initiating device restarts. Info Please note that the device might be restarted each time the configuration gets plugged/unplugged! Connecting the USB config adapter For configuration and Firmware updates we provide a special serial-USB adapter that can be connected as shown in the picture underneath. The corresponding connector on the PCB is marked with the word 'Config'. The USB-adapter will add a virtual serial 'COM' Port to your system. Your operating system needs the CP210x USB to UART bridge driver installed. A download link is provided next to the 'Connect' button when you start the Maintenance Tool. While the config adapter is connected, the device will be powered from the USB port with a regulated voltage of 3.3V. It is not necessary - although it would be no problem - having batteries inserted or a different supply connected while using the config adapter. All configuration parameters will be kept non-volatile regardless of the power supply. Hardware Revisions The picture above shows the tracker in hardware revision 1 with GPS only support. Hardware revision 1 with GPS only is no longer available. System Parameters After being successfully connected to the hardware using the Lobaro Maintenance Tool you can press 'Reload Config' in the 'Configuration' tab to read the current configuration from the device. For every parameter a default value is stored non volatile inside the hardware to which you can revert using the 'Restore default' button in case anything got miss configured. All LoRaWAN & other firmware parameters are explained in the following. LoRaWAN The connection to the LoRaWAN network is defined by multiple configuration parameters. This need to be set according to your LoRaWAN network and the way your device is supposed to be attached to it, or the device will not be able to send any data. For a detailed introduction into how this values need to be configured, please refer to the chapter LoRaWAN configuration in our LoRaWAN background article. Name Description Type Values OTAA Activation: OTAA or ABP bool true = use OTAA, false = use ABP DevEUI DevEUI used to identify the Device byte[8] e.g. 0123456789abcdef JoinEUI Used for OTAA (called AppEUI in v1.0) byte[8] e.g. 0123456789abcdef AppKey Key used for OTAA (v1.0 and v1.1) byte[16] NwkKey Key used for OTAA (v1.1 only) byte[16] SF Initial / maximum Spreading Factor int 7 - 12 ADR Use Adaptive Data Rate bool true = use ADR, false = don't OpMode Operation Mode string A = Class A, C = Class C TimeSync Days after which to sync time int days, 0 =don't sync time RndDelay Random delay before sending int max seconds RemoteConf Not supported by this firmware bool false =deactivate LostReboot Days without downlink before reboot int days, 0 =don't reboot GPS configuration parameters The behaviour of the GPS Tracker and how it switches between its two operation modes ('Active' and 'Alive') can be adjusted to your needs. The table explains the configuration parameters used for this. Name Type Description default value ActiveCron string Cron expression defining how often the device will take a measurement and send its position over LoRaWAN while the Tracker is in Active Mode. This expression should trigger much more frequent than the one for Alive Mode. The standard is 0 0/15 * * * *, which will trigger every 15 minutes. See chapter \"Cron expressions\" for an introduction to cron expressions. 0 0/15 * * * * AliveCron string Cron expression defining how often the device will wake up when in Alive Mode. This should be less frequent than in Active Mode. The standard is 0 0 0/12 * * *, which translates to twice each day. See chapter \"Cron expressions\" for an introduction to cron expressions. 0 0 0/12 * * * gpsTO int Time in seconds to wait for GPS to get a fix before timing out. 180 seconds actTO int Time in minutes without movement after which the Tracker switches to Alive Mode. 65 minutes memsTh int Threshold for the internal motion detector to register movement. Values range from 2 to 255. A higher value makes the device less sensitive. 2 Environment (wind or steps) may trigger. 5 Standard, picking up the device will activate it. 20 Carefully picking it up will not trigger the device. 50 When carried, running will trigger, walking won't. 100+ Shaking will activate, dropping the device might not. 5 CayenneLPP bool Use alternative Cayenne LPP upload format. Standard: false, e.g. use Lobaro Format. See chapter \"myDevices Cayenne format\" for an introduction to this format. false maxHDOP int Maximum acceptable Horizontal Dilution Of Precision, between 1 and 50, smaller is better 2 maxDataAfterFix int If the HDOP target cannot be matched this value determines after how many datapackets with fix the position will be accepted 20 Cron expressions Cron expressions are used to define specific points in time and regular repetitions of them. The schedule for data collecting phases is defined using the CRON format which is very powerful format to define repeatedly occurring events. Info Standard Lobaro devices typically do not need to know the real time for proper operation. All times are relative to the initial time when batteries are inserted. If needed by the target application Lobaro can deliver on request special hardware support for keeping data acquisition intervals based on a real time clock which stays in sync with the real time. Please contact Lobaro directly if you need such a custom product variant. A cron expression consists of 6 values separated by spaces: Seconds (0-59) Minutes (0-59) Hours (0-23) Days (1-31) Month (1-12) Day of Week (SUN-SAT b= [0,6]) Examples of CRON definitions: 0 5 **** hourly at minute 5, second 0 (at 00:05:00, 01:05:00, ...) 0 1/10 * * * * every 10 minutes from minute 1, second 0 (minutes 1, 11, 21, ...) 0 0 6 * * * daily at 6:00:00 0 0 13 1,15 * * 1 st and 15 th day of every month at 13:00:00 0 0 9 1-5 * * every month daily from day 1 till 5 at 9:00:00 LoRaWAN Data Upload Formats After reading GPS coordinates (either successfully or unsuccessfully), the Tracker uploads the data using LoRaWAN. As LoRaWAN can only transmit very short messages, the message formats contain only data bytes, no keys or data types are included. The meaning of a byte is determined by its position within a message. The tracker supports two different upload formats as described in the following: Lobaro upload format (since Firmware Version 5) Only a single massage format is used by the GPS Tracker, it has a fixed length of 17 bytes. The table explains the message format used. This format uses the decimal degrees notation for the location, e.g. 53.4724\u00b0 north and 9.9334\u00b0 east. Positive (+) values indicate north longitudes and east latitudes, negative (-) values indicate south longitudes and west latitudes. Both location values are transmitted as signed integers in big endian format and get multiplied by 100.000. So after receiving the location data must be divided by this factor. Multi byte integers are transmitted as big endian. Values that would require decimal places are transmitted in smaller units, e.g. 1/100000 degree (as described before), to handle only with integers. Fields, Data Packet name bytes type description example / range temp 0-1 int16 Temperature inside the device in 1/10\u00b0C 246 = 24.6 \u00b0C v_bat 2-3 uint16 Current battery voltage in mV 3547 = 3.547 V latitude deg 4-7 int32 int32 degrees of the latitude x 100 000 -9 000 000 to 9 000 000 longitude deg 8-11 int32 degrees of the longitude x 100 000 -18 000 000 to 18 000 000 altitude 12-14 int24 Altitude of the device in centimeters -8 388 607 to 8 388 606 flags 15 uint8 Status flag, refer to table below 00bin = invalid, alive 01bin = valid, alive 10bin = invalid, active 11bin = valid, active sat 16 uint8 GPS satellites found / in view 7 Status flag bit function not set set 1 Validity of last measurement invalid valid 2 Current operation mode alive active 3-8 reserved for future use If during some configurable period of time (see \"gpsTO\" parameter in table \"GPS configuration parameters\") no GPS location can be found the last known valid GPS location will be transmitted but with the valid flag set to false. We provide a JavaScript reference implementation of a decoder for the data packages, which can be used directly for decoding in The Things Network . myDevices Cayenne format As an alternative for the Lobaro data format the tracker can be configured to send Cayenne LPP compatible LoRaWAN uploads. myDevices Cayenne allows you to quickly visualize the via LoRaWAN transmitted data of the Lobaro GPS-tracker. You can use Cayenne as a tool to visualize real-time and historical data, sent over The Things Network and various other LoRaWAN providers. To use the alternative upload format configuration parameter \"CayenneLPP\" must be set to \"true\" as described in section \"GPS configuration parameters\" The advantages of using the cayenne format is a quick device evaluation without programming some custom backend and/or front software. Disadvantages are bigger LoRaWAN message sizes due to the additional schema meta information overhead the format needs. The Lobaro GPS Trackers maps its data to cayenne channels as follows: description cayenne channel cayenne type Internal Temperature 0 Temperature Battery Voltage 1 AnalogOutput GPS data 2 GPS satellites found 3 Digital Output Legacy upload format (up to Firmware Version 4) This format is not supported any more since firmware version V5.0.0! Please consider updating your device firmware using the Lobaro maintenance tool. Only a single massage format is used by the GPS Tracker, it has a fixed length of 15 bytes. This format uses the degrees with decimal minutes notation for the location. Multi byte integers are transmitted as big endian. Values that would require decimal places are transmitted in smaller units (e.g. mV instead of V). The table underneath explains the message format used. name type description example/range flags uint8 Status flags, for internal use 0 temp int16 Temperature inside the device in 1/10\u00b0C 246 \u2259 24.6 \u00b0C v_bat uint16 Current battery voltage in mV 3547 \u2259 3:547 V latitude deg int8 Whole degrees of the latitude -90 to 90 Example As an illustration, if the received data would consist of the 15 bytes (hexencoded): 00 01 18 0D 69 35 1C 0F 71 09 38 02 4B 01 06 type example description flag 00 for internal use, ignore temp 01 18 0118 hex = 0280dec \u2259 280 d\u00b0C = 28.0 \u00b0C v_bat 0D 69 0D89 hex = 3465dec \u2259 3465mV = 3.465V latitude 35 1C 0F 71 35hex = 53dec \u2259 53\u00b0 1C hex = 28dec \u2259 28' 0F71 hex = 3953dec \u2259 0.3953' 351C0F71 \u2259 53\u00b028.3952' = 53.473255\u00b0 = 53\u00b028'23.718'' North longitude 09 38 02 4B 09 hex = 09dec \u2259 09\u00b0 38 hex = 56dec \u2259 56' 024B hex = 0587dec \u2259 0.0587' 0938024B \u2259 9\u00b056.0587' = 9.934 312\u00b0 = 9\u00b056'3.522'' East valid 01 01hex \u2259 valid measurement, could receive GPS signal sat 06 06hex = 06dec \u2259 Signal of 6 satellites received for measurement Technical characteristics Product Type name GPS-LoRaWAN Description LoRaWAN GPS Tracker RF transceiver Chipset Semtech SX1272 Frequency Range 863 to 870 MHz TX Power \u2264 14 dBm Typically RF range \u2264 2km Ideal RF range \u2264 10km (free line of sight) LoRa communication LoRaWAN Protocol LoRaWAN 1.0.1, Class A, EU868 Activation method Over-the-air activation (OTAA) Activation by personalization (ABP) Encryption AES128 Power Power supply 2xAA sized battery, 1.5 V, LR6/FR6 Supply voltage UNom = 3.0V, UMin = 2.2V, UMax = 3.7V Capacity \u223c 30000 LoRaWAN messages @SF11 Current consumption @3V Normal \u22643 mA Wireless M-BUS RX \u226414 mA LoRa RX \u226414 mA LoRa TX \u226480 mA Sleep with GPS standby and MEMS running \u226420 \u00b5A Mechanical dimensions Size 114.3 mm x 59.3 mm x 26.8 mm Housing Material ABS plastic Environmental Requirements Operating temperature range -20\u00b0C to +55\u00b0C Max. Installation height 2m Conformity Parser The Things Network For Version 4.x, 5.x and 6.x function signed ( val , bits ) { if (( val & 1 << ( bits - 1 )) > 0 ) { // value is negative (16bit 2's complement) var mask = Math . pow ( 2 , bits ) - 1 ; val = ( ~ val & mask ) + 1 ; // invert all bits & add 1 => now positive value val = val * - 1 ; } return val ; } function int16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 8 | bytes [ 1 ] << 0 , 16 ); } function int24_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 16 | bytes [ 1 ] << 8 | bytes [ 2 ] << 0 , 24 ); } function int32_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 24 | bytes [ 1 ] << 16 | bytes [ 2 ] << 8 | bytes [ 3 ] << 0 , 32 ); } function DecoderPort2 ( bytes ) { // Format for firmware 5.0.x // Decode an uplink message from a buffer // (array) of bytes to an object of fields. var Temp = int16_BE ( bytes , 0 ) / 10 ; var VBat = int16_BE ( bytes , 2 ) / 1000 ; var Lat = int32_BE ( bytes , 4 ) / 100000 ; var Lon = int32_BE ( bytes , 8 ) / 100000 ; var Alt = int24_BE ( bytes , 12 ) / 100 ; var Valid = bytes [ 15 ] & 0x01 ; var Active = bytes [ 15 ] & 0x02 ; var SatCnt = bytes [ 16 ]; return { Temp : Temp || 0 , VBat : VBat || 0 , Lat : Lat || 0 , Lon : Lon || 0 , Alt : Alt || 0 , Valid : Valid , Active : Active , SatCnt : SatCnt }; } function DecoderPort1 ( bytes ) { // legacy format, firmware 4.x // Decode an uplink message from a buffer // (array) of bytes to an object of fields. var button_number = bytes [ 0 ]; var Temp10tel = ( bytes [ 1 ] << 8 ) | ( bytes [ 2 ] << 0 ); var VBat1000tel = ( bytes [ 3 ] << 8 ) | ( bytes [ 4 ] << 0 ); var lat_deg = bytes [ 5 ]; var lat_min = bytes [ 6 ]; var lat_10000min = ( bytes [ 7 ] << 8 ) | ( bytes [ 8 ] << 0 ); var long_deg = bytes [ 9 ]; var long_min = bytes [ 10 ]; var long_10000min = ( bytes [ 11 ] << 8 ) | ( bytes [ 12 ] << 0 ); var gpsValid = ( bytes [ 13 ] !== 0 ); // Missing byte = true return { button_number : button_number || 0 , Temp10tel : Temp10tel || 0 , VBat1000tel : VBat1000tel || 0 , lat_deg : lat_deg || 0 , lat_min : lat_min || 0 , lat_10000min : lat_10000min || 0 , long_deg : long_deg || 0 , long_min : long_min || 0 , long_10000min : long_10000min || 0 , gps_valid : gpsValid || false }; } function Decoder ( bytes , port ) { switch ( port ) { case 1 : return DecoderPort1 ( bytes ); case 2 : return DecoderPort2 ( bytes ); default : return { \"error\" : \"Unsupported port\" , \"port\" : port }; } } // Wrapper for Lobaro Platform function Parse ( input ) { // Decode an incoming message to an object of fields. var b = bytes ( atob ( input . data )); var decoded = Decoder ( b , input . fPort ); return decoded ; } // Wrapper for Loraserver / ChirpStack function Decode ( fPort , bytes ) { return Decoder ( bytes , fPort ); } // Wrapper for Digimondo niota.io (uncomment only when used in niota) /* module.exports = function (payload, meta) { const port = meta.lora.fport; const buf = Buffer.from(payload, 'hex'); return Decoder(buf, port); }*/ PDF Documentation Product Dimensions (pdf) User Manual (en) CE Declaration of Conformity","title":"Manual V2"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#gps-glonass-lorawan-tracker","text":"New version available This is the manual for a version of our GPS-Tracker, which is no longer manufactured. This hardware revision uses has an addon strip screwed on the basis board, labeled GPS Addon V2.x (compare the photograph below). Our current hardware revision is labeled Lobaro LoRaWAN GPS 3 and does not have an addon strip (compare the photograph in the current revision's manual). Please be sure you are using the manual for the correct hardware revision. Do not install firmware of version 7 or higher on the old hardware revision, as it will not work! Please refer to GPS-Tracker Hardware Revisions to find out which hardware you have.","title":"GPS / GLONASS LoRaWAN Tracker"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#variant-without-power-addon","text":"Order number: 8000014","title":"Variant without Power Addon"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#variant-with-power-addon","text":"Order number: 8000082 Hardware Revisions The picture above shows the tracker in hardware revision 2 with GPS and additional GLONASS support for best positioning. Hardware revision 1 with GPS only is no longer available. Show pictures of different hardware revisions","title":"Variant with Power Addon"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#overview","text":"The LoRaWAN GPS Tracker (GPS-LoRaWAN) is a battery powered tracking device, that uses the satellite based positioning services GPS and GLONASS to determine its location and transmits the obtained coordinates via LoRaWAN radio technology. Intervals between measurements can be freely configured, in order to adjust the device to individual needs. An integrated motion sensor detects changes in the device's movement (if it is picked up or transported in a vehicle). This allows the device to switch between an Active Mode in which frequent updates are uploaded during phases of movement and an Alive Mode that saves battery power by sending only few updates. While not sending updates, the device enters a sleep mode that only uses \u223c30 \u00b5A. Please read the manual carefully before operating the device. A safe operation of the device is only possible if you follow the guides provided in this manual. Using the device differently than intended by Lobaro my cause damage to people, the environment, or the device.","title":"Overview"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#operating-the-gps-tracker","text":"Once batteries are inserted into the device, it will start working. The Tracker will most likely need to be adjusted to your personal LoRaWAN configuration (see chapter \"Configuration\").","title":"Operating the GPS Tracker"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#batteries","text":"The LoRaWAN GPS Tracker default power supply consists of two series connected off-theshelf 1.5V 'AA' sized batteries. Be sure to get the polarity right, see the '+'-Symbol on the board. In general only AA cells of the types Alkali-Manganese (1.5V, LR6) and Lithium-Iron- Sulphide (1.5V, FR6) are allowed to be inserted in the device. Lobaro recommends the use of FR6 batteries like the Energizer Ultimate Lithium over LR6 types because of the higher capacity and better discharge properties. Warning Other Batteries or accumulators with a nominal voltage of more than 1.5V must not inserted into the device under any circumstances. In particular, lithium based cells with a nominal voltage of 3.6V or 3.7V must not be used on the AA battery slots! On request we can supply custom product variants with special housings powered by even bigger batteries. For example a 3.6V C sized mono cell typically has a capacity of 9Ah with leads to a 3x increased battery life compared to the standard AA-cells. With D sized cells of typically 19Ah capacity this value can be doubled once again (6x). Also available on request are options with permanent external power supply (230V, 9-24V, 5V USB).","title":"Batteries"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#installation","text":"The device can be fixed on a flat surface using the lateral mounting holes of the case, see Hardware Variations for a detailed description of all housing dimensions. Alternatively we offer as accessory a mounting clip for a standard 35mm DIN rail. The device can then easily snapped on a such rails. It can therefore be added to a variety of racks alongside other devices. Note Under any circumstances the device must not be mounted higher than 2 meters above ground to avoid any risks in case of falling down! For optimal RF performance (e.g. LoRa range) any metal obstacles near the internal antenna should be avoided. In this case 'near' is defined as keep-out distance of about 3-5 centimeters around the antenna. The internal helix antenna can be identified by the winding pcb traces near the white printed encircled 'connectivity' symbol. In any case a device mounting directly on top of a metal surface is not advisable since it will degrade the possible RF range. Stone walls, wood or plastic standoffs are perfectly ok. In case of challenging installation locations (e.g. in basements) or unavoidable long distances to the next LoRaWAN gateway, Lobaro offers on request custom product variant equipped with a 'SMA' connector to support a external antenna connection.","title":"Installation"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#work-cycle","text":"graph LR; GPS(GPS Collection) Data(Data Transfer) Active(Active Sleep) Alive(Alive Sleep) init(Initial)==>check(LoRaWAN Join); check(LoRaWAN Join)==>GPS(GPS Collect.); Data==>|recent movement|Active(Active Sleep); GPS==>Data(Data Transfer); Active==>|short time cron expression|GPS(GPS Collection); Data(Data Transfer)==>|no recent movement|Alive(Alive Sleep); Alive==>|movement or long time cron expression|GPS(GPS Collection); The GPS Tracker has a work cycle that adapts to detected motion of the device.","title":"Work Cycle"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#initial-phase","text":"This is the phase that is executed after the device is started of restarted. The LED flashes once and the configuration is evaluated. If successful, the LoRaWAN Join phase is executed next.","title":"Initial Phase"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#lorawan-join-phase","text":"If the Device is configured to use over the air activation (OTAA), the OTAA Join is performed at this point. The device will repeatedly try to join its LoRaWAN network until the process is successful. It then enters the Data Collection Phase. If the Device is configured to use ABP instead of OTAA, this phase is left immediately and the Data Collection Phase is entered.","title":"LoRaWAN Join Phase"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#gps-collection-phase","text":"During the GPS Collection Phase the device will try to determine its coordinates (latitude, longitude, and height) using GPS. You can identify this phase by the onboard LED flashing on and off in one second intervals. Once the position has been determined successfully (or the attempt timed out and failed, because of bad GPS reception), the device enters the Data Transfer Phase.","title":"GPS Collection Phase"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#data-transfer-phase","text":"During the Data Transfer Phase the Tracker uploads the GPS coordinates to the LoRaWAN network. The message contains the information if the measurement was successful. Some status information about the device are included as well. For a detailed description of the data sent refer to \"LoRaWAN Data Upload Formats\". After data transfer, the GPS Tracker enters a sleep state to save power. Depending on how much time passed since the last physical movement of the device (determined by the internal motion sensor), the Tracker enters diferent sleep phases. If the time since the last detected motion is less than a timeout value (configurable, standard value is 65 minutes), the device remains in Active mode enters only a short sleep phase ( Active Sleep ). If no motion was detected for a time longer than the timeout, the device enters the Alive Sleep Phase, which typically has a much longer sleeping time, but in which the device will also be activated through movement.","title":"Data Transfer Phase"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#active-sleep-phase","text":"Even in Active Mode, the device spends most of its time in a deep sleep state to conserve energy. The frequency with which the Tracker wakes up in Active Mode can be configured using a Cron expression (see \"GPS configuration parameters\"). Typical values for active sleep time are 5 or 15 minutes. When in Active Sleep Phase, the device will not be triggered to gather more GPS positions through motion, but movement of the device will still be registered to keep the Tracker in Active Mode.","title":"Active Sleep Phase"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#alive-sleep-phase","text":"When no movement has been detected for a long amount of time (configurable), the device stops sending updates, since there is not much point in sending frequent position information when the device does not change its position. In Alive Mode, only very few updates are sent to keep the network informed about the device's health. Typically one message is sent per day in this mode (frequency can be configured with a cron expression, see \"GPS configuration parameters\"). When physical movement is detected by the internal motion sensor during this phase, the GPS Tracker immediately wakes up and switches to Active Mode.","title":"Alive Sleep Phase"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#configuration","text":"","title":"Configuration"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#the-lobaro-maintenance-tool","text":"The initial device configuration can be done very comfortably from your PC via the serial configuration interface. Beside the needed Lobaro USB to UART adapter the Lobaro Maintenance Tool needs to be installed. This tool is freely available for various operating systems including Windows, Linux, Mac and Linux-ARM (e.g. Raspberry-PI) on and works with all Lobaro sensors. Technically this software opens a webserver on port 8585 that runs in a background console window. The actual user interface can be accessed normally using a standard web browser at address http://localhost:8585 . Normally your default browser should be opened with this URL automatically after tool startup . Even remote configuration and logobservation over the Internet is possible, e.g. having a Raspberry PI via USB connected to the Lobaro device and accessing the maintenance tool from a remote machines browser over the Internet. Additionally to the device setup the tool can also be used for firmware updates ('Firmware Tab') , watching real-time device diagnostic output ('Logs Tab') and initiating device restarts. Info Please note that the device might be restarted each time the configuration gets plugged/unplugged!","title":"The Lobaro Maintenance Tool"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#connecting-the-usb-config-adapter","text":"For configuration and Firmware updates we provide a special serial-USB adapter that can be connected as shown in the picture underneath. The corresponding connector on the PCB is marked with the word 'Config'. The USB-adapter will add a virtual serial 'COM' Port to your system. Your operating system needs the CP210x USB to UART bridge driver installed. A download link is provided next to the 'Connect' button when you start the Maintenance Tool. While the config adapter is connected, the device will be powered from the USB port with a regulated voltage of 3.3V. It is not necessary - although it would be no problem - having batteries inserted or a different supply connected while using the config adapter. All configuration parameters will be kept non-volatile regardless of the power supply. Hardware Revisions The picture above shows the tracker in hardware revision 1 with GPS only support. Hardware revision 1 with GPS only is no longer available.","title":"Connecting the USB config adapter"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#system-parameters","text":"After being successfully connected to the hardware using the Lobaro Maintenance Tool you can press 'Reload Config' in the 'Configuration' tab to read the current configuration from the device. For every parameter a default value is stored non volatile inside the hardware to which you can revert using the 'Restore default' button in case anything got miss configured. All LoRaWAN & other firmware parameters are explained in the following.","title":"System Parameters"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#lorawan","text":"The connection to the LoRaWAN network is defined by multiple configuration parameters. This need to be set according to your LoRaWAN network and the way your device is supposed to be attached to it, or the device will not be able to send any data. For a detailed introduction into how this values need to be configured, please refer to the chapter LoRaWAN configuration in our LoRaWAN background article. Name Description Type Values OTAA Activation: OTAA or ABP bool true = use OTAA, false = use ABP DevEUI DevEUI used to identify the Device byte[8] e.g. 0123456789abcdef JoinEUI Used for OTAA (called AppEUI in v1.0) byte[8] e.g. 0123456789abcdef AppKey Key used for OTAA (v1.0 and v1.1) byte[16] NwkKey Key used for OTAA (v1.1 only) byte[16] SF Initial / maximum Spreading Factor int 7 - 12 ADR Use Adaptive Data Rate bool true = use ADR, false = don't OpMode Operation Mode string A = Class A, C = Class C TimeSync Days after which to sync time int days, 0 =don't sync time RndDelay Random delay before sending int max seconds RemoteConf Not supported by this firmware bool false =deactivate LostReboot Days without downlink before reboot int days, 0 =don't reboot","title":"LoRaWAN"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#gps-configuration-parameters","text":"The behaviour of the GPS Tracker and how it switches between its two operation modes ('Active' and 'Alive') can be adjusted to your needs. The table explains the configuration parameters used for this. Name Type Description default value ActiveCron string Cron expression defining how often the device will take a measurement and send its position over LoRaWAN while the Tracker is in Active Mode. This expression should trigger much more frequent than the one for Alive Mode. The standard is 0 0/15 * * * *, which will trigger every 15 minutes. See chapter \"Cron expressions\" for an introduction to cron expressions. 0 0/15 * * * * AliveCron string Cron expression defining how often the device will wake up when in Alive Mode. This should be less frequent than in Active Mode. The standard is 0 0 0/12 * * *, which translates to twice each day. See chapter \"Cron expressions\" for an introduction to cron expressions. 0 0 0/12 * * * gpsTO int Time in seconds to wait for GPS to get a fix before timing out. 180 seconds actTO int Time in minutes without movement after which the Tracker switches to Alive Mode. 65 minutes memsTh int Threshold for the internal motion detector to register movement. Values range from 2 to 255. A higher value makes the device less sensitive. 2 Environment (wind or steps) may trigger. 5 Standard, picking up the device will activate it. 20 Carefully picking it up will not trigger the device. 50 When carried, running will trigger, walking won't. 100+ Shaking will activate, dropping the device might not. 5 CayenneLPP bool Use alternative Cayenne LPP upload format. Standard: false, e.g. use Lobaro Format. See chapter \"myDevices Cayenne format\" for an introduction to this format. false maxHDOP int Maximum acceptable Horizontal Dilution Of Precision, between 1 and 50, smaller is better 2 maxDataAfterFix int If the HDOP target cannot be matched this value determines after how many datapackets with fix the position will be accepted 20","title":"GPS configuration parameters"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#cron-expressions","text":"Cron expressions are used to define specific points in time and regular repetitions of them. The schedule for data collecting phases is defined using the CRON format which is very powerful format to define repeatedly occurring events. Info Standard Lobaro devices typically do not need to know the real time for proper operation. All times are relative to the initial time when batteries are inserted. If needed by the target application Lobaro can deliver on request special hardware support for keeping data acquisition intervals based on a real time clock which stays in sync with the real time. Please contact Lobaro directly if you need such a custom product variant. A cron expression consists of 6 values separated by spaces: Seconds (0-59) Minutes (0-59) Hours (0-23) Days (1-31) Month (1-12) Day of Week (SUN-SAT b= [0,6]) Examples of CRON definitions: 0 5 **** hourly at minute 5, second 0 (at 00:05:00, 01:05:00, ...) 0 1/10 * * * * every 10 minutes from minute 1, second 0 (minutes 1, 11, 21, ...) 0 0 6 * * * daily at 6:00:00 0 0 13 1,15 * * 1 st and 15 th day of every month at 13:00:00 0 0 9 1-5 * * every month daily from day 1 till 5 at 9:00:00","title":"Cron expressions"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#lorawan-data-upload-formats","text":"After reading GPS coordinates (either successfully or unsuccessfully), the Tracker uploads the data using LoRaWAN. As LoRaWAN can only transmit very short messages, the message formats contain only data bytes, no keys or data types are included. The meaning of a byte is determined by its position within a message. The tracker supports two different upload formats as described in the following:","title":"LoRaWAN Data Upload Formats"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#lobaro-upload-format-since-firmware-version-5","text":"Only a single massage format is used by the GPS Tracker, it has a fixed length of 17 bytes. The table explains the message format used. This format uses the decimal degrees notation for the location, e.g. 53.4724\u00b0 north and 9.9334\u00b0 east. Positive (+) values indicate north longitudes and east latitudes, negative (-) values indicate south longitudes and west latitudes. Both location values are transmitted as signed integers in big endian format and get multiplied by 100.000. So after receiving the location data must be divided by this factor. Multi byte integers are transmitted as big endian. Values that would require decimal places are transmitted in smaller units, e.g. 1/100000 degree (as described before), to handle only with integers.","title":"Lobaro upload format (since Firmware Version 5)"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#fields-data-packet","text":"name bytes type description example / range temp 0-1 int16 Temperature inside the device in 1/10\u00b0C 246 = 24.6 \u00b0C v_bat 2-3 uint16 Current battery voltage in mV 3547 = 3.547 V latitude deg 4-7 int32 int32 degrees of the latitude x 100 000 -9 000 000 to 9 000 000 longitude deg 8-11 int32 degrees of the longitude x 100 000 -18 000 000 to 18 000 000 altitude 12-14 int24 Altitude of the device in centimeters -8 388 607 to 8 388 606 flags 15 uint8 Status flag, refer to table below 00bin = invalid, alive 01bin = valid, alive 10bin = invalid, active 11bin = valid, active sat 16 uint8 GPS satellites found / in view 7","title":"Fields, Data Packet"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#status-flag","text":"bit function not set set 1 Validity of last measurement invalid valid 2 Current operation mode alive active 3-8 reserved for future use If during some configurable period of time (see \"gpsTO\" parameter in table \"GPS configuration parameters\") no GPS location can be found the last known valid GPS location will be transmitted but with the valid flag set to false. We provide a JavaScript reference implementation of a decoder for the data packages, which can be used directly for decoding in The Things Network .","title":"Status flag"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#mydevices-cayenne-format","text":"As an alternative for the Lobaro data format the tracker can be configured to send Cayenne LPP compatible LoRaWAN uploads. myDevices Cayenne allows you to quickly visualize the via LoRaWAN transmitted data of the Lobaro GPS-tracker. You can use Cayenne as a tool to visualize real-time and historical data, sent over The Things Network and various other LoRaWAN providers. To use the alternative upload format configuration parameter \"CayenneLPP\" must be set to \"true\" as described in section \"GPS configuration parameters\" The advantages of using the cayenne format is a quick device evaluation without programming some custom backend and/or front software. Disadvantages are bigger LoRaWAN message sizes due to the additional schema meta information overhead the format needs. The Lobaro GPS Trackers maps its data to cayenne channels as follows: description cayenne channel cayenne type Internal Temperature 0 Temperature Battery Voltage 1 AnalogOutput GPS data 2 GPS satellites found 3 Digital Output","title":"myDevices Cayenne format"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#legacy-upload-format-up-to-firmware-version-4","text":"This format is not supported any more since firmware version V5.0.0! Please consider updating your device firmware using the Lobaro maintenance tool. Only a single massage format is used by the GPS Tracker, it has a fixed length of 15 bytes. This format uses the degrees with decimal minutes notation for the location. Multi byte integers are transmitted as big endian. Values that would require decimal places are transmitted in smaller units (e.g. mV instead of V). The table underneath explains the message format used. name type description example/range flags uint8 Status flags, for internal use 0 temp int16 Temperature inside the device in 1/10\u00b0C 246 \u2259 24.6 \u00b0C v_bat uint16 Current battery voltage in mV 3547 \u2259 3:547 V latitude deg int8 Whole degrees of the latitude -90 to 90","title":"Legacy upload format (up to Firmware Version 4)"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#example","text":"As an illustration, if the received data would consist of the 15 bytes (hexencoded): 00 01 18 0D 69 35 1C 0F 71 09 38 02 4B 01 06 type example description flag 00 for internal use, ignore temp 01 18 0118 hex = 0280dec \u2259 280 d\u00b0C = 28.0 \u00b0C v_bat 0D 69 0D89 hex = 3465dec \u2259 3465mV = 3.465V latitude 35 1C 0F 71 35hex = 53dec \u2259 53\u00b0 1C hex = 28dec \u2259 28' 0F71 hex = 3953dec \u2259 0.3953' 351C0F71 \u2259 53\u00b028.3952' = 53.473255\u00b0 = 53\u00b028'23.718'' North longitude 09 38 02 4B 09 hex = 09dec \u2259 09\u00b0 38 hex = 56dec \u2259 56' 024B hex = 0587dec \u2259 0.0587' 0938024B \u2259 9\u00b056.0587' = 9.934 312\u00b0 = 9\u00b056'3.522'' East valid 01 01hex \u2259 valid measurement, could receive GPS signal sat 06 06hex = 06dec \u2259 Signal of 6 satellites received for measurement","title":"Example"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#technical-characteristics","text":"Product Type name GPS-LoRaWAN Description LoRaWAN GPS Tracker RF transceiver Chipset Semtech SX1272 Frequency Range 863 to 870 MHz TX Power \u2264 14 dBm Typically RF range \u2264 2km Ideal RF range \u2264 10km (free line of sight) LoRa communication LoRaWAN Protocol LoRaWAN 1.0.1, Class A, EU868 Activation method Over-the-air activation (OTAA) Activation by personalization (ABP) Encryption AES128 Power Power supply 2xAA sized battery, 1.5 V, LR6/FR6 Supply voltage UNom = 3.0V, UMin = 2.2V, UMax = 3.7V Capacity \u223c 30000 LoRaWAN messages @SF11 Current consumption @3V Normal \u22643 mA Wireless M-BUS RX \u226414 mA LoRa RX \u226414 mA LoRa TX \u226480 mA Sleep with GPS standby and MEMS running \u226420 \u00b5A Mechanical dimensions Size 114.3 mm x 59.3 mm x 26.8 mm Housing Material ABS plastic Environmental Requirements Operating temperature range -20\u00b0C to +55\u00b0C Max. Installation height 2m Conformity","title":"Technical characteristics"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#parser","text":"","title":"Parser"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#the-things-network","text":"For Version 4.x, 5.x and 6.x function signed ( val , bits ) { if (( val & 1 << ( bits - 1 )) > 0 ) { // value is negative (16bit 2's complement) var mask = Math . pow ( 2 , bits ) - 1 ; val = ( ~ val & mask ) + 1 ; // invert all bits & add 1 => now positive value val = val * - 1 ; } return val ; } function int16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 8 | bytes [ 1 ] << 0 , 16 ); } function int24_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 16 | bytes [ 1 ] << 8 | bytes [ 2 ] << 0 , 24 ); } function int32_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 24 | bytes [ 1 ] << 16 | bytes [ 2 ] << 8 | bytes [ 3 ] << 0 , 32 ); } function DecoderPort2 ( bytes ) { // Format for firmware 5.0.x // Decode an uplink message from a buffer // (array) of bytes to an object of fields. var Temp = int16_BE ( bytes , 0 ) / 10 ; var VBat = int16_BE ( bytes , 2 ) / 1000 ; var Lat = int32_BE ( bytes , 4 ) / 100000 ; var Lon = int32_BE ( bytes , 8 ) / 100000 ; var Alt = int24_BE ( bytes , 12 ) / 100 ; var Valid = bytes [ 15 ] & 0x01 ; var Active = bytes [ 15 ] & 0x02 ; var SatCnt = bytes [ 16 ]; return { Temp : Temp || 0 , VBat : VBat || 0 , Lat : Lat || 0 , Lon : Lon || 0 , Alt : Alt || 0 , Valid : Valid , Active : Active , SatCnt : SatCnt }; } function DecoderPort1 ( bytes ) { // legacy format, firmware 4.x // Decode an uplink message from a buffer // (array) of bytes to an object of fields. var button_number = bytes [ 0 ]; var Temp10tel = ( bytes [ 1 ] << 8 ) | ( bytes [ 2 ] << 0 ); var VBat1000tel = ( bytes [ 3 ] << 8 ) | ( bytes [ 4 ] << 0 ); var lat_deg = bytes [ 5 ]; var lat_min = bytes [ 6 ]; var lat_10000min = ( bytes [ 7 ] << 8 ) | ( bytes [ 8 ] << 0 ); var long_deg = bytes [ 9 ]; var long_min = bytes [ 10 ]; var long_10000min = ( bytes [ 11 ] << 8 ) | ( bytes [ 12 ] << 0 ); var gpsValid = ( bytes [ 13 ] !== 0 ); // Missing byte = true return { button_number : button_number || 0 , Temp10tel : Temp10tel || 0 , VBat1000tel : VBat1000tel || 0 , lat_deg : lat_deg || 0 , lat_min : lat_min || 0 , lat_10000min : lat_10000min || 0 , long_deg : long_deg || 0 , long_min : long_min || 0 , long_10000min : long_10000min || 0 , gps_valid : gpsValid || false }; } function Decoder ( bytes , port ) { switch ( port ) { case 1 : return DecoderPort1 ( bytes ); case 2 : return DecoderPort2 ( bytes ); default : return { \"error\" : \"Unsupported port\" , \"port\" : port }; } } // Wrapper for Lobaro Platform function Parse ( input ) { // Decode an incoming message to an object of fields. var b = bytes ( atob ( input . data )); var decoded = Decoder ( b , input . fPort ); return decoded ; } // Wrapper for Loraserver / ChirpStack function Decode ( fPort , bytes ) { return Decoder ( bytes , fPort ); } // Wrapper for Digimondo niota.io (uncomment only when used in niota) /* module.exports = function (payload, meta) { const port = meta.lora.fport; const buf = Buffer.from(payload, 'hex'); return Decoder(buf, port); }*/","title":"The Things Network"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/index.html#pdf-documentation","text":"Product Dimensions (pdf) User Manual (en) CE Declaration of Conformity","title":"PDF Documentation"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html","text":"LoRaWAN GPS Tracker Firmware Downloads Hardware Revision 2.x Downloads : app-lorawan-gps-button-6.1.0.hex (hardware v2.x) [current release] app-lorawan-gps-button-6.0.3.hex (hardware v2.x) Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Hardware Revision 1.x Downloads : app-lorawan-gps-button-5.0.5.hex (hardware v1.x) app-lorawan-gps-button-4.0.9.hex (hardware v1.x) Info The LoRaWAN GPS data uplink data encoding has been changed between firmware 4.x (\"legacy format\") and 5.x. See the manual for details. Warning This hardware revision is no longer available for sale! Consider using the improved HW Rev 2.x. Changelog v6.1.0 - 09.12.2019 added new parameters to increase accuracy: maxHDOP & maxDataAfterFix v6.0.3 - 02.08.2019 fixed temperature sensor readout v6.0.2 - 22.07.2019 inverted powerpin for telit module (hardware v2.1) added nmea prefix GN ( Glonass+GPS ) to the parser v5.0.5 - 09.01.2019 Update LoRaWAN Stack Enable stepUp if needed by battery condition v5.0.4 - 15.11.2018 update board driver v5.0.3 - 15.11.2018 fix signed issue with longitude v5.0.0 - 26.10.2018 Add option for Cayenne LLP Payload format Adjust payload format to support neagtive values Add Altitude Send GPS coordinates in Lat/Lon Format Update LoRaWAN Stack v4.0.9 - 05.10.2018 Update LoRaWAN Stack v4.0.7 - 15.08.2018 Fixed bugs with some LoRaWAN Network providers v4.0.6 - 28.05.2018 Clear pending mems IRQ before sleep Updated internal state handling v4.0.4 - 20.03.2018 Disable mems in active mode v4.0.3 - 20.03.2018 compile against new board revision (lower power in sleep) disable external rtc default tx power to 14dBm v4.0.2 - 23.02.2018 Fix lost GPS messages due to broken CRC checks v4.0.1 - 29.01.2018 Port to LoRa v3.2 Board v3.2 Measure vBat when 3.3V Step Up is off Add config parameter gps timeout Add config parameter LoRaWAN ADR v3.1 Enable buttons for sending (Reed contact connectors)","title":"LoRaWAN GPS Tracker"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#lorawan-gps-tracker","text":"","title":"LoRaWAN GPS Tracker"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#firmware-downloads","text":"","title":"Firmware Downloads"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#hardware-revision-2x","text":"Downloads : app-lorawan-gps-button-6.1.0.hex (hardware v2.x) [current release] app-lorawan-gps-button-6.0.3.hex (hardware v2.x) Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Hardware Revision 2.x"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#hardware-revision-1x","text":"Downloads : app-lorawan-gps-button-5.0.5.hex (hardware v1.x) app-lorawan-gps-button-4.0.9.hex (hardware v1.x) Info The LoRaWAN GPS data uplink data encoding has been changed between firmware 4.x (\"legacy format\") and 5.x. See the manual for details. Warning This hardware revision is no longer available for sale! Consider using the improved HW Rev 2.x.","title":"Hardware Revision 1.x"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v610-09122019","text":"added new parameters to increase accuracy: maxHDOP & maxDataAfterFix","title":"v6.1.0 - 09.12.2019"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v603-02082019","text":"fixed temperature sensor readout","title":"v6.0.3 - 02.08.2019"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v602-22072019","text":"inverted powerpin for telit module (hardware v2.1) added nmea prefix GN ( Glonass+GPS ) to the parser","title":"v6.0.2 - 22.07.2019"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v505-09012019","text":"Update LoRaWAN Stack Enable stepUp if needed by battery condition","title":"v5.0.5 - 09.01.2019"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v504-15112018","text":"update board driver","title":"v5.0.4 - 15.11.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v503-15112018","text":"fix signed issue with longitude","title":"v5.0.3 - 15.11.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v500-26102018","text":"Add option for Cayenne LLP Payload format Adjust payload format to support neagtive values Add Altitude Send GPS coordinates in Lat/Lon Format Update LoRaWAN Stack","title":"v5.0.0 - 26.10.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v409-05102018","text":"Update LoRaWAN Stack","title":"v4.0.9 - 05.10.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v407-15082018","text":"Fixed bugs with some LoRaWAN Network providers","title":"v4.0.7 - 15.08.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v406-28052018","text":"Clear pending mems IRQ before sleep Updated internal state handling","title":"v4.0.6 - 28.05.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v404-20032018","text":"Disable mems in active mode","title":"v4.0.4 - 20.03.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v403-20032018","text":"compile against new board revision (lower power in sleep) disable external rtc default tx power to 14dBm","title":"v4.0.3 - 20.03.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v402-23022018","text":"Fix lost GPS messages due to broken CRC checks","title":"v4.0.2 - 23.02.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v401-29012018","text":"Port to LoRa v3.2 Board","title":"v4.0.1 - 29.01.2018"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v32","text":"Measure vBat when 3.3V Step Up is off Add config parameter gps timeout Add config parameter LoRaWAN ADR","title":"v3.2"},{"location":"lorawan-sensors/gps-lorawan/6.0.0/firmware.html#v31","text":"Enable buttons for sending (Reed contact connectors)","title":"v3.1"},{"location":"lorawan-sensors/humidity-temp-lorawan/index.html","text":"Humidity & Temperature LoRaWAN Sensor The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/humidity-temp-lorawan/index.html#humidity-temperature-lorawan-sensor","text":"","title":"Humidity &amp; Temperature LoRaWAN Sensor"},{"location":"lorawan-sensors/humidity-temp-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/humidity-temp-lorawan/firmware.html","text":"Humidity & Temperature LoRaWAN Sensor Firmware Downloads: app-lorawan-humidity-0.0.3.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changelog 0.0.3 Initial public release","title":"Firmware & Changelog"},{"location":"lorawan-sensors/humidity-temp-lorawan/firmware.html#humidity-temperature-lorawan-sensor","text":"","title":"Humidity &amp; Temperature LoRaWAN Sensor"},{"location":"lorawan-sensors/humidity-temp-lorawan/firmware.html#firmware","text":"Downloads: app-lorawan-humidity-0.0.3.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Firmware"},{"location":"lorawan-sensors/humidity-temp-lorawan/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/humidity-temp-lorawan/firmware.html#003","text":"Initial public release","title":"0.0.3"},{"location":"lorawan-sensors/lorawan-modbus-gateway/index.html","text":"LoRaWAN Modbus Gateway The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/lorawan-modbus-gateway/index.html#lorawan-modbus-gateway","text":"","title":"LoRaWAN Modbus Gateway"},{"location":"lorawan-sensors/lorawan-modbus-gateway/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/modbus-lorawan/index.html","text":"Modbus (ASCII / RTU) over LoRaWAN Bridge The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/modbus-lorawan/index.html#modbus-ascii-rtu-over-lorawan-bridge","text":"","title":"Modbus (ASCII / RTU) over LoRaWAN Bridge"},{"location":"lorawan-sensors/modbus-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/modbus-lorawan/firmware.html","text":"Modbus LoRaWAN Bridge Firmware Make sure to use the latest version of the Lobaro Maintenance Tool! Use at least version 1.4.9 of the Lobaro Maintenance Tool for installing this firmware. Downloads: app-modbus-lora-bridge-1.2.2.hex . [current release] app-modbus-lora-bridge-1.2.1.hex . app-modbus-lora-bridge-1.1.1.hex . app-modbus-lora-bridge-1.0.3.hex . app-modbus-lora-bridge-1.0.2.hex . app-modbus-lora-bridge-1.0.1.hex . app-modbus-lora-bridge-0.3.1.hex . [latest release with old stack version] Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changelog 1.2.2 - 2020-06-18 - [current release] Changed Using Lobawan 1.2.2 (fixes some issues with OTAA Joins) 1.2.1 - 2020-02-17 Added Display Version of Lobaro LoRaWAN Stack on boot. Fixed Fix a crash when using remote command append . 1.2.0 Added New config parameter MbAttempts to control how often Modbus Commands will be repeated in case of timeouts. 1.1.1 Changed Increased size available for config. 1.1.0 Added New optional Listen-Before-Talk Modbus communication, so device can coordinate with another master on bus. Fixed Fix issue that could cut of long Modbus responses. 1.0.3 Changed Dialog Mode now logs activity on RS485 Bus while not communicating (to detect other Modbus Masters). Log Frequencies for LoRaWAN. 1.0.2 Added Waitcycles for optional capacitors to load and stabilize on startup 1.0.1 Changed Using FRAM for storing results before uploading, allowing for multiple kB of data to be sent (size depending on hardware). Fixed Removed memory corruption error that could be triggered by configurations with lots of Modbus commands. 1.0.0 Added LoRaWAN 1.1 support Remote configuration via LoRaWAN on port 128. Clock synchronisation via LoRaWAN. Changed Random delay before Uplink (to prevent persistent collisions when using multiple devices). Modbus responses longer than payload now get split up (additional parts on port 5). 0.4.1 Fixed Changed error indication bit on error 11 from 0xf0 to 0x80 . Fixed issue when parsing multiple Modbus commands from config. 0.4.0 Added Writing values to holding registers and coils. Execution of arbitrary Modbus commands triggered by LoRaWAN Downlink messages. Support for LoRaWAN Operation Mode Class C (for short reaction time to Downlinks). Automated register writing and broadcasts possible through new configuration. Changed Automated reading (triggered by cron) is now configured by entering actual Modbus commands (more flexibility and usage of already existing Modbus syntax \u2013 this breaks old configurations ). Upload format changed to sending raw response to Modbus commands ( this breaks existing integrations ). Fixed Flushing to avoid invalid byte received from switching from TX to RX. Modbus mode ASCII now counts received bytes correctly. DataLength of 7 bits can now correctly be set in config again. 0.3.1 \u2013 2019-05-24 Fixed Increased robustness of data reception on higher Baud rates. 0.3.0 \u2013 2019-05-15 Added Initial release of Firmware for new Hardware revision (with RS485-addon). Update Modbus to support all 4 types of registers. Changed Parity bit must not be substracted from Data bits anymore. 8E1 can now be confiured with 8 Data bits, EVEN parity, 1 Stop bit . 0.1.0 \u2013 2018-08-13 Added Original hardware release (with RS-485 on holding PCB).","title":"Firmware & Changelog"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#modbus-lorawan-bridge","text":"","title":"Modbus LoRaWAN Bridge"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#firmware","text":"Make sure to use the latest version of the Lobaro Maintenance Tool! Use at least version 1.4.9 of the Lobaro Maintenance Tool for installing this firmware. Downloads: app-modbus-lora-bridge-1.2.2.hex . [current release] app-modbus-lora-bridge-1.2.1.hex . app-modbus-lora-bridge-1.1.1.hex . app-modbus-lora-bridge-1.0.3.hex . app-modbus-lora-bridge-1.0.2.hex . app-modbus-lora-bridge-1.0.1.hex . app-modbus-lora-bridge-0.3.1.hex . [latest release with old stack version] Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Firmware"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#122-2020-06-18-current-release","text":"","title":"1.2.2 - 2020-06-18 - [current release]"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#changed","text":"Using Lobawan 1.2.2 (fixes some issues with OTAA Joins)","title":"Changed"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#121-2020-02-17","text":"Added Display Version of Lobaro LoRaWAN Stack on boot. Fixed Fix a crash when using remote command append .","title":"1.2.1 - 2020-02-17"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#120","text":"Added New config parameter MbAttempts to control how often Modbus Commands will be repeated in case of timeouts.","title":"1.2.0"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#111","text":"Changed Increased size available for config.","title":"1.1.1"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#110","text":"Added New optional Listen-Before-Talk Modbus communication, so device can coordinate with another master on bus. Fixed Fix issue that could cut of long Modbus responses.","title":"1.1.0"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#103","text":"Changed Dialog Mode now logs activity on RS485 Bus while not communicating (to detect other Modbus Masters). Log Frequencies for LoRaWAN.","title":"1.0.3"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#102","text":"Added Waitcycles for optional capacitors to load and stabilize on startup","title":"1.0.2"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#101","text":"Changed Using FRAM for storing results before uploading, allowing for multiple kB of data to be sent (size depending on hardware). Fixed Removed memory corruption error that could be triggered by configurations with lots of Modbus commands.","title":"1.0.1"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#100","text":"Added LoRaWAN 1.1 support Remote configuration via LoRaWAN on port 128. Clock synchronisation via LoRaWAN. Changed Random delay before Uplink (to prevent persistent collisions when using multiple devices). Modbus responses longer than payload now get split up (additional parts on port 5).","title":"1.0.0"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#041","text":"Fixed Changed error indication bit on error 11 from 0xf0 to 0x80 . Fixed issue when parsing multiple Modbus commands from config.","title":"0.4.1"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#040","text":"Added Writing values to holding registers and coils. Execution of arbitrary Modbus commands triggered by LoRaWAN Downlink messages. Support for LoRaWAN Operation Mode Class C (for short reaction time to Downlinks). Automated register writing and broadcasts possible through new configuration. Changed Automated reading (triggered by cron) is now configured by entering actual Modbus commands (more flexibility and usage of already existing Modbus syntax \u2013 this breaks old configurations ). Upload format changed to sending raw response to Modbus commands ( this breaks existing integrations ). Fixed Flushing to avoid invalid byte received from switching from TX to RX. Modbus mode ASCII now counts received bytes correctly. DataLength of 7 bits can now correctly be set in config again.","title":"0.4.0"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#031-2019-05-24","text":"Fixed Increased robustness of data reception on higher Baud rates.","title":"0.3.1 &ndash; 2019-05-24"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#030-2019-05-15","text":"Added Initial release of Firmware for new Hardware revision (with RS485-addon). Update Modbus to support all 4 types of registers. Changed Parity bit must not be substracted from Data bits anymore. 8E1 can now be confiured with 8 Data bits, EVEN parity, 1 Stop bit .","title":"0.3.0 &ndash; 2019-05-15"},{"location":"lorawan-sensors/modbus-lorawan/firmware.html#010-2018-08-13","text":"Added Original hardware release (with RS-485 on holding PCB).","title":"0.1.0 &ndash; 2018-08-13"},{"location":"lorawan-sensors/modbus-lorawan/redirect-example.html","text":"latest version","title":"Redirect example"},{"location":"lorawan-sensors/modbus-lorawan/versions.html","text":"Versions of the Modbus LoRaWAN Bridge Our devices are developed further and improved continuously. This sometimes breaks backwards compatibility or leads to huge changes in the documentation. On order to provide documentation for existing older devices we provide the manuals for older versions. If you are looking for the manual for an older revision, choose the manual with the highest version number lower than the version number of your installed firmware. You can find out what firmware is installed on your hardware with our configuration adapter and configuration tool. The firmware version is printed in the log on device startup. For an overview over the changes between manual releases, please refer to the changelog . [1.x.x] (since 2019-09-16 \u2013 current version) [0.4.x] (since 2019-07-29) [0.3.x] (since 2019-05-15 \u2013 leagcy payload format) [0.1.x] (since 2018-08-13 \u2013 pdf)","title":"Versions"},{"location":"lorawan-sensors/modbus-lorawan/versions.html#versions-of-the-modbus-lorawan-bridge","text":"Our devices are developed further and improved continuously. This sometimes breaks backwards compatibility or leads to huge changes in the documentation. On order to provide documentation for existing older devices we provide the manuals for older versions. If you are looking for the manual for an older revision, choose the manual with the highest version number lower than the version number of your installed firmware. You can find out what firmware is installed on your hardware with our configuration adapter and configuration tool. The firmware version is printed in the log on device startup. For an overview over the changes between manual releases, please refer to the changelog . [1.x.x] (since 2019-09-16 \u2013 current version) [0.4.x] (since 2019-07-29) [0.3.x] (since 2019-05-15 \u2013 leagcy payload format) [0.1.x] (since 2018-08-13 \u2013 pdf)","title":"Versions of the Modbus LoRaWAN Bridge"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html","text":"Modbus (ASCII / RTU) over LoRaWAN Bridge Version v0.3.0 This manual is for an older version of the Modbus Bridge! latest version \u2013 version overview Consider using the latest firmware on your hardware This version uses a different upload format than our newer versions. See available firmware downloads Target Measurement / Purpose The Lobaro Modbus LoRaWAN Bridge is a low power device that can be used to read values out of a variety of other devices via Modbus (ASCII/RTU) over a RS-485 interface and forward them over LoRaWAN, so that they can be accessed from an attached system. Typical applications include reading out electric and water meters or retrieving data from environmental sensors like temperature and humidity. The Modbus Bridge supports reading of all four object types that can be provided by Modbus slave devices: Coil, Discrete Input, Input Register, and Holding Register. Multiple different slave devices on the Bus can be accessed individually by a single Bridge device. Reading intervals and register definitions can be configured very flexibly to suit individual requirements. PDF Download Data Sheet with dimensions Work Cycle The Modbus LoRaWAN Bridge has a simple work cycle. It spends most of the time in a deep sleep state, to conserve energy. For every reading it wakes up for a few seconds, requests values from the connected slave devices, uploads the data via LoRaWAN, and then goes to sleep again. The following flowchart illustrates the work cycle: graph LR; init(Init)-->check(Test Reading); check-->join(LoRaWAN Join); join-->read(Data Collection); read-->send(Data Transfer); send-->sleep(\"Sleep\"); sleep-->|Cron expression| read; Init When the device starts (because it has just been connected to a power source, or after a reboot) it begins in the Init state. A quick self-check is executed; if that succeeds, the green on-board LED blinks once, slowly. After that the configuration is evaluated and checked for invalid values. If any problems are detected during Init , the device's LED will light up for three times, and the device will then reboot. If everything is okay, the device will continue with the Test Reading . Test Reading Configuration The configuration is done using Lobaro Maintenance Tool and the Lobaro USB PC adapter. loRaWAN Parameters The connection to the LoRaWAN network is defined by multiple configuration parameters. This need to be set according to your LoRaWAN network and the way your device is supposed to be attached to it, or the device will not be able to send any data. There are two different methods to attach a device to a LoRaWAN network: Over-the-air-activation (OTAA) and Activation-by-personalisation (ABP). Depending on which method you are using you will have to set different values. Several values are a number of bytes, that need to be entered as hexstrings (without 0x -prefix). So e.g. the DevEUI is a value of 8 bytes encoded in hex will be 16 hexdigits long. A sample value would be 0123456789abcdef . name used type description OTAA both bool true \u2261 use OTAA, false \u2261 use ABP DevEUI OTAA hexbyte[8] the 8 byte DevEUI identifies the hardware on the join operation. The default value is a world wide unique value predefined in the hardware. Should not be changed unless required by the network provider. AppEUI OTAA hexbyte[8] ID defining the application used in the LoRaWAN network. AppKey OTAA hexbyte[16] Key used to encrypt communication with the LoRaWAN network. AppSKey ABP hexbyte[16] Application Session Key to be synced with the LoRaWAN network. NetSKey ABP hexbyte[16] Network Session Key to be synced with the LoRaWAN network. DevAdr ABP hexbyte[4] Device Address used to identify device in the LoRaWAN network. SF both int Initial LoRa spreading factor used for transmissions. Valid range is 7-12. The actual spreading factor used by change during operation if ADR is used. ADR both bool Should adaptive data rate be used? true \u2261 use ADR, false \u2261 don't Modbus/UART There are several values that define the configuration via Modbus. These values depend on the Slave devices that you want to read out. Please refer to your Modbus Devices's manual to find out the correct configuration. name description values ModbusProtocol Which Modbus-Protocol to use RTU . ASCII ModbusBaud UART Baud rate 9600 , 19200 , 38400 , ... ModbusDataLendth UART data length 7 , 8 , 9 ModbusStopBits UART stop bits 0.5 , 1 , 1.5 , 2 (written exactly like this) ModbusParity UART parity NONE , EVEN , ODD Operation Configuration values defining the behaviour of the device. name description example value ModbusCron Cron expression defining when to read 0 0/15 * * * * for every 15 minutes See also our Introduction to Cron expressions . Register/Coil definition Modbus defines four different object types form which values can be read: Coils, Discrete Inputs, Input Registers, and Holding Registers. For an introduction please refer to https://en.wikipedia.org/wiki/Modbus . There are four configuration values to define which values should be read by the Modbus Bridge, one for each of the types. name description Modbus Function Coils Coils to read (single bit read-only values) 0x01 DiscreteInputs Discrete Inputs to read (single bit read/write values) 0x02 HoldingRegisters Holding Registers to read (2 byte read-only values) 0x03 InputRegisters Input Register to read (2 byte read/write values) 0x04 Each value can define multiple different registers/coils to be read on one or multiple devices connected via Modbus. The format is identical for all four types. Each single definition consists of three values separated by colons ( : ). The address of the Modbus device that should be read from. Valid device addresses range from 1 to 247; with a single slave device on your bus this is often 1. The address of the first register/coil to be read on the device. Register addresses are uint16 values and range from 0 to 65535. The number of consecutive registers/coils to be read. This value is limited to 127, because longer answers cannot be encoded. Be aware that for registers a value higher than 22 leads to problems on high spreading factors so that the data will not be transferred completely via LoRaWAN. Multiple of these register definitions can be used if they are separated by commas ( , no spaces after the comma). You can use one or multiple of the register/coil types. If you do not want to use a type e.g. Coils , set that definition to an empty string. The device will parse the four register strings on startup and reports invalid definitions. The device will not work while there are invalid definitions but will reboot repeatedly until you fix the configuration. Example register definition strings definition explanation 1:0:3 Read first three registers of device with address 1. 2:40001:1,2:2000:10 Read registers 40001 and 2000 to 2009 of device 2. 4:0:2,5:0:2,5:20:1 Read registers 0 and 1 of device 4 as well as registers 0, 1, and register 20 of device 5. Payload formats The Modbus Bridge sends different kinds of messages over different LoRaWAN ports: Port Message 1 Status messages. 11 Data from reading Coils (function 0x01 ). 12 Data from reading Discrete Inputs (function 0x02 ). 13 Data from reading Holding Registers (function 0x03 ). 14 Data from reading Input Registers (function 0x04 ). Status messages The Modbus Bridge sends a status messages report on the health of the device itself. This messages are sent along when the device is sending data packages with a maximum of one status message per day. Status messages are transmitted on port 1 and have a fixed length of 14 bytes. name pos len type description example version 0 3 uint8[3] Version of firmware running on the device [1, 0, 4] \u2261 v1.0.4 flag 3 1 uint8 Status flag, for internal use 0 temperature 4 2 int16 Device's internal temperature in tenth \u00b0C 246 \u2261 24.6\u00b0C voltage 6 2 int16 Voltage supplied by power source in mV 3547 \u2261 3.547V timestamp 8 5 int40 Internal date/time at creation of the status packet as UNIX timestamp 1533055905 mode 13 1 uint8 Operation mode the device runs 1 Data messages The principle message format is equal for all four types of registers/coils. The port used defines what kind of register/coil was read (see table \"Payload formats\" above). The format slightly differs for coils versus registers, since the amount of data per coil (1 bit) is different than the amount per register (16 bits). Each data message is starts with a 40 bit timestamp followed by one or more data packs. Each pack represents a single read operation caused by a single register definition in your configuration. The pack starts with 4 bytes repeating the information of the register definition extended by a single bit reporting errors on reading letting you know what data you are presented with and if it was read successfully). That information is followed by the raw data bytes as they where given by the slave device (as the Bridge cannot know how the data is presented in those bytes). The length of the data is dependent on the register definition and on the type (registers versus coils). The length is not explicitly stated, as it can be determined from the definition. The data bytes are also included when an error has occurred, however in this case the content of those bytes is undefined. Structure of a data pack name pos len type description addr 0 1 uint8 Modbus address of slave device. start 1 2 uint16 Address of first coil/register read. cnt+err 3 1 uint8 Highest bit: error indicator, 7 lower bits: number of consecutive coils/registers read. data 4 n uint8[n] Raw data bytes as sent by the slave device. To get cnt , the number of coils/registers read, you need to only read the lower 7 bits of the fourth byte (e.g. by using something like data[3] & 0x7f ). The highest bit is 0 on successful reads and 1 if an error occurred. See our reference decoder if you have trouble reading the format. The length of the data n for Coils and Discrete Inputs (Ports 11 and 12) the value of cnt divided by 8 rounded up (that is the minimal number of bytes needed to store cnt bits). For Registers (Ports 13 and 14) the data length is cnt * 2 , since registers contain two bytes of data. Please refer to the reference decoder usable in TTN at the end of this document. Complex setups The Modbus Bridge as described in this manual can be individually configured to read out any registers and coils. For some setups, this is not enough. There can be situations in which you want to read registers at different intervals, e.g. you might need some values with hourly updates and others only every other day. For measuring values with high variance it can be necessary to take multiple reads over a period of time and create an average value. Maybe you need to read a status register first and depending on its value you want to decide which registers to read and transmit the values of. You could also want to write values into registers with the Bridge. All this scenarios are possible to solve using the Modbus Bridge, but their complexity leave the scope of our standard firmware. If you need any special processing for your Modbus setup, please contact us with your requirements, and we will make you an offer for an individual firmware that processes data the way you need. If you find that the data rate LoRaWAN offers is a limitation for your setup, we could also provide you with a Modbus solution that uses alternate data transmission technologies, for example NarrowBand-IoT. Appendices Technical characteristics Product Type name Modbus485-LoRaWAN Description Modbus over LoRaWAN Bridge RF tranceiver Type Semtech SX1272 Frequency 863 MHz to 870 MHz Max. TX Power max. +14 dBm Typical RF Range \u22642km Ideal RF Range \u226410km (free line of sight) LoRa communication Protocol Class A LoRaWAN 1.0.1 EU868 Activation method Over-the-air-activation (OTAA) Activation by personalization (ABP) Encryption AES128 Modbus communication Bus RS-485 twisted pair wires (with optional GND) Protocol RTU/ASCII Environmental Requirements Operating temperature -20\u00b0C \u2013 55\u00b0C Max installation height 2m Standards CE Declaration of Conformity CE Declaration of Conformity (pdf). Disposal / WEEE / Entsorgung Information about the disposal of the Device . Reference decoder This is a decoder written in JavaScript that can be used to parse the device's LoRaWAN messages. It can be used as is in The Things Network . function readVersion ( bytes ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ 0 ] + \".\" + bytes [ 1 ] + \".\" + bytes [ 2 ]; } function int40_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 32 | bytes [ 1 ] << 24 | bytes [ 2 ] << 16 | bytes [ 3 ] << 8 | bytes [ 4 ] << 0 ; } function int16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 8 | bytes [ 1 ] << 0 ; } function decode_status ( bytes ) { return { \"port\" : 1 , \"version\" : readVersion ( bytes ), \"flags\" : bytes [ 3 ], \"temp\" : int16_BE ( bytes , 4 ) / 10 , \"vBat\" : int16_BE ( bytes , 6 ) / 1000 , \"timestamp\" : int40_BE ( bytes , 8 ), \"operationMode\" : bytes [ 13 ] }; } function decode_data ( bytes , port ) { var fun = port - 10 ; var regs = []; if ( bytes . length > 5 ) { var b = bytes . slice ( 5 ); while ( b . length >= 4 ) { var r = { \"device\" : b [ 0 ], \"start\" : int16_BE ( b , 1 ), \"count\" : b [ 3 ] & 0x7f , \"error\" :!! ( b [ 3 ] >> 7 ), \"data\" : null }; var dataLen = 0 ; if ( fun <= 2 ) { // coils, one bit per address dataLen = Math . ceil ( r . count / 8.0 ); } else { // registers, 16 bits per address dataLen = r . count * 2 ; } if ( b . length >= dataLen + 4 ) { r . data = b . slice ( 4 , 4 + dataLen ); } regs . push ( r ); b = b . slice ( 4 + dataLen ); } } return decoded = { \"port\" : port , \"function\" : fun , \"timestamp\" : int40_BE ( bytes , 0 ), \"values\" : regs }; } function Decoder ( bytes , port ) { switch ( port ) { case 1 : return decode_status ( bytes ); case 11 : case 12 : case 13 : case 14 : return decode_data ( bytes , port ); } return { \"error\" : \"invalid port\" , \"port\" : port }; } Copyright Modbus Logo","title":"Modbus (ASCII / RTU) over LoRaWAN Bridge"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#modbus-ascii-rtu-over-lorawan-bridge","text":"Version v0.3.0 This manual is for an older version of the Modbus Bridge! latest version \u2013 version overview Consider using the latest firmware on your hardware This version uses a different upload format than our newer versions. See available firmware downloads","title":"Modbus (ASCII / RTU) over LoRaWAN Bridge"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#target-measurement-purpose","text":"The Lobaro Modbus LoRaWAN Bridge is a low power device that can be used to read values out of a variety of other devices via Modbus (ASCII/RTU) over a RS-485 interface and forward them over LoRaWAN, so that they can be accessed from an attached system. Typical applications include reading out electric and water meters or retrieving data from environmental sensors like temperature and humidity. The Modbus Bridge supports reading of all four object types that can be provided by Modbus slave devices: Coil, Discrete Input, Input Register, and Holding Register. Multiple different slave devices on the Bus can be accessed individually by a single Bridge device. Reading intervals and register definitions can be configured very flexibly to suit individual requirements. PDF Download Data Sheet with dimensions","title":"Target Measurement / Purpose"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#work-cycle","text":"The Modbus LoRaWAN Bridge has a simple work cycle. It spends most of the time in a deep sleep state, to conserve energy. For every reading it wakes up for a few seconds, requests values from the connected slave devices, uploads the data via LoRaWAN, and then goes to sleep again. The following flowchart illustrates the work cycle: graph LR; init(Init)-->check(Test Reading); check-->join(LoRaWAN Join); join-->read(Data Collection); read-->send(Data Transfer); send-->sleep(\"Sleep\"); sleep-->|Cron expression| read; Init When the device starts (because it has just been connected to a power source, or after a reboot) it begins in the Init state. A quick self-check is executed; if that succeeds, the green on-board LED blinks once, slowly. After that the configuration is evaluated and checked for invalid values. If any problems are detected during Init , the device's LED will light up for three times, and the device will then reboot. If everything is okay, the device will continue with the Test Reading . Test Reading","title":"Work Cycle"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#configuration","text":"The configuration is done using Lobaro Maintenance Tool and the Lobaro USB PC adapter.","title":"Configuration"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#lorawan-parameters","text":"The connection to the LoRaWAN network is defined by multiple configuration parameters. This need to be set according to your LoRaWAN network and the way your device is supposed to be attached to it, or the device will not be able to send any data. There are two different methods to attach a device to a LoRaWAN network: Over-the-air-activation (OTAA) and Activation-by-personalisation (ABP). Depending on which method you are using you will have to set different values. Several values are a number of bytes, that need to be entered as hexstrings (without 0x -prefix). So e.g. the DevEUI is a value of 8 bytes encoded in hex will be 16 hexdigits long. A sample value would be 0123456789abcdef . name used type description OTAA both bool true \u2261 use OTAA, false \u2261 use ABP DevEUI OTAA hexbyte[8] the 8 byte DevEUI identifies the hardware on the join operation. The default value is a world wide unique value predefined in the hardware. Should not be changed unless required by the network provider. AppEUI OTAA hexbyte[8] ID defining the application used in the LoRaWAN network. AppKey OTAA hexbyte[16] Key used to encrypt communication with the LoRaWAN network. AppSKey ABP hexbyte[16] Application Session Key to be synced with the LoRaWAN network. NetSKey ABP hexbyte[16] Network Session Key to be synced with the LoRaWAN network. DevAdr ABP hexbyte[4] Device Address used to identify device in the LoRaWAN network. SF both int Initial LoRa spreading factor used for transmissions. Valid range is 7-12. The actual spreading factor used by change during operation if ADR is used. ADR both bool Should adaptive data rate be used? true \u2261 use ADR, false \u2261 don't","title":"loRaWAN Parameters"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#modbusuart","text":"There are several values that define the configuration via Modbus. These values depend on the Slave devices that you want to read out. Please refer to your Modbus Devices's manual to find out the correct configuration. name description values ModbusProtocol Which Modbus-Protocol to use RTU . ASCII ModbusBaud UART Baud rate 9600 , 19200 , 38400 , ... ModbusDataLendth UART data length 7 , 8 , 9 ModbusStopBits UART stop bits 0.5 , 1 , 1.5 , 2 (written exactly like this) ModbusParity UART parity NONE , EVEN , ODD","title":"Modbus/UART"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#operation","text":"Configuration values defining the behaviour of the device. name description example value ModbusCron Cron expression defining when to read 0 0/15 * * * * for every 15 minutes See also our Introduction to Cron expressions .","title":"Operation"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#registercoil-definition","text":"Modbus defines four different object types form which values can be read: Coils, Discrete Inputs, Input Registers, and Holding Registers. For an introduction please refer to https://en.wikipedia.org/wiki/Modbus . There are four configuration values to define which values should be read by the Modbus Bridge, one for each of the types. name description Modbus Function Coils Coils to read (single bit read-only values) 0x01 DiscreteInputs Discrete Inputs to read (single bit read/write values) 0x02 HoldingRegisters Holding Registers to read (2 byte read-only values) 0x03 InputRegisters Input Register to read (2 byte read/write values) 0x04 Each value can define multiple different registers/coils to be read on one or multiple devices connected via Modbus. The format is identical for all four types. Each single definition consists of three values separated by colons ( : ). The address of the Modbus device that should be read from. Valid device addresses range from 1 to 247; with a single slave device on your bus this is often 1. The address of the first register/coil to be read on the device. Register addresses are uint16 values and range from 0 to 65535. The number of consecutive registers/coils to be read. This value is limited to 127, because longer answers cannot be encoded. Be aware that for registers a value higher than 22 leads to problems on high spreading factors so that the data will not be transferred completely via LoRaWAN. Multiple of these register definitions can be used if they are separated by commas ( , no spaces after the comma). You can use one or multiple of the register/coil types. If you do not want to use a type e.g. Coils , set that definition to an empty string. The device will parse the four register strings on startup and reports invalid definitions. The device will not work while there are invalid definitions but will reboot repeatedly until you fix the configuration.","title":"Register/Coil definition"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#example-register-definition-strings","text":"definition explanation 1:0:3 Read first three registers of device with address 1. 2:40001:1,2:2000:10 Read registers 40001 and 2000 to 2009 of device 2. 4:0:2,5:0:2,5:20:1 Read registers 0 and 1 of device 4 as well as registers 0, 1, and register 20 of device 5.","title":"Example register definition strings"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#payload-formats","text":"The Modbus Bridge sends different kinds of messages over different LoRaWAN ports: Port Message 1 Status messages. 11 Data from reading Coils (function 0x01 ). 12 Data from reading Discrete Inputs (function 0x02 ). 13 Data from reading Holding Registers (function 0x03 ). 14 Data from reading Input Registers (function 0x04 ).","title":"Payload formats"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#status-messages","text":"The Modbus Bridge sends a status messages report on the health of the device itself. This messages are sent along when the device is sending data packages with a maximum of one status message per day. Status messages are transmitted on port 1 and have a fixed length of 14 bytes. name pos len type description example version 0 3 uint8[3] Version of firmware running on the device [1, 0, 4] \u2261 v1.0.4 flag 3 1 uint8 Status flag, for internal use 0 temperature 4 2 int16 Device's internal temperature in tenth \u00b0C 246 \u2261 24.6\u00b0C voltage 6 2 int16 Voltage supplied by power source in mV 3547 \u2261 3.547V timestamp 8 5 int40 Internal date/time at creation of the status packet as UNIX timestamp 1533055905 mode 13 1 uint8 Operation mode the device runs 1","title":"Status messages"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#data-messages","text":"The principle message format is equal for all four types of registers/coils. The port used defines what kind of register/coil was read (see table \"Payload formats\" above). The format slightly differs for coils versus registers, since the amount of data per coil (1 bit) is different than the amount per register (16 bits). Each data message is starts with a 40 bit timestamp followed by one or more data packs. Each pack represents a single read operation caused by a single register definition in your configuration. The pack starts with 4 bytes repeating the information of the register definition extended by a single bit reporting errors on reading letting you know what data you are presented with and if it was read successfully). That information is followed by the raw data bytes as they where given by the slave device (as the Bridge cannot know how the data is presented in those bytes). The length of the data is dependent on the register definition and on the type (registers versus coils). The length is not explicitly stated, as it can be determined from the definition. The data bytes are also included when an error has occurred, however in this case the content of those bytes is undefined.","title":"Data messages"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#structure-of-a-data-pack","text":"name pos len type description addr 0 1 uint8 Modbus address of slave device. start 1 2 uint16 Address of first coil/register read. cnt+err 3 1 uint8 Highest bit: error indicator, 7 lower bits: number of consecutive coils/registers read. data 4 n uint8[n] Raw data bytes as sent by the slave device. To get cnt , the number of coils/registers read, you need to only read the lower 7 bits of the fourth byte (e.g. by using something like data[3] & 0x7f ). The highest bit is 0 on successful reads and 1 if an error occurred. See our reference decoder if you have trouble reading the format. The length of the data n for Coils and Discrete Inputs (Ports 11 and 12) the value of cnt divided by 8 rounded up (that is the minimal number of bytes needed to store cnt bits). For Registers (Ports 13 and 14) the data length is cnt * 2 , since registers contain two bytes of data. Please refer to the reference decoder usable in TTN at the end of this document.","title":"Structure of a data pack"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#complex-setups","text":"The Modbus Bridge as described in this manual can be individually configured to read out any registers and coils. For some setups, this is not enough. There can be situations in which you want to read registers at different intervals, e.g. you might need some values with hourly updates and others only every other day. For measuring values with high variance it can be necessary to take multiple reads over a period of time and create an average value. Maybe you need to read a status register first and depending on its value you want to decide which registers to read and transmit the values of. You could also want to write values into registers with the Bridge. All this scenarios are possible to solve using the Modbus Bridge, but their complexity leave the scope of our standard firmware. If you need any special processing for your Modbus setup, please contact us with your requirements, and we will make you an offer for an individual firmware that processes data the way you need. If you find that the data rate LoRaWAN offers is a limitation for your setup, we could also provide you with a Modbus solution that uses alternate data transmission technologies, for example NarrowBand-IoT.","title":"Complex setups"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#appendices","text":"","title":"Appendices"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#technical-characteristics","text":"Product Type name Modbus485-LoRaWAN Description Modbus over LoRaWAN Bridge RF tranceiver Type Semtech SX1272 Frequency 863 MHz to 870 MHz Max. TX Power max. +14 dBm Typical RF Range \u22642km Ideal RF Range \u226410km (free line of sight) LoRa communication Protocol Class A LoRaWAN 1.0.1 EU868 Activation method Over-the-air-activation (OTAA) Activation by personalization (ABP) Encryption AES128 Modbus communication Bus RS-485 twisted pair wires (with optional GND) Protocol RTU/ASCII Environmental Requirements Operating temperature -20\u00b0C \u2013 55\u00b0C Max installation height 2m Standards","title":"Technical characteristics"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#ce-declaration-of-conformity","text":"CE Declaration of Conformity (pdf).","title":"CE Declaration of Conformity"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#disposal-weee-entsorgung","text":"Information about the disposal of the Device .","title":"Disposal / WEEE / Entsorgung"},{"location":"lorawan-sensors/modbus-lorawan/0.3.0/index.html#reference-decoder","text":"This is a decoder written in JavaScript that can be used to parse the device's LoRaWAN messages. It can be used as is in The Things Network . function readVersion ( bytes ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ 0 ] + \".\" + bytes [ 1 ] + \".\" + bytes [ 2 ]; } function int40_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 32 | bytes [ 1 ] << 24 | bytes [ 2 ] << 16 | bytes [ 3 ] << 8 | bytes [ 4 ] << 0 ; } function int16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return bytes [ 0 ] << 8 | bytes [ 1 ] << 0 ; } function decode_status ( bytes ) { return { \"port\" : 1 , \"version\" : readVersion ( bytes ), \"flags\" : bytes [ 3 ], \"temp\" : int16_BE ( bytes , 4 ) / 10 , \"vBat\" : int16_BE ( bytes , 6 ) / 1000 , \"timestamp\" : int40_BE ( bytes , 8 ), \"operationMode\" : bytes [ 13 ] }; } function decode_data ( bytes , port ) { var fun = port - 10 ; var regs = []; if ( bytes . length > 5 ) { var b = bytes . slice ( 5 ); while ( b . length >= 4 ) { var r = { \"device\" : b [ 0 ], \"start\" : int16_BE ( b , 1 ), \"count\" : b [ 3 ] & 0x7f , \"error\" :!! ( b [ 3 ] >> 7 ), \"data\" : null }; var dataLen = 0 ; if ( fun <= 2 ) { // coils, one bit per address dataLen = Math . ceil ( r . count / 8.0 ); } else { // registers, 16 bits per address dataLen = r . count * 2 ; } if ( b . length >= dataLen + 4 ) { r . data = b . slice ( 4 , 4 + dataLen ); } regs . push ( r ); b = b . slice ( 4 + dataLen ); } } return decoded = { \"port\" : port , \"function\" : fun , \"timestamp\" : int40_BE ( bytes , 0 ), \"values\" : regs }; } function Decoder ( bytes , port ) { switch ( port ) { case 1 : return decode_status ( bytes ); case 11 : case 12 : case 13 : case 14 : return decode_data ( bytes , port ); } return { \"error\" : \"invalid port\" , \"port\" : port }; } Copyright Modbus Logo","title":"Reference decoder"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html","text":"Modbus (ASCII / RTU) over LoRaWAN Bridge Version v0.4.1 (since 2019-07-27) This the manual for an unreleased version of the firmware. For older revisions please refer to the version overview . Target Measurement / Purpose The Lobaro Modbus LoRaWAN Bridge is a low power device that can be used to communicate with Modbus Slave devices (ASCII/RTU) on a RS-485 bus over a LoRaWAN network. Modbus commands can be transmitted via Downlink message to the Bridge and are forwarded by the Bridge to the connected Slave Devices. Received responses are forwarded via LoRaWAN Uplink messages. The Modbus Bridge can also be configured to execute Modbus commands regularly and report the responses via Uplink. The Bridge supports LoRaWAN Operation Mode Class A for power efficient operation (for long operation periods powered by battery), as well as Class C to enable short reaction time to Downlink requests. The Modbus Bridge supports reading of all four object types that can be provided by Modbus slave devices: Coil, Discrete Input, Input Register, and Holding Register. It also supports writing values to both writable objects: Coils and Holding Registers. Multiple different slave devices on the Bus can be accessed individually by a single Bridge device. Reading intervals and register definitions can be configured very flexibly to suit individual requirements. Typical applications for Modbus devices include reading out electric and water meters or retrieving data from environmental sensors like temperature and humidity. Industrial machines as well as solar panel installations often include a Modbus connection to supply supervision and automated operation. PDF Download Data Sheet with dimensions Modbus Modbus defines four different object types form which values can be read: Coils, Discrete Inputs, Input Registers, and Holding Registers. Of those four, Coils and Holding Registers can also be written to. Coils and Discrete Inputs hold single bit values while Input Registers and Holding Registers hold 16 bit values. For values that cannot fit into 16 bit, it is customary to use multiple consecutive registers to hold the value. Modbus does not define what the bytes in the registers represent; it is up to the creator of the Modbus Slave Device to specify how to interpret the stored bits. A 16 bit register could be used to hold a single byte value, for example, or four consecutive registers could hold a double precision floating point number. Storing texts as ASCII characters is also possible. For integer numbers in particular it there is no defined byte order, nor signage definition. Because of those ambiguities it is not possible for the Lobaro LoRaWAN Bridge to understand the data read from/written to Slave Devices. All communications therefore simply forward raw Modbus Commands and Responses with their payload, as it communicated on the Bus. Any check sums (CRC16 for RTU, LRC for ASCII) are excluded from LoRaWAN communications or the Bridge's configuration, as there are other check sums in work their already. For a deeper introduction into Modbus please refer to https://en.wikipedia.org/wiki/Modbus . Work Cycle The Modbus LoRaWAN Bridge has a simple work cycle. It spends most of the time in a deep sleep state, to conserve energy. For every reading it wakes up for a few seconds, requests values from the connected slave devices, uploads the data via LoRaWAN, and then goes to sleep again. The following flowchart illustrates the work cycle: graph LR; init(Init)-->check(Test Reading); check-->join(LoRaWAN Join); join-->read(Data Collection); read-->send(Data Transfer); send-->sleep(\"Sleep\"); sleep-->|Cron expression| read; Init When the device starts (because it has just been connected to a power source, or after a reboot) it begins in the Init state. A quick self-check is executed; if that succeeds, the green on-board LED blinks once, slowly. After that the configuration is evaluated and checked for invalid values. If any problems are detected during Init , the device's LED will light up for three times, and the device will then reboot. If everything is okay, the device will continue with the Test Reading . Test Reading Configuration The configuration is done using Lobaro Maintenance Tool and the Lobaro USB PC adapter. LoRaWAN The connection to the LoRaWAN network is defined by multiple configuration parameters. This need to be set according to your LoRaWAN network and the way your device is supposed to be attached to it, or the device will not be able to send any data. There are two different methods to attach a device to a LoRaWAN network: Over-the-air-activation (OTAA) and Activation-by-personalisation (ABP). Depending on which method you are using you will have to set different values. Several values are a number of bytes, that need to be entered as hexstrings (without 0x -prefix). So e.g. the DevEUI is a value of 8 bytes encoded in hex will be 16 hexdigits long. A sample value would be 0123456789abcdef . name used type description OTAA both bool true \u2261 use OTAA, false \u2261 use ABP DevEUI OTAA hexbyte[8] the 8 byte DevEUI identifies the hardware on the join operation. The default value is a world wide unique value predefined in the hardware. Should not be changed unless required by the network provider. AppEUI OTAA hexbyte[8] ID defining the application used in the LoRaWAN network. AppKey OTAA hexbyte[16] Key used to encrypt communication with the LoRaWAN network. AppSKey ABP hexbyte[16] Application Session Key to be synced with the LoRaWAN network. NetSKey ABP hexbyte[16] Network Session Key to be synced with the LoRaWAN network. DevAdr ABP hexbyte[4] Device Address used to identify device in the LoRaWAN network. SF both int Initial LoRa spreading factor used for transmissions. Valid range is 7-12. The actual spreading factor used by change during operation if ADR is used. ADR both bool Should adaptive data rate be used? true \u2261 use ADR, false \u2261 don't OpMode both char LoRaWAN operation mode, A \u2261 Class A, C \u2261 Class C Modbus/UART There are several values that define the configuration via Modbus. These values depend on the Slave devices that you want to read out. Please refer to your Modbus Devices's manual to find out the correct configuration. name description values ModbusProtocol Which Modbus-Protocol to use RTU . ASCII ModbusBaud UART Baud rate 9600 , 19200 , 38400 , ... ModbusDataLength UART data length 7 , 8 , 9 ModbusStopBits UART stop bits 0.5 , 1 , 1.5 , 2 (written exactly like this) ModbusParity UART parity NONE , EVEN , ODD ModbusCron Cron expression \u2020 defining when to read. 0 0/15 * * * * for every 15 minutes ModbusCommands List of Modbus Commands (see below). 010300010003 \u2020 See also our Introduction to Cron expressions . Modbus Commands Whenever the cron expression given in the configuration value ModbusCron activates, the Modbus Bridge wakes up from hibernation (or listening mode, for Class C), a set of configured Modbus Commands (set in the configuration parameter ModbusCommands ) is executed over the RS-485 bus. Any responses received from the addressed Slave Device will be uploaded via LoRaWAN. The Modbus Commands to be executed must be entered in the config as hexencoded bytes, exactly the way they are to be sent over the bus. Checksums must not be included in the configuration. Multiple commands can be added to the configuration, separated by commas (no spaces). For example if you want the Bridge to read the Holding Registers 100, 101, and 102 on two separated Slave Devices with the addresses 9 and 10, you would need to set ModbusCommands to 090300640003,0a0300640003 . You can configure any byte sequence you want to be sent; not all will be valid Modbus Commands. This feature has been developed to execute register/coil reads and upload the values retrieved. It is possible to use it for writing values as well, but the usefulness of that is limited. If you configure register writes, be aware that the commands are also executed when the device boots! Keep in mind that the responses to your commands will be sent using LoRaWAN, which has only a very limited packet size! Modbus responses can be over 200 bytes long. For reading commands, the Modbus Response contains 6 bytes to repeat the command. The data format used by the Modbus Bridge adds another 6 bytes. On higher spreading factors with 50 byte message limit this only leaves 38 bytes for the actual read data (in EU LoRaWAN configuration, other areas might have a slightly different number). Responses that will not fit into a single LoRaWAN Uplink will be dropped! To make sure your data can be uploaded on high spreading factors, do not read out more than 19 consecutive 16 bit registers in a single command. For a short introduction into Modbus Commands and some examples of configurations and their created responses, please take a look at examples . Payload formats The Modbus Bridge sends two different kinds of messages over three different LoRaWAN ports: Direction Port Message Uplink 1 Status messages. Uplink 3 Modbus Responses triggered by configuration. Uplink 4 Modbus Responses triggered by Downlinks. Downlink 4 Modbus Commands to be forwarded by the Bridge. In addition to the description we also supply a reference decoder usable in TTN at the end of this document. Uplink Status messages The Modbus Bridge sends a status messages report on the health of the device itself. This messages are sent along when the device is sending data packages with a maximum of one status message per day. Status messages are transmitted on port 1 and have a fixed length of 14 bytes. name pos len type description example version 0 3 uint8[3] Version of firmware running on the device [0, 4, 1] \u2261 v0.4.1 flag 3 1 uint8 Status flag, for internal use 0 temperature 4 2 int16 Device's internal temperature in tenth \u00b0C 246 \u2261 24.6\u00b0C voltage 6 2 int16 Voltage supplied by power source in mV 3547 \u2261 3.547V timestamp 8 5 int40 Internal date/time at creation of the status packet as UNIX timestamp 1533055905 opMode 13 1 char LoRaWAN Operation mode the device runs A or C Data messages Data messages contain responses to Modbus Commands received by the Bridge. They are sent as Uplinks on two different ports, depending on how the command was triggered. The format of the messages is identical for both cases. Data messages on port 3 contain responses to the commands set in the configuration parameter ModbusCommands that are executed automatically every time the cron expression in ModbusCron activates. Data messages on port 4 contain responses to Modbus Commands that have been sent to the Bridge as Downlinks via LoRaWAN. Every Data message starts with 5 bytes containing an int40 timestamp. This is followed by zero or more Modbus Responses. Each Modbus Response is prefixed with a single byte indicating the length of the Response (as uint8 ). The timestamp indicates when the command that triggered the Responses were executed. For Messages on port 3 this is the time at which the Bridge was activated by the cron expression. For Messages on port 4 this is the time at which the received Downlink was executed. Please note our information on timestamps in our LoRaWAN devices . The Bridge tries to put as many Responses into a single message as possible, so depending on the current spreading factor, the number of Responses per message may vary. For a short introduction to Modbus Commands and Responses and some examples of configuration and payload refer to Examples . Downlink Modbus Commands Downlinks on port 4 contain one or more Modbus Commands that the Bridge should forward to the RS-485 bus. Every Command must be prefixed by a single byte defining the Command's length. The Responses to the Commands are sent as Uplink messages on port 4. Any byte sequence can transmitted this way and will be forwarded to the bus. If the Bridge does not receive a Response by the addressed Slave Device, create an error Response with the exception code 11 \"Gateway Target Device Failed to Respond\". This only makes sense if the Downlink did contain a Modbus Command. Please be advised that not all Modbus Slave devices send Responses in all cases. If you receive the exception code 11 it is possible that the Slave device was reached but was not addressed correctly. It might even be possible, that a Command was executed successfully, but that the device does not send confirmations. When in doubt, refer to the documentation of your connected devices or try communicating with it directly, without the Bridge, to reduce possible error sources. Refer to Examples to see some Downlinks and their answers. Examples This chapter illustrates with some examples, how working with the Modbus Bridge looks like. The bytes that are sent via LoRaWAN are presented here as hex strings. Modbus Commands and Responses are broken down to their parts in the explanations, but explaining the format used by Modbus in detail is beyond the scope of this manual. You can find a short explanation on Modbus on Wikipedia: https://en.wikipedia.org/wiki/Modbus . Uplinks triggered by configuration The following shows some examples of configuration for the automated reading and what the generated Uplinks for that could look like. Example A1: Read Holding Registers 0, 1, and 2 of device with address 1 ModbusCommands = '010300000003' # Example resulting Uplink after successful readout Up, Port 3: '005d1698fd0c0103000000031234567890ab' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '0c' -> first Response is 12 bytes long '0103000000031234567890ab' 12 bytes modbus response: '01' -> slave device with address 1 '03' -> function 3 = read Holding Register, success '0000' -> start reading at register 0 '0003' -> read 3 consecutive registers '1234567890ab' -> 6 bytes of data # Example resulting Uplink after failing readout Up, Port 3: '005d1698fd0301830b' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '03' -> first Response is 3 bytes long '01830b' 3 bytes modbus response: '01' -> slave device with address 1 '83' -> function 3 with error indicator 80 = read Holding Register, failed '0b' -> error code 11: \"Gateway Target Device Failed to Respond\" Example A2: Read coils 1000-1019 of device 32 ModbusCommands = '200103e80014' # Example resulting Uplink Up, Port 3: '005d1698fd09200103e80014f1041a' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '09' -> first Response is 9 bytes long '200103e80014f1041a' 9 bytes of modbus response: '20' -> slave device with address 32 '01' -> read coils, success '03e8' -> start reading at coil 1000 '0014' -> read 20 consecutive coils 'f1041a' -> 20 bits of data packed into 3 bytes Example A3: Read two devices ModbusCommands = '0a0300010005,3001ea600020' # Example resulting Uplink Up, Port 3: '005d1698fd100a0300010005111122223333444455550a3001ea60002012345678' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '10' -> first Response is 16 bytes long '0a030001000511112222333344445555' 16 bytes of Modbus Response '0a' -> slave device with address 10 '03' -> read Holding Registers, success '0001' -> start reading at register 1 '0005' -> read 5 registers '11112222333344445555' 10 bytes of data '0a' -> second Response is 10 bytes long '30' -> slave device with address 48 '01' -> read Coils, success 'ea60' -> start at coil 60000 '0020' -> read 32 coils '12345678' -> 32 bits of data packed in 4 bytes Uplinks triggered by Downlinks Example B1: Read single Input Register by Downlink Down, Port 4: '06180401000001' '06' -> first Command is 6 bytes long '180401000001' 6 bytes of Modbus Command '18' -> slave device with address 24 '04' -> function 4, read Input Register '0100' -> start at register 256 '0001' -> read 1 register # Example resulting Uplink Up, Port4: '004b3dd67508180401000001abcd' '004b3dd675' -> timestamp = 1262343797 -> 2010-01-01T11:03:17 UTC '08' -> first Response is 8 bytes long '180401000001abcd' 8 bytes of Response '18' -> slave device with address 24 '04' -> read Input Register, success '0100' -> start at register 256 '0001' -> read 1 register 'abcd' -> 2 bytes of data Example B2: Writing holding registers on multiple devices Down, Port 4: '06a106aabb12340fa210a0010004081122334455667788' '06' -> first Command is 6 bytes long 'a106aabb1234' 6 bytes of Modbus Command 'a1' -> slave device with address 161 '06' -> function 6, write single Holding Register 'aabb' -> address of Register to write = 43707 '1234' -> two bytes of data '0f' -> second Command is 15 byts long 'a210a0010004081122334455667788' 15 byte of Modbus Command 'a2' -> slave device with address 162 '10' -> function 16, write multiple Holding Registers 'a001' -> start at register 40961 '0004' -> 4 registers to write '08' -> 8 bytes of data follow '1122334455667788' -> 8 bytes of data # Example resulting Uplink Up, Port 4: '004b3dd67503a1860206a210a0010004' '004b3dd675' -> timestamp = 1262343797 -> 2010-01-01T11:03:17 UTC '03' -> first Response is 3 bytes long 'a18602' 3 bytes of Modbus Response 'a1' -> slave device address 161 '86' -> write single Holding Regsiter, failed '02' -> error code 2: \"Illegal Data Address\" '06' - second Response is 6 byts long 'a210a0010004' 6 bytes od Modbus Response 'a2' -> slave device address 162 '10' -> read multiple Holding Registers, success 'a001' -> start at register 40961 '0004' -> 4 registers to write Complex setups The Modbus Bridge as described in this manual can be individually configured to read out any registers and coils. For some setups, this is not enough. There can be situations in which you want to read registers at different intervals, e.g. you might need some values with hourly updates and others only every other day. For measuring values with high variance it can be necessary to take multiple reads over a period of time and create an average value. Maybe you need to read a status register first and depending on its value you want to decide which registers to read and transmit the values of. All this scenarios are possible to solve using the Modbus Bridge, but their complexity leave the scope of our standard firmware. If you need any special processing for your Modbus setup, please contact us with your requirements, and we will make you an offer for an individual firmware that processes data the way you need. If you find that the data rate LoRaWAN offers is a limitation for your setup, we could also provide you with a Modbus solution that uses alternate data transmission technologies, for example NarrowBand-IoT. Appendices Technical characteristics Product Type name Modbus485-LoRaWAN Description Modbus over LoRaWAN Bridge RF tranceiver Type Semtech SX1272 Frequency 863 MHz to 870 MHz Max. TX Power max. +14 dBm Typical RF Range \u22642km Ideal RF Range \u226410km (free line of sight) LoRa communication Protocol Class A / Class C LoRaWAN 1.0.1 EU868 Activation method Over-the-air-activation (OTAA) Activation by personalization (ABP) Encryption AES128 Modbus communication Bus RS-485 twisted pair wires (with optional GND) Protocol RTU/ASCII Environmental Requirements Operating temperature -20\u00b0C \u2013 55\u00b0C Max installation height 2m Standards CE Declaration of Conformity CE Declaration of Conformity (pdf). Disposal / WEEE / Entsorgung Information about the disposal of the Device . Reference decoder This is a decoder written in JavaScript that can be used to parse the device's LoRaWAN messages. It can be used as is in The Things Network . function readVersion ( bytes ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ 0 ] + \".\" + bytes [ 1 ] + \".\" + bytes [ 2 ]; } function signed ( val , bits ) { if (( val & 1 << ( bits - 1 )) > 0 ) { // value is negative (16bit 2's complement) var mask = Math . pow ( 2 , bits ) - 1 ; val = ( ~ val & mask ) + 1 ; // invert all bits & add 1 => now positive value val = val * - 1 ; } return val ; } function int40_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 32 | bytes [ 1 ] << 24 | bytes [ 2 ] << 16 | bytes [ 3 ] << 8 | bytes [ 4 ] << 0 , 40 ); } function int16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 8 | bytes [ 1 ] << 0 , 16 ); } function decode_status ( bytes ) { return { \"port\" : 1 , \"version\" : readVersion ( bytes ), \"flags\" : bytes [ 3 ], \"temp\" : int16_BE ( bytes , 4 ) / 10 , \"vBat\" : int16_BE ( bytes , 6 ) / 1000 , \"timestamp\" : int40_BE ( bytes , 8 ), \"operationMode\" : bytes [ 13 ] }; } // TODO: Copyright Modbus Logo","title":"Modbus (ASCII / RTU) over LoRaWAN Bridge"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#modbus-ascii-rtu-over-lorawan-bridge","text":"Version v0.4.1 (since 2019-07-27) This the manual for an unreleased version of the firmware. For older revisions please refer to the version overview .","title":"Modbus (ASCII / RTU) over LoRaWAN Bridge"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#target-measurement-purpose","text":"The Lobaro Modbus LoRaWAN Bridge is a low power device that can be used to communicate with Modbus Slave devices (ASCII/RTU) on a RS-485 bus over a LoRaWAN network. Modbus commands can be transmitted via Downlink message to the Bridge and are forwarded by the Bridge to the connected Slave Devices. Received responses are forwarded via LoRaWAN Uplink messages. The Modbus Bridge can also be configured to execute Modbus commands regularly and report the responses via Uplink. The Bridge supports LoRaWAN Operation Mode Class A for power efficient operation (for long operation periods powered by battery), as well as Class C to enable short reaction time to Downlink requests. The Modbus Bridge supports reading of all four object types that can be provided by Modbus slave devices: Coil, Discrete Input, Input Register, and Holding Register. It also supports writing values to both writable objects: Coils and Holding Registers. Multiple different slave devices on the Bus can be accessed individually by a single Bridge device. Reading intervals and register definitions can be configured very flexibly to suit individual requirements. Typical applications for Modbus devices include reading out electric and water meters or retrieving data from environmental sensors like temperature and humidity. Industrial machines as well as solar panel installations often include a Modbus connection to supply supervision and automated operation. PDF Download Data Sheet with dimensions","title":"Target Measurement / Purpose"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#modbus","text":"Modbus defines four different object types form which values can be read: Coils, Discrete Inputs, Input Registers, and Holding Registers. Of those four, Coils and Holding Registers can also be written to. Coils and Discrete Inputs hold single bit values while Input Registers and Holding Registers hold 16 bit values. For values that cannot fit into 16 bit, it is customary to use multiple consecutive registers to hold the value. Modbus does not define what the bytes in the registers represent; it is up to the creator of the Modbus Slave Device to specify how to interpret the stored bits. A 16 bit register could be used to hold a single byte value, for example, or four consecutive registers could hold a double precision floating point number. Storing texts as ASCII characters is also possible. For integer numbers in particular it there is no defined byte order, nor signage definition. Because of those ambiguities it is not possible for the Lobaro LoRaWAN Bridge to understand the data read from/written to Slave Devices. All communications therefore simply forward raw Modbus Commands and Responses with their payload, as it communicated on the Bus. Any check sums (CRC16 for RTU, LRC for ASCII) are excluded from LoRaWAN communications or the Bridge's configuration, as there are other check sums in work their already. For a deeper introduction into Modbus please refer to https://en.wikipedia.org/wiki/Modbus .","title":"Modbus"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#work-cycle","text":"The Modbus LoRaWAN Bridge has a simple work cycle. It spends most of the time in a deep sleep state, to conserve energy. For every reading it wakes up for a few seconds, requests values from the connected slave devices, uploads the data via LoRaWAN, and then goes to sleep again. The following flowchart illustrates the work cycle: graph LR; init(Init)-->check(Test Reading); check-->join(LoRaWAN Join); join-->read(Data Collection); read-->send(Data Transfer); send-->sleep(\"Sleep\"); sleep-->|Cron expression| read; Init When the device starts (because it has just been connected to a power source, or after a reboot) it begins in the Init state. A quick self-check is executed; if that succeeds, the green on-board LED blinks once, slowly. After that the configuration is evaluated and checked for invalid values. If any problems are detected during Init , the device's LED will light up for three times, and the device will then reboot. If everything is okay, the device will continue with the Test Reading . Test Reading","title":"Work Cycle"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#configuration","text":"The configuration is done using Lobaro Maintenance Tool and the Lobaro USB PC adapter.","title":"Configuration"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#lorawan","text":"The connection to the LoRaWAN network is defined by multiple configuration parameters. This need to be set according to your LoRaWAN network and the way your device is supposed to be attached to it, or the device will not be able to send any data. There are two different methods to attach a device to a LoRaWAN network: Over-the-air-activation (OTAA) and Activation-by-personalisation (ABP). Depending on which method you are using you will have to set different values. Several values are a number of bytes, that need to be entered as hexstrings (without 0x -prefix). So e.g. the DevEUI is a value of 8 bytes encoded in hex will be 16 hexdigits long. A sample value would be 0123456789abcdef . name used type description OTAA both bool true \u2261 use OTAA, false \u2261 use ABP DevEUI OTAA hexbyte[8] the 8 byte DevEUI identifies the hardware on the join operation. The default value is a world wide unique value predefined in the hardware. Should not be changed unless required by the network provider. AppEUI OTAA hexbyte[8] ID defining the application used in the LoRaWAN network. AppKey OTAA hexbyte[16] Key used to encrypt communication with the LoRaWAN network. AppSKey ABP hexbyte[16] Application Session Key to be synced with the LoRaWAN network. NetSKey ABP hexbyte[16] Network Session Key to be synced with the LoRaWAN network. DevAdr ABP hexbyte[4] Device Address used to identify device in the LoRaWAN network. SF both int Initial LoRa spreading factor used for transmissions. Valid range is 7-12. The actual spreading factor used by change during operation if ADR is used. ADR both bool Should adaptive data rate be used? true \u2261 use ADR, false \u2261 don't OpMode both char LoRaWAN operation mode, A \u2261 Class A, C \u2261 Class C","title":"LoRaWAN"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#modbusuart","text":"There are several values that define the configuration via Modbus. These values depend on the Slave devices that you want to read out. Please refer to your Modbus Devices's manual to find out the correct configuration. name description values ModbusProtocol Which Modbus-Protocol to use RTU . ASCII ModbusBaud UART Baud rate 9600 , 19200 , 38400 , ... ModbusDataLength UART data length 7 , 8 , 9 ModbusStopBits UART stop bits 0.5 , 1 , 1.5 , 2 (written exactly like this) ModbusParity UART parity NONE , EVEN , ODD ModbusCron Cron expression \u2020 defining when to read. 0 0/15 * * * * for every 15 minutes ModbusCommands List of Modbus Commands (see below). 010300010003 \u2020 See also our Introduction to Cron expressions .","title":"Modbus/UART"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#modbus-commands","text":"Whenever the cron expression given in the configuration value ModbusCron activates, the Modbus Bridge wakes up from hibernation (or listening mode, for Class C), a set of configured Modbus Commands (set in the configuration parameter ModbusCommands ) is executed over the RS-485 bus. Any responses received from the addressed Slave Device will be uploaded via LoRaWAN. The Modbus Commands to be executed must be entered in the config as hexencoded bytes, exactly the way they are to be sent over the bus. Checksums must not be included in the configuration. Multiple commands can be added to the configuration, separated by commas (no spaces). For example if you want the Bridge to read the Holding Registers 100, 101, and 102 on two separated Slave Devices with the addresses 9 and 10, you would need to set ModbusCommands to 090300640003,0a0300640003 . You can configure any byte sequence you want to be sent; not all will be valid Modbus Commands. This feature has been developed to execute register/coil reads and upload the values retrieved. It is possible to use it for writing values as well, but the usefulness of that is limited. If you configure register writes, be aware that the commands are also executed when the device boots! Keep in mind that the responses to your commands will be sent using LoRaWAN, which has only a very limited packet size! Modbus responses can be over 200 bytes long. For reading commands, the Modbus Response contains 6 bytes to repeat the command. The data format used by the Modbus Bridge adds another 6 bytes. On higher spreading factors with 50 byte message limit this only leaves 38 bytes for the actual read data (in EU LoRaWAN configuration, other areas might have a slightly different number). Responses that will not fit into a single LoRaWAN Uplink will be dropped! To make sure your data can be uploaded on high spreading factors, do not read out more than 19 consecutive 16 bit registers in a single command. For a short introduction into Modbus Commands and some examples of configurations and their created responses, please take a look at examples .","title":"Modbus Commands"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#payload-formats","text":"The Modbus Bridge sends two different kinds of messages over three different LoRaWAN ports: Direction Port Message Uplink 1 Status messages. Uplink 3 Modbus Responses triggered by configuration. Uplink 4 Modbus Responses triggered by Downlinks. Downlink 4 Modbus Commands to be forwarded by the Bridge. In addition to the description we also supply a reference decoder usable in TTN at the end of this document.","title":"Payload formats"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#uplink","text":"","title":"Uplink"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#status-messages","text":"The Modbus Bridge sends a status messages report on the health of the device itself. This messages are sent along when the device is sending data packages with a maximum of one status message per day. Status messages are transmitted on port 1 and have a fixed length of 14 bytes. name pos len type description example version 0 3 uint8[3] Version of firmware running on the device [0, 4, 1] \u2261 v0.4.1 flag 3 1 uint8 Status flag, for internal use 0 temperature 4 2 int16 Device's internal temperature in tenth \u00b0C 246 \u2261 24.6\u00b0C voltage 6 2 int16 Voltage supplied by power source in mV 3547 \u2261 3.547V timestamp 8 5 int40 Internal date/time at creation of the status packet as UNIX timestamp 1533055905 opMode 13 1 char LoRaWAN Operation mode the device runs A or C","title":"Status messages"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#data-messages","text":"Data messages contain responses to Modbus Commands received by the Bridge. They are sent as Uplinks on two different ports, depending on how the command was triggered. The format of the messages is identical for both cases. Data messages on port 3 contain responses to the commands set in the configuration parameter ModbusCommands that are executed automatically every time the cron expression in ModbusCron activates. Data messages on port 4 contain responses to Modbus Commands that have been sent to the Bridge as Downlinks via LoRaWAN. Every Data message starts with 5 bytes containing an int40 timestamp. This is followed by zero or more Modbus Responses. Each Modbus Response is prefixed with a single byte indicating the length of the Response (as uint8 ). The timestamp indicates when the command that triggered the Responses were executed. For Messages on port 3 this is the time at which the Bridge was activated by the cron expression. For Messages on port 4 this is the time at which the received Downlink was executed. Please note our information on timestamps in our LoRaWAN devices . The Bridge tries to put as many Responses into a single message as possible, so depending on the current spreading factor, the number of Responses per message may vary. For a short introduction to Modbus Commands and Responses and some examples of configuration and payload refer to Examples .","title":"Data messages"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#downlink","text":"","title":"Downlink"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#modbus-commands_1","text":"Downlinks on port 4 contain one or more Modbus Commands that the Bridge should forward to the RS-485 bus. Every Command must be prefixed by a single byte defining the Command's length. The Responses to the Commands are sent as Uplink messages on port 4. Any byte sequence can transmitted this way and will be forwarded to the bus. If the Bridge does not receive a Response by the addressed Slave Device, create an error Response with the exception code 11 \"Gateway Target Device Failed to Respond\". This only makes sense if the Downlink did contain a Modbus Command. Please be advised that not all Modbus Slave devices send Responses in all cases. If you receive the exception code 11 it is possible that the Slave device was reached but was not addressed correctly. It might even be possible, that a Command was executed successfully, but that the device does not send confirmations. When in doubt, refer to the documentation of your connected devices or try communicating with it directly, without the Bridge, to reduce possible error sources. Refer to Examples to see some Downlinks and their answers.","title":"Modbus Commands"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#examples","text":"This chapter illustrates with some examples, how working with the Modbus Bridge looks like. The bytes that are sent via LoRaWAN are presented here as hex strings. Modbus Commands and Responses are broken down to their parts in the explanations, but explaining the format used by Modbus in detail is beyond the scope of this manual. You can find a short explanation on Modbus on Wikipedia: https://en.wikipedia.org/wiki/Modbus .","title":"Examples"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#uplinks-triggered-by-configuration","text":"The following shows some examples of configuration for the automated reading and what the generated Uplinks for that could look like. Example A1: Read Holding Registers 0, 1, and 2 of device with address 1 ModbusCommands = '010300000003' # Example resulting Uplink after successful readout Up, Port 3: '005d1698fd0c0103000000031234567890ab' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '0c' -> first Response is 12 bytes long '0103000000031234567890ab' 12 bytes modbus response: '01' -> slave device with address 1 '03' -> function 3 = read Holding Register, success '0000' -> start reading at register 0 '0003' -> read 3 consecutive registers '1234567890ab' -> 6 bytes of data # Example resulting Uplink after failing readout Up, Port 3: '005d1698fd0301830b' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '03' -> first Response is 3 bytes long '01830b' 3 bytes modbus response: '01' -> slave device with address 1 '83' -> function 3 with error indicator 80 = read Holding Register, failed '0b' -> error code 11: \"Gateway Target Device Failed to Respond\" Example A2: Read coils 1000-1019 of device 32 ModbusCommands = '200103e80014' # Example resulting Uplink Up, Port 3: '005d1698fd09200103e80014f1041a' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '09' -> first Response is 9 bytes long '200103e80014f1041a' 9 bytes of modbus response: '20' -> slave device with address 32 '01' -> read coils, success '03e8' -> start reading at coil 1000 '0014' -> read 20 consecutive coils 'f1041a' -> 20 bits of data packed into 3 bytes Example A3: Read two devices ModbusCommands = '0a0300010005,3001ea600020' # Example resulting Uplink Up, Port 3: '005d1698fd100a0300010005111122223333444455550a3001ea60002012345678' '005d1698fd' -> timestamp = 1561762045 -> 2019-06-28T22:47:25 UTC '10' -> first Response is 16 bytes long '0a030001000511112222333344445555' 16 bytes of Modbus Response '0a' -> slave device with address 10 '03' -> read Holding Registers, success '0001' -> start reading at register 1 '0005' -> read 5 registers '11112222333344445555' 10 bytes of data '0a' -> second Response is 10 bytes long '30' -> slave device with address 48 '01' -> read Coils, success 'ea60' -> start at coil 60000 '0020' -> read 32 coils '12345678' -> 32 bits of data packed in 4 bytes","title":"Uplinks triggered by configuration"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#uplinks-triggered-by-downlinks","text":"Example B1: Read single Input Register by Downlink Down, Port 4: '06180401000001' '06' -> first Command is 6 bytes long '180401000001' 6 bytes of Modbus Command '18' -> slave device with address 24 '04' -> function 4, read Input Register '0100' -> start at register 256 '0001' -> read 1 register # Example resulting Uplink Up, Port4: '004b3dd67508180401000001abcd' '004b3dd675' -> timestamp = 1262343797 -> 2010-01-01T11:03:17 UTC '08' -> first Response is 8 bytes long '180401000001abcd' 8 bytes of Response '18' -> slave device with address 24 '04' -> read Input Register, success '0100' -> start at register 256 '0001' -> read 1 register 'abcd' -> 2 bytes of data Example B2: Writing holding registers on multiple devices Down, Port 4: '06a106aabb12340fa210a0010004081122334455667788' '06' -> first Command is 6 bytes long 'a106aabb1234' 6 bytes of Modbus Command 'a1' -> slave device with address 161 '06' -> function 6, write single Holding Register 'aabb' -> address of Register to write = 43707 '1234' -> two bytes of data '0f' -> second Command is 15 byts long 'a210a0010004081122334455667788' 15 byte of Modbus Command 'a2' -> slave device with address 162 '10' -> function 16, write multiple Holding Registers 'a001' -> start at register 40961 '0004' -> 4 registers to write '08' -> 8 bytes of data follow '1122334455667788' -> 8 bytes of data # Example resulting Uplink Up, Port 4: '004b3dd67503a1860206a210a0010004' '004b3dd675' -> timestamp = 1262343797 -> 2010-01-01T11:03:17 UTC '03' -> first Response is 3 bytes long 'a18602' 3 bytes of Modbus Response 'a1' -> slave device address 161 '86' -> write single Holding Regsiter, failed '02' -> error code 2: \"Illegal Data Address\" '06' - second Response is 6 byts long 'a210a0010004' 6 bytes od Modbus Response 'a2' -> slave device address 162 '10' -> read multiple Holding Registers, success 'a001' -> start at register 40961 '0004' -> 4 registers to write","title":"Uplinks triggered by Downlinks"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#complex-setups","text":"The Modbus Bridge as described in this manual can be individually configured to read out any registers and coils. For some setups, this is not enough. There can be situations in which you want to read registers at different intervals, e.g. you might need some values with hourly updates and others only every other day. For measuring values with high variance it can be necessary to take multiple reads over a period of time and create an average value. Maybe you need to read a status register first and depending on its value you want to decide which registers to read and transmit the values of. All this scenarios are possible to solve using the Modbus Bridge, but their complexity leave the scope of our standard firmware. If you need any special processing for your Modbus setup, please contact us with your requirements, and we will make you an offer for an individual firmware that processes data the way you need. If you find that the data rate LoRaWAN offers is a limitation for your setup, we could also provide you with a Modbus solution that uses alternate data transmission technologies, for example NarrowBand-IoT.","title":"Complex setups"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#appendices","text":"","title":"Appendices"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#technical-characteristics","text":"Product Type name Modbus485-LoRaWAN Description Modbus over LoRaWAN Bridge RF tranceiver Type Semtech SX1272 Frequency 863 MHz to 870 MHz Max. TX Power max. +14 dBm Typical RF Range \u22642km Ideal RF Range \u226410km (free line of sight) LoRa communication Protocol Class A / Class C LoRaWAN 1.0.1 EU868 Activation method Over-the-air-activation (OTAA) Activation by personalization (ABP) Encryption AES128 Modbus communication Bus RS-485 twisted pair wires (with optional GND) Protocol RTU/ASCII Environmental Requirements Operating temperature -20\u00b0C \u2013 55\u00b0C Max installation height 2m Standards","title":"Technical characteristics"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#ce-declaration-of-conformity","text":"CE Declaration of Conformity (pdf).","title":"CE Declaration of Conformity"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#disposal-weee-entsorgung","text":"Information about the disposal of the Device .","title":"Disposal / WEEE / Entsorgung"},{"location":"lorawan-sensors/modbus-lorawan/0.4.0/index.html#reference-decoder","text":"This is a decoder written in JavaScript that can be used to parse the device's LoRaWAN messages. It can be used as is in The Things Network . function readVersion ( bytes ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ 0 ] + \".\" + bytes [ 1 ] + \".\" + bytes [ 2 ]; } function signed ( val , bits ) { if (( val & 1 << ( bits - 1 )) > 0 ) { // value is negative (16bit 2's complement) var mask = Math . pow ( 2 , bits ) - 1 ; val = ( ~ val & mask ) + 1 ; // invert all bits & add 1 => now positive value val = val * - 1 ; } return val ; } function int40_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 32 | bytes [ 1 ] << 24 | bytes [ 2 ] << 16 | bytes [ 3 ] << 8 | bytes [ 4 ] << 0 , 40 ); } function int16_BE ( bytes , idx ) { bytes = bytes . slice ( idx || 0 ); return signed ( bytes [ 0 ] << 8 | bytes [ 1 ] << 0 , 16 ); } function decode_status ( bytes ) { return { \"port\" : 1 , \"version\" : readVersion ( bytes ), \"flags\" : bytes [ 3 ], \"temp\" : int16_BE ( bytes , 4 ) / 10 , \"vBat\" : int16_BE ( bytes , 6 ) / 1000 , \"timestamp\" : int40_BE ( bytes , 8 ), \"operationMode\" : bytes [ 13 ] }; } // TODO: Copyright Modbus Logo","title":"Reference decoder"},{"location":"lorawan-sensors/pressure-lorawan/index.html","text":"Pressure Sensor LoRaWAN The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/pressure-lorawan/index.html#pressure-sensor-lorawan","text":"","title":"Pressure Sensor LoRaWAN"},{"location":"lorawan-sensors/pressure-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/pressure-lorawan/firmware.html","text":"Pressure Sensor LoRaWAN There exist different Variants of our Hardware with Pressure Probes, because there exist very different Pressure Probes for different situations. Please make sure to install the correct firmware for your Hardware. You can see which firmware your device is running, by checking the log with our config adapter, while the device is booting. Pressure Sensor [Lobaro Sensor] Firmware Downloads : app-lorawan-pressure-0.3.1.hex [current release] Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changelog 0.3.1 - 2020-09-16 Additional \"Final Words\" in Status Set cron default to once every two hours. Upgrade to use LoRaWAN-Stack we certified in wMBus-Bridge. Remove Class-C support. Add daily status message (on port 64). Add Power-on self test (checking probe communication). Communicate probe connection failure in status message. 0.2.2 - 2020-08-06 Completely rewrite app structure (taken form app-lorawan-environment ), to enable use of LoRaWAN-features, like Downlink-Configs, Class-C 0.1.0 - 2019-10-22 configuration parameters for sensor limits 0.0.3 - 2019-09-30 initial release Pressure Sensor LoRaWAN [Keller Sensor] Firmware app-keller-pressure-0.3.0.hex [current release] app-keller-pressure-0.2.0.hex app-keller-pressure-0.0.3.hex Changelog 0.3.0 - 2020-02-20 Changed to use new Lobaro LoRaWAN stack with remote config. WARNING: default value for AppKey/JoinEUI changed! 0.2.0 - 2019-07-22 Added Battery Voltage to payload 0.0.3 - 2019-02-14 Reduce I2C speed from 10kHz to 1kHz for 10m cable 0.0.2 Update LoRaWAN Stack Reduce I2C speed from 100kHz to 10kHz 0.0.1 initial version","title":"Firmware & Changelog"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#pressure-sensor-lorawan","text":"There exist different Variants of our Hardware with Pressure Probes, because there exist very different Pressure Probes for different situations. Please make sure to install the correct firmware for your Hardware. You can see which firmware your device is running, by checking the log with our config adapter, while the device is booting.","title":"Pressure Sensor LoRaWAN"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#pressure-sensor-lobaro-sensor","text":"","title":"Pressure Sensor [Lobaro Sensor]"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#firmware","text":"Downloads : app-lorawan-pressure-0.3.1.hex [current release] Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Firmware"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#changelog","text":"","title":"Changelog"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#031-2020-09-16","text":"Additional \"Final Words\" in Status Set cron default to once every two hours. Upgrade to use LoRaWAN-Stack we certified in wMBus-Bridge. Remove Class-C support. Add daily status message (on port 64). Add Power-on self test (checking probe communication). Communicate probe connection failure in status message.","title":"0.3.1 - 2020-09-16"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#022-2020-08-06","text":"Completely rewrite app structure (taken form app-lorawan-environment ), to enable use of LoRaWAN-features, like Downlink-Configs, Class-C","title":"0.2.2 - 2020-08-06"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#010-2019-10-22","text":"configuration parameters for sensor limits","title":"0.1.0 - 2019-10-22"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#003-2019-09-30","text":"initial release","title":"0.0.3 - 2019-09-30"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#pressure-sensor-lorawan-keller-sensor","text":"","title":"Pressure Sensor LoRaWAN [Keller Sensor]"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#firmware_1","text":"app-keller-pressure-0.3.0.hex [current release] app-keller-pressure-0.2.0.hex app-keller-pressure-0.0.3.hex","title":"Firmware"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#changelog_1","text":"","title":"Changelog"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#030-2020-02-20","text":"Changed to use new Lobaro LoRaWAN stack with remote config. WARNING: default value for AppKey/JoinEUI changed!","title":"0.3.0 - 2020-02-20"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#020-2019-07-22","text":"Added Battery Voltage to payload","title":"0.2.0 - 2019-07-22"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#003-2019-02-14","text":"Reduce I2C speed from 10kHz to 1kHz for 10m cable","title":"0.0.3 - 2019-02-14"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#002","text":"Update LoRaWAN Stack Reduce I2C speed from 100kHz to 10kHz","title":"0.0.2"},{"location":"lorawan-sensors/pressure-lorawan/firmware.html#001","text":"initial version","title":"0.0.1"},{"location":"lorawan-sensors/usonic-lorawan/index.html","text":"Ultrasonic LoRaWAN Sensor (a.k.a. \"Oscar\") The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/usonic-lorawan/index.html#ultrasonic-lorawan-sensor-aka-oscar","text":"","title":"Ultrasonic LoRaWAN Sensor (a.k.a. \"Oscar\")"},{"location":"lorawan-sensors/usonic-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/usonic-lorawan/firmware.html","text":"USonic LoRaWAN Firmware Downloads: app-lorawan-usonic-0.1.1.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox! Changelog Firmware: app-lorawan-usonic v0.1.1 Tune for new sensor, still compatible with last one (V2) Allow to configure ADR Fix bug where TxPower config value was not applied Add usonicTest mode to permanently measure usonic values Usonic sensor measurement extended to 3.5m Implement more LoRaWAN Mac commands Fix bug where Firmware reset when receiving unknown MAC command","title":"Firmware & Changelog"},{"location":"lorawan-sensors/usonic-lorawan/firmware.html#usonic-lorawan","text":"","title":"USonic LoRaWAN"},{"location":"lorawan-sensors/usonic-lorawan/firmware.html#firmware","text":"Downloads: app-lorawan-usonic-0.1.1.hex Firmware Release Notifications We normally send e-mail notifications upon release of new firmware versions. To receive this mails you can sign up to the Lobaro newsletter here. Subscribe to our email newsletter here Make sure to select the \"Firmware Updates\" checkbox!","title":"Firmware"},{"location":"lorawan-sensors/usonic-lorawan/firmware.html#changelog","text":"Firmware: app-lorawan-usonic","title":"Changelog"},{"location":"lorawan-sensors/usonic-lorawan/firmware.html#v011","text":"Tune for new sensor, still compatible with last one (V2) Allow to configure ADR Fix bug where TxPower config value was not applied Add usonicTest mode to permanently measure usonic values Usonic sensor measurement extended to 3.5m Implement more LoRaWAN Mac commands Fix bug where Firmware reset when receiving unknown MAC command","title":"v0.1.1"},{"location":"lorawan-sensors/wmbus-lorawan/index.html","text":"LOB-GW-WMBUS-LW-2 Lobaro Wireless M-Bus Bridge V2 (for LoRaWAN\u00ae) The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"lorawan-sensors/wmbus-lorawan/index.html#lob-gw-wmbus-lw-2","text":"Lobaro Wireless M-Bus Bridge V2 (for LoRaWAN\u00ae)","title":"LOB-GW-WMBUS-LW-2"},{"location":"lorawan-sensors/wmbus-lorawan/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/wmbus-lorawan/firmware.html","text":"Wireless mBUS over LoRaWAN Bridge The documentation has moved. Please find the firmware on its new location at https://doc.lobaro.com","title":"Firmware & Changelog"},{"location":"lorawan-sensors/wmbus-lorawan/firmware.html#wireless-mbus-over-lorawan-bridge","text":"","title":"Wireless mBUS over LoRaWAN Bridge"},{"location":"lorawan-sensors/wmbus-lorawan/firmware.html#the-documentation-has-moved","text":"Please find the firmware on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html","text":"Wireless mBUS over LoRaWAN Bridge Outdated Version v1.x Outdated document version This manual is only valid for firmwares version up to V1.6.0 and hardware revisions V1.x ! Firmware V1.6.0 is deprecated since 02/2020. For revision v2.x please refer to the current documentation v2.x . Overview The Lobaro wireless M-Bus (wMBUS) to LoRaWAN Bridge is a cost-effective & energy efficient device that receives, caches and transparently forwards wireless M-Bus metering data from up to 500 consumption meters via any LoRaWAN network onto the Internet. Many gas, water, electricity and heat meters can be read wirelessly today using the common short range Wireless M-Bus standard. Because such wMBUS enabled meters use the classical energy saving FSK radio modulation, the wireless range is often limited to less than 50m and therefore requires the use of additional longer-range radio technologies to forward the metering data onto the Internet. The advanced LoRa radio modulation used inside the Lobaro wMBUS to LoRaWAN Bridge is such a key technology. LoRaWAN based LPWANs (Low Power wide area networks) allow connections to the Internet from small battery powered devices with wireless ranges of up to 5 kilometers between the transmitter and receiving gateway antenna - without the usual cellular network costs in classical M2M or smart metering solutions. Also - unlike with cellular networks - it's possible to setup own gateways if needed. This often results in much lower operational costs with the Lobaro wMBUS bridge compared to conventional remote meter reading via LTE networks. The metering data will not be decrypted by the LoRaWAN Bridge, instead an unchanged 1:1 forwarding takes place via one or more LoRaWAN packets (depending on the wMBUS telegram byte size). Thus the end-to-end encryption of sensitive wireless MBUS consumption data is preserved. Initial configuration, firmware updates & status readouts are done user-friendly via USB on the PC with the Lobaro Tool (Windows, Linux, Mac). An additional possibility of configuration in the field \"over the air\" by means of LoRaWAN downlinks will soon also be available via firmware update. Please read the manual carefully before operating the device. A safe operation of the device is only possible if you follow the guides provided in this manual. Using the device differently than intended by Lobaro may cause damage to people, the environment, or the device. Consider using the latest firmware on your hardware See available firmware downloads The Device Variants no longer available These device variants are no longer available. Please see current documentation for available options. Please refer to the current documentation v2.x . Variant with compact housing (2xAA batteries) wMBUS LoRaWAN Bridge (AA-cells, compact IP65 housing), Order number: - Variant with D-cell battery wMBUS LoRaWAN Bridge (XH battery-connector, IP67 housing), Order number: - Device installation The device must be fixed on a flat surface using the lateral mounting holes of the case, see chapter \"Housing Dimensions\" for a detailed description of all housing dimensions. Alternatively we offer as accessory a mounting clip for a standard 35mm DIN rail. The device can then easily snapped on a such rails. It can therefore be added to a variety of racks alongside other devices. Under any circumstances the device must not be mounted higher than 2 meters above ground to avoid any risks in case of falling down! For optimal RF performance (e.g. LoRa range) any metal obstacles near the internal antenna should be avoided. In this case 'near' is defined as keep-out distance of about 3-5 centimeters around the antenna. The internal helix antenna can be identified by the winding pcb traces near the white printed encircled 'connectivity' symbol. In any case a device mounting directly on top of a metal surface is not advisable since it will degrade the possible RF range. Stone walls, wood or plastic standoffs are perfectly ok. In case of challenging installation locations (e.g. in basements) or unavoidable long distances to the next LoRaWAN gateway, Lobaro offers on request custom product variant equipped with a 'SMA' connector to support a external antenna connection. Power Supply The wMBUS over LoRaWAN Bridge default power supply consists of two series connected off-the-shelf 1.5V 'AA' sized batteries. Be sure to get the polarity right, see the '+'-Symbol on the board. In general only AA cells of the types Alkali-Manganese (1.5V, LR6) and Lithium- Iron-Sulphide (1.5V, FR6) are allowed to be inserted in the device. Lobaro recommends the use of FR6 batteries like the Energizer Ultimate Lithium over LR6 types because of the higher capacity and better discharge properties. Other Batteries or accumulators with a nominal voltage of more than 1.5V must not inserted into the device under any circumstances. In particular, lithium based cells with a nominal voltage of 3.6V or 3.7V must not be used on the AA battery slots! On request we can supply custom product variants with special housings powered by even bigger batteries. For example a 3.6V C sized mono cell typically has a capacity of 9Ah with leads to a 3x increased battery life compared to the standard AA-cells. With D sized cells of typically 19Ah capacity this value can be doubled once again (6x). Also available on request are options with permanent external power supply (230V, 9-24V, 5V USB). Battery life time The battery life time of the wireless M-Bus to LoRaWAN Bridge can not be specifed trustworthy without knowledge of the detailed installation scenario. At least estimations for the following custom project based parameters have to be known: Meter count per single wMBUS bridge, e.g. 10 different meters. Needed LoRaWAN transmission interval, e.g. daily uploads. Average wireless M-Bus telegram size in bytes, e.g. 35 byte. Wireless M-Bus telegram transmission interval of the meter, e.g. every 10 seconds. Typically used LoRa Spreading Factor / LoRa link quality, e.g. SF10. Depending on these parameters battery life times from a few months to over 15 years can be achieved. You may send us your use-case details as described above to info@lobaro.com and we will return to you a custom battery lifetime calculation, a recommendation for the best power supply scheme and the needed minimal battery capacity. Example calculation In this battery lifetime calculation scenario the target meters send a 35 byte long ('L-Field') wireless M-Bus telegram constantly every 10 seconds. This behavior is for example very similar to a 'Hydrus' ultrasonic water meter of Diehl Metering . The Diehl meter itself has a specified battery life time of 12 years. Because of the mentioned 10 second send interval it is sufficient to configure the bridge for a wireless M-Bus listen period of 20 seconds by setting the bridge configuration parameter cmodeDurSec to a value of 20 (refer to section \"wMBUS bridge parameters\"). This will ensure that all meters of interest sent their consumption telegrams at least onces during the configured listen period of the bridge. For a worst-case battery-lifetime calculation the weakest possible LoRaWAN connectivity has been selected. That means to reach a LoRaWAN Gateway the Lobaro hardware has to send out its Uplink data very slowly (\u2265 2 seconds) and redundant by using a LoRa spreading factor of 12. Beside this the actual usable battery capacity has been set to 80% of the nominal value. The resulting worst-case minimal battery-life times are presented below. Battery life for daily LoRaWAN uploads with SF12 Collected meters Battery Life (years) AA cell (3Ah) Battery Life (years) Baby cell(9Ah) 1 10.7 32.0 5 7.0 21.1 10 4.9 14.8 20 3.1 9.3 40 1.8 5.3 80 1.0 2.9 Estimations for the opposite situation with a excellent LoRa link quality and thus the possible usage of SF7 are presented below. In real world installations the possible spreading factor may be optimized anytime by setting up additional LoRaWAN Gateways near the meters of interest. Battery life for daily LoRaWAN uploads with SF7 Collected meters Battery Life (years) AA cell (3Ah) Battery Life (years) Baby cell(9Ah) 1 12.1 36.4 5 11.8 35.4 10 11.4 34.4 20 10.6 31.9 40 9.4 28.3 80 7.7 23.0 Usage scenario recommendations As a simple rule of thumb using the Lobaro wireless M-Bus over LoRaWAN bridge is a good fit in applications that require daily (or less often) consumption values of 1 to 40 installed wireless M-Bus meters. For installations with a higher meter count simply more Lobaro bridges may be used. Another key factor for high battery lifetime is to select or configure your wireless M-Bus meters in a way that they send short telegrams very frequently, proven good values are periods smaller than 30 seconds and telegram sizes smaller 50 bytes. This helps to minimize the needed wMBus listening time period and avoids the need for multiple LoRaWAN packets per single telegram (data splitting). Beside this the bridge is naturally most economical when multiple meters per single bridge can be collected and forwarded via LoRWAN. Although for some applications a 1:1 setup, e.g. one bridge per meter, may deliver enough benefits to justify the invest. For hourly or even more frequent meter data uploads, as requested by some of our customers, LoRaWAN isn't the perfect match from a technology point of view. The same holds for scenarios where hundreds of meters are expected to be transfered by a single bridge, e.g. in 'sub-metering' applications with tons of installed heat cost allocators. For such more demanding cases Lobaro can offer better solutions using higher bandwidth transmission techniques like NB-IoT (Narrowband IoT) or classical 4G/LTE. Contact us if you need such a alternative solution by sending your request to info@lobaro.com - either English or German is fine. Work Cycle graph LR; wmbus(wMBUS Collection) init(Initial)==>check(LoRaWAN Join); check(LoRaWAN Join)==>wmbus(wMBUS Collection); wmbus(wMBUS Collection)==>trans(LoRaWAN Transfer); trans(LoRaWAN Transfer)==>sleep(Sleep); sleep(Sleep)==>|Cron expression|wmbus(wMBUS Collection) The Bridge has a simple work cycle that consists of five phases. Initial Phase This is the phase that is executed after the device is started of restarted. The Bridge performs a quick self test which you can easily spot by the green internal LED flashing. After that, the configuration is evaluated. If successful, the LoRaWAN Join phase is executed next. LoRaWAN Join Phase If the Bridge is configured to use over the air activation (OTAA), the OTAA join is performed at this point. The device will repeatedly try to join its LoRaWAN network until the process is successful. It then enters the Data Collection Phase. If the Bridge is configured to use ABP instead of OTAA, this phase is left immediately and the Data Collection Phase is entered according to the cron configuration. Data Collection Phase During the wMBUS collection phase the device receives any wireless M-Bus data with valid CRC and stores it for the following LoRaWAN upload phase but only if the received telegram passes the user defined white list filters. Similar telegrams of one identical meter may be received multiple times during this phase. In this case the newest telegram with the same id, type and length will replace the previously received one. Only the latest telegram will be uploaded via LoRaWAN. After the configured amount of time for collecting data the LoRaWAN data transfer phase is entered. Data Transfer Phase During the Data Transfer Phase the Bridge uploads all previously stored wMBUS data using LoRaWAN. Depending on original wMBUS telegram byte sitze this can require multiple LoRaWAN messages to be sent. Since LoRa requires any device to respect a strict duty cycle, it is possible, that the Bridge will need to wait before sending its messages. If this happens, the device will enter a power saving modus while waiting for the next message. It is possible that transferring all data will take several minutes. In addition to the wireless M-Bus data, the Bridge sends a status packet once a day during this phase. The status packet will always be transmitted prior to any data packets. For a detailed description of the data sent refer to chapter \"Data Packet\". Sleep Phase After transferring all data packets the Bridge enters the Sleep Phase. During this it is completely inactive to avoid wasting power. It remains sleeping until one of the cron expressions given in the configuration triggers. When that happens, it enters the Data Collection Phase again. Configuration The Lobaro Maintenance Tool The initial device configuration can be done very comfortably from your PC via the serial configuration interface. Beside the needed Lobaro USB to UART adapter the Lobaro Maintenance Tool needs to be installed. This tool is freely available for various operating systems including Windows, Linux, Mac and Linux-ARM (e.g. Raspberry-PI) on and works with all Lobaro sensors. Technically this software opens a webserver on port 8585 that runs in a background console window. The actual user interface can be accessed normally using a standard web browser at address http://localhost:8585 (picture above). Normally your default browser should be opened with this URL automatically after tool startup . Even remote configuration and logobservation over the Internet is possible, e.g. having a Raspberry PI via USB connected to the Lobaro device and accessing the maintenance tool from a remote machines browser over the Internet. Additionally to the device setup the tool can also be used for firmware updates ('Firmware Tab') , watching real-time device diagnostic output ('Logs Tab') and initiating device restarts. Please note that the device is automatically restarted each time the configuration has been changed! Connecting the USB config adapter For configuration and firmware updates we provide a special serial-USB adapter that can be connected as shown in the picture below. The corresponding connector on the PCB is marked with the word 'Config'. The USB-adapter will add a virtual serial 'COM' Port to your system. Your operating system needs the CP210x USB to UART Bridge driver installed. A download link is provided next to the 'Connect' button when you start the Maintenance Tool. While the config adapter is connected, the device will be powered from the USB port with a regulated voltage of 3.3V. It is not necessary - although it would be no problem - having batteries inserted or a different supply connected while using the config adapter. All configuration parameters will be kept non-volatile regardless of the power supply. System parameters After being successfully connected to the hardware using the Lobaro Maintenance Tool you can press 'Reload Config' in the 'Configuration' tab to read the current configuration from the device. For every parameter a default value is stored non volatile inside the hardware to which you can revert using the 'Restore default' button in case anything got miss configured. All LoRaWAN & other firmware parameters are explained in the following. LoRaWAN network parameters A large part of the configuration parameters are used to control the device's usage of LoRaWAN. There are two different ways to use LoRaWAN: over-the-air activation (OTAA) and activation by personalization (ABP). Some configuration parameters are only used with one of those methods, others are used for both. Name Type Used Description OTAA bool both true: use over-the-air activation (OTAA) false: use activation by personalization (ABP) DevEUI bytes[8] OTAA the 8 byte long DevEUI is used with OTAA to identify the device on join. The default is predefined in the hardware and guarantees an ID that is unique world wide. Should not be changed unless required by the network provider. Hex format without 0x prefix. AppEUI bytes[8] OTAA ID defining the application used in the LoRaWAN network. Hex format without 0x prefix. AppKey bytes[16] OTAA Application Key as defined by the LoRaWAN network operator. This is used to encrypt communication, so keep it secret. Hex format without 0x prefix. OTAADelay int OTAA Seconds to wait for a new attempt after an unsuccessful OTAA join. The actual waiting time will be randomly increased by up to a third of that amount, in order to avoid devices repeatedly interfering with each other through bad timing. The default value is 300, which means the timeout between attempts is 300-400 seconds. AppSKey bytes[16] ABP App Session Key as defined by the LoRaWAN network operator. Hex format without 0x prefix. NetSKey bytes[16] ABP Network Session Key ad defined by the LoRaWAN network operator. Hex format without 0x prefix. DevAdr bytes[4] ABP Device Address as defined by the LoRaWAN network operator. Hex format without 0x prefix. SF int both Initial LoRa spreading factor used for transmissions. Valid range is 7-12. The actual spreading factor used might change during operation of the device if Adaptive Data Rate (ADR) is used. TxPower int both Initial transmission output power in dBm. The LoRaWAN protocol allows only specific values: 2, 5, 8, 11, 14. The actual power used might change during operation if Adaptive Data Rate (ADR) is used. ADR bool both true: use adaptive data rate (ADR) false: don't use adaptive data rate (ADR) wMBUS bridge parameters Name Type Description loraMaxMsgSize int Received wireless M-Bus telegrams might have a byte size bigger than a single LoRaWAN message can hold. This parameter defines the bytes per LoRaWAN message before a partition over multiple LoRaWAN Uplink msg appears. (Range 10-50 bytes) resetHours int Hours after which the firmware will reset and rejoin the network. Can support the change of LoRaWAN network providers with already deployed devices. (0 = never) cmodeCron string Cron Expression defining when the device starts wMBUS T1/C1 mode receive phases. Please refer to chapter \"Cron expression\" for an introduction. (blank = no T1/C1 receive) cmodeDurSec int Duration in seconds for each C1/T1-mode wMBUS receive phase, if cmodeCron != blank. Should be chosen in relation the wMBUS sendout interval of the target meter. smodeCron string Cron Expression defining when the device starts wMBUS S1 mode receive phases. Please refer to chapter \"Cron expression\" for an introduction. (blank = no S1 receive) smodeDurSec int Duration in seconds for each S1-mode wMBUS receive phase, if smodeCron != blank. Should be chosen in relation the wMBUS sendout interval of the target meter. devFilter string wMBUS device id white-list filter using 8 digits with leading zeros list separated by ','. Example '88009035,06198833'. (blank = filter inactive) mFilter string wMBUS manufacturer white-list filter separated by ',' . Example: 'DME,QDS' for receiving just telegrams from Diehl Metering GmbH and Qundis GmbH meters. Telegrams with different 3 character wMBUS manufacturer id will not be uploaded via LoRaWAN. (blank = filter inactive) typFilter string wMBUS device type white-list filter list separated by ','. Example: '08,07' for Heat-Cost and Water meters. Please refer to appendix B.1 for a list of possible values. (blank = filter inactive) Cron expressions Cron expressions are used to define specific points in time and regular repetitions of them. The schedule for data collecting phases is defined using the CRON format which is very powerful format to define repeatedly occurring events. Standard Lobaro devices typically do not need to know the real time for proper operation. All times are relative to the random time when batteries are inserted. If needed by the target application Lobaro can deliver on request special hardware support for keeping data acquisition intervals based on a real time clock which stays in sync with the real time. Please contact Lobaro directly if you need such a custom product variant. A cron expression consists of 6 values separated by spaces: Seconds (0-59) Minutes (0-59) Hours (0-23) Days (1-31) Month (1-12) Day of Week (SUN-SAT b= [0,6]) Examples of CRON definitions: 0 5 * * * * Hourly at minute 5, second 0 (at 00:05:00, 01:05:00, ...) 0 1/10 * * * * every 10 minutes from minute 1, second 0 (minutes 1, 11, 21, ...) 0 0 6 * * * Daily at 6:00:00 0 0 13 1,15 * * 1 st and 15 th day of every month at 13:00:00 0 0 9 1-5 * * Every month daily from day 1 till 5 at 9:00:00 LoRaWAN Data Upload Formats After collecting wireless M-Bus telegrams over the air, the Bridge starts uploading data via LoRaWAN. There exist two data formats that are transmitted over different LoRaWAN ports. As LoRaWAN can only transmit very short messages, the message formats contain only data bytes. The meaning of a byte is determined by its position within a message. The following describes the package formats used by the wireless M-Bus Bridge. Status Packet Port 1 - In order to provide some information about the health & connectivity state of the device itself, the device sends a status update at a daily basis. The status packet is sent on the first upload phase after activation of the device (after reboot) and then repeatedly in every upload phase that takes place a day or longer after the previous status packet. It has a fixed length of 7 bytes. The battery voltages and ambient temperature are encodes as 16 bit integer using little endian encoding. name type bytes description example version uint8[3] 0-2 Version of the firmware running on the device 1, 5, 1 \u2261 v1.5.1 v_bat uint16 3-4 Battery voltage in mV 2947 \u2261 2:947V temp int16 5-6 Temperature measured inside the device in 1/10 \u00b0C 246 \u2261 24.6\u00b0C We provide a JavaScript reference implementation of a decoder for this status packet on GitHub , which can be used directly for decoding in The Things Network . Data Packet After each wMBUS collecting phase, all saved telegrams (up to 500 can be stored) will be uploaded via LoRaWAN uplink messages as fast as possible. The received wMBUS telegrams that did pass the configured white list filters will be uploaded without any modification in one or more LoRaWAN messages. If a wMBUS telegram is bigger than the bridge configuration parameter loraMaxMsgSize the transmission will be done using multiple LoRaWAN messages. This parameter is limited to \u2264 50 bytes due to LoRaWANs maximum payload size restrictions. In case of telegram splitting is needed the receiving backend application server as to reassemble the original wMBUS telegram before decryption & parsing of the meter data. This is done by simply joining the messages together in the order of receive. The LoRaWAN port encodes identifies a LoRaWAN fragment of the original wireless M-Bus telegram. This way partial messages can be identified using the LoRaWAN Port: 10 < LoRaWAN Port < 100 \u2261 (Part Number | Total Parts) Gaps in the LoRaWAN Frame Counter are giving a hint for missing telegram parts which can happen in LoRaWAN since it's a ALOHA based protocol, e.g. collisions and some packet losses are accepted by principle of operation. In case the backend noticed a missing packet the wMBUS telegram can't be assembled anymore as described before. Examples Examples (with loraMaxMsgSize = 50): A 48 Byte wMBUS telegram will be send on LoRaWAN port 11. Port 11 says it is the first message of only one message (no splitting). A 75 byte wMBUS telegram will be send in two messages on LoRaWAN ports 12 and 22. Port 12 means this part one of a wMBUS telegram that got splitted into two LoRaWAN messages. Port 22 means that this data is the 2 nd part of the original wMBUS data. Both parts have to been concatenated in the order of receive by the backend. A 101 byte wMBUS telegram will be send in three messages on LoRaWAN ports 13, 23 and 33. Port 13 means this part one of a wMBUS telegram that got splitted into three LoRaWAN messages. Port 23 means that this data is the 2 nd part of the original wMBUS data. Port 33 means that this data is the 3 rd part of the original wMBUS data. All three parts have to been concatenated in the order of receive by the backend. Upload Rate The bridge has to work in compliance with the European SRD 868 1% duty-cycle regulations. This implies as a rule of thumb the device can upload at most wMBUS telegrams for 36 seconds every hour. The actual transmit time ('ToA: time on air') for each LoRaWAN message depends on the byte size and the used LoRa spreading factor (SF) which de\u001cnes how redundant LoRa data is send. This means a device with good connectivity and consequently using LoRa SF7 (ToA \u2264 0,050s) can upload much faster more data than a node using LoRa SF11 (ToA \u2265 1s) due to a hard to reach LoRaWAN gateway. The bridge will upload in conformity with the regulations automatically as fast as possible. When it has to wait it enters a low power sleep mode until the next transmission is possible again. The next data collection phase will be started only after completion of the previous upload phase in respect to the configured cmodeCron or smodeCron, whichever is earlier. Because of this it is advisable to define the cron parameters with an estimation of the upload duration in mind. This will avoid unexpected 'skipping' of data collection phases. If you find that the data rate LoRaWAN offers is a limitation for your setup, we could also provide you with a wireless M-Bus solution that uses alternate data transmission technologies, for example GSM/LTE or NarrowBand-IoT. Find our contact information under https://www.lobaro.com/contact/ , or simple send us an email to info@lobaro.com - either English or German is fine. Decoding wireless M-Bus After receiving the raw wireless M-Bus telegrams from your LoRaWAN network provider the actual metering data has to be decrypted and decoded by a backend service for further processing. The details of this are described in the EN 13757 norm and the newer OMS specification, which is a clarification of the original underlying norm. A universal wireless M-Bus decoder is a relatively complicated piece of software if you start implementing it from scratch since the norm covers many different use cases, units, meter types and data formats. If you know in advance the exact telegram format of the deployed meters in your setup a hard coded data decoding may be a feasible approach. This is because wireless M-Bus devices often send the same telegram format in every transmission. Please contact the manufacturer of your meters for the needed telegram format details. An an alternative to support a quick evaluation of our hardware Lobaro offers a easy to use webservice which is designed to decode all sorts of wMBUS input data including decryption if the correct key has been provided (see picture above). This REST API returns a JSON object including all encapsulated fields, e.g. the actual metering values. This greatly simplifies the bridge integration into your web based service or application. A 12 months period of free access to this API is included in our 'wmbus bridge testpacket' offer for quick device evaluation. API Integration into production systems is also possible, but in this case a separate agreement about a royalty fee must be achieved up front. For more information on licensing our wireless M-Bus parsing API plase send us your request via email to info@lobaro.com - either English or German is fine. Technical characteristics Product Type name wMBUS-LoRaWAN Description wMBUS over LoRaWAN Bridge RF transceiver Chipset Semtech SX1272 Frequency Range 863 to 870 MHz TX Power \u2264 14 dBm LoRa communication LoRaWAN Protocol Class A / Class C LoRaWAN 1.1 EU868 Activation method Over-the-air activation (OTAA) Activation by personalization (ABP) Encryption AES128 Typically RF range \u2264 2km Ideal RF range \u2264 10km (free line of sight) Wireless M-BUS communication Supported Modes (EN13757-4) S1, C1, T1 Frequencies 868.3 MHz, 868.95 MHz RF Range \u2264 30m Telegram memory up to 500 telegrams (on request: 1.500) Power Supply Nominal Supply Voltage 3V Supply Voltage Range 2.2V - 3.7V Power supply 2xAA battery, 1.5V (LR6/FR6) 5V USB powered over Lobaro Adapter On Request: 230V mains adapter, 3.6V Battery Current consumption @3V Normal \u22643 mA Wireless M-BUS RX \u226414 mA LoRa RX \u226414 mA LoRa TX \u226480 mA Sleep with RTC running \u226420 \u00b5A Mechanical dimensions Size 114.3 mm x 59.3 mm x 26.8 mm Housing Material ABS plastic Environmental Requirements Operating temperature range -20\u00b0C to +55\u00b0C Max. Installation height 2m Conformity Housing Dimensions Target Measurement / Purpose Forwarding of wireless M-BUS messages via LoRaWAN. Features wMBUS C1/T1 and S1 modes 868 MHz only (433 MHz on request) Parser TTN function readVersion ( bytes , i ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ i ] + \".\" + bytes [ i + 1 ] + \".\" + bytes [ i + 2 ]; } function Decoder ( bytes , port ) { // Decode an uplink message from a buffer // (array) of bytes to an object of fields. var decoded = {}; if ( port === 9 ) { decoded . devStatus = bytes [ 0 ]; decoded . devID = bytes [ 1 ] | bytes [ 2 ] << 8 | bytes [ 3 ] << 16 | bytes [ 4 ] << 24 ; decoded . dif = bytes [ 5 ]; decoded . vif = bytes [ 6 ]; decoded . data0 = bytes [ 7 ]; decoded . data1 = bytes [ 8 ]; decoded . data2 = bytes [ 9 ]; } // example decoder for status packet by lobaro if ( port === 1 && bytes . length == 9 ) { // status packet decoded . FirmwareVersion = String . fromCharCode . apply ( null , bytes . slice ( 0 , 5 )); // byte 0-4 decoded . Vbat = ( bytes [ 5 ] | bytes [ 6 ] << 8 ) / 1000.0 ; // byte 6-7 (originally in mV) decoded . Temp = ( bytes [ 7 ] | bytes [ 8 ] << 8 ) / 10.0 ; // byte 8-9 (originally in 10th degree C) decoded . msg = \"Firmware Version: v\" + decoded . FirmwareVersion + \" Battery: \" + decoded . Vbat + \"V Temperature: \" + decoded . Temp + \"\u00b0C\" ; } else if ( port === 1 && bytes . length == 7 ) { decoded . FirmwareVersion = readVersion ( bytes , 0 ); // byte 0-2 decoded . Vbat = ( bytes [ 3 ] | bytes [ 4 ] << 8 ) / 1000.0 ; // originally in mV decoded . Temp = ( bytes [ 5 ] | bytes [ 6 ] << 8 ) / 10.0 ; // originally in 10th degree C decoded . msg = \"Firmware Version: \" + decoded . FirmwareVersion + \" Battery: \" + decoded . Vbat + \"V Temperature: \" + decoded . Temp + \"\u00b0C\" ; } return decoded ; } CE Declaration of Conformity / PDF Manual PDF Manual (en) up to firmware V1.6.0 Product Flyer CE Declaration of Conformity Firmware v1.x Old Firmware Release V1.6 - not recommended for use anymore! Old stable v1.6 firmware release for reference only: Download: app-wMbusLoraBridge-1.6.0.hex Consider using the current v2.x version instead! Firmware Changelog: v1.6.0 (20.05.2019) Add additional config parameter \"cmodeCompatibility\" to allow wideband receive as fallback fix issue with crc validation of unencrypted meters v1.5.8 (18.02.2019) Reduce chance to miss wMbus packet when there is a lot of traffic v1.5.7 (07.01.2019) Fix issue with very large T1 mode telegrams v1.5.6 (20.11.2018) Support new FRAM memory type Improve random generator behaviour v1.5.5 (14.11.2018) internal use only v1.5.4 (25.10.2018) Support LoRaWAN NBTrans > 1 Don't allow to set unsupported FSK DR during ADR v1.5.3 (18.10.2018) Fix bug with not working deduplication of same wMBUS messages during listen intervals v1.5.2 Support LoRaWAN Rx1 DataRate Offset v1.5.1 New parameter \"resetHours\" (default = 0): Hours after which the firmware will reset and rejoin the network (0 = never) v1.5.0 Changed duration parameters to seconds: cmodeDur -> cmodeDurSec and smodeDur -> smodeDurSec Status packet is 2 byte shorter, version is encoded with 3 bytes now Upload correct battery status in DevStatusReq LoRaWAN Changes: - Support ADR ChMask to disable Channels - Restore default channels when loosing uplink connectivity - Support LoRaWAN NewChannelReq MAC command - Support LoRaWAN DlChannelReq MAC command - Support LoRaWAN RxParamSetupReq MAC command - No LoraWAN MAC Commands are dropped when unknown MAC command is received - Fix bug with endless loop when unknown LoRaWAN MAC command was received - Improve debug logs of LoRaWAN stack v1.4.1 Bugfix: Allow big wMBUS raw messages > 160 Bytes in T1 mode Improved cfg parameter explanation texts Improved wmbus telegram terminal output v1.4.0 New Parameters for ADR (OTAA = false): AppSKey, NetSKey, DevAdr New Parameter: OTAADelay to configure the delay between OTAA joins on fail + [0% ... 30%] Bugfix: Support LoRaWAN Status MAC command Bugfix: TxPower was not considered Requires Lobaro Tool > v1.3.1 for configuration v1.3.1 Fix ADR Bugs v1.3.0 Allow to enable ADR (default: enabled) v1.2.0 Increase config version (Config will be reset) Introduce LoRaWAN default parameter v1.1.0 New Filter: device id (devFilter), device type (typFilter), manufacturer (mFilter) Energy Meter, Water Meter and House Icons made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Heater Icon made by Nikita Golubev from www.flaticon.com is licensed by CC 3.0 BY Map Icon Icons made by Darius Dan from www.flaticon.com is licensed by CC 3.0 BY LoRaWAN Logo \u00a9 LoRa Alliance, NB-IoT Logo \u00a9 GSM Association, wM-Bus Logo \u00a9 www.m-bus.com \u21a9","title":"Wireless mBUS over LoRaWAN Bridge"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#wireless-mbus-over-lorawan-bridge","text":"Outdated Version v1.x Outdated document version This manual is only valid for firmwares version up to V1.6.0 and hardware revisions V1.x ! Firmware V1.6.0 is deprecated since 02/2020. For revision v2.x please refer to the current documentation v2.x .","title":"Wireless mBUS over LoRaWAN Bridge"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#overview","text":"The Lobaro wireless M-Bus (wMBUS) to LoRaWAN Bridge is a cost-effective & energy efficient device that receives, caches and transparently forwards wireless M-Bus metering data from up to 500 consumption meters via any LoRaWAN network onto the Internet. Many gas, water, electricity and heat meters can be read wirelessly today using the common short range Wireless M-Bus standard. Because such wMBUS enabled meters use the classical energy saving FSK radio modulation, the wireless range is often limited to less than 50m and therefore requires the use of additional longer-range radio technologies to forward the metering data onto the Internet. The advanced LoRa radio modulation used inside the Lobaro wMBUS to LoRaWAN Bridge is such a key technology. LoRaWAN based LPWANs (Low Power wide area networks) allow connections to the Internet from small battery powered devices with wireless ranges of up to 5 kilometers between the transmitter and receiving gateway antenna - without the usual cellular network costs in classical M2M or smart metering solutions. Also - unlike with cellular networks - it's possible to setup own gateways if needed. This often results in much lower operational costs with the Lobaro wMBUS bridge compared to conventional remote meter reading via LTE networks. The metering data will not be decrypted by the LoRaWAN Bridge, instead an unchanged 1:1 forwarding takes place via one or more LoRaWAN packets (depending on the wMBUS telegram byte size). Thus the end-to-end encryption of sensitive wireless MBUS consumption data is preserved. Initial configuration, firmware updates & status readouts are done user-friendly via USB on the PC with the Lobaro Tool (Windows, Linux, Mac). An additional possibility of configuration in the field \"over the air\" by means of LoRaWAN downlinks will soon also be available via firmware update. Please read the manual carefully before operating the device. A safe operation of the device is only possible if you follow the guides provided in this manual. Using the device differently than intended by Lobaro may cause damage to people, the environment, or the device. Consider using the latest firmware on your hardware See available firmware downloads","title":"Overview"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#the-device","text":"Variants no longer available These device variants are no longer available. Please see current documentation for available options. Please refer to the current documentation v2.x .","title":"The Device"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#variant-with-compact-housing-2xaa-batteries","text":"wMBUS LoRaWAN Bridge (AA-cells, compact IP65 housing), Order number: -","title":"Variant with compact housing (2xAA batteries)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#variant-with-d-cell-battery","text":"wMBUS LoRaWAN Bridge (XH battery-connector, IP67 housing), Order number: -","title":"Variant with D-cell battery"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#device-installation","text":"The device must be fixed on a flat surface using the lateral mounting holes of the case, see chapter \"Housing Dimensions\" for a detailed description of all housing dimensions. Alternatively we offer as accessory a mounting clip for a standard 35mm DIN rail. The device can then easily snapped on a such rails. It can therefore be added to a variety of racks alongside other devices. Under any circumstances the device must not be mounted higher than 2 meters above ground to avoid any risks in case of falling down! For optimal RF performance (e.g. LoRa range) any metal obstacles near the internal antenna should be avoided. In this case 'near' is defined as keep-out distance of about 3-5 centimeters around the antenna. The internal helix antenna can be identified by the winding pcb traces near the white printed encircled 'connectivity' symbol. In any case a device mounting directly on top of a metal surface is not advisable since it will degrade the possible RF range. Stone walls, wood or plastic standoffs are perfectly ok. In case of challenging installation locations (e.g. in basements) or unavoidable long distances to the next LoRaWAN gateway, Lobaro offers on request custom product variant equipped with a 'SMA' connector to support a external antenna connection.","title":"Device installation"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#power-supply","text":"The wMBUS over LoRaWAN Bridge default power supply consists of two series connected off-the-shelf 1.5V 'AA' sized batteries. Be sure to get the polarity right, see the '+'-Symbol on the board. In general only AA cells of the types Alkali-Manganese (1.5V, LR6) and Lithium- Iron-Sulphide (1.5V, FR6) are allowed to be inserted in the device. Lobaro recommends the use of FR6 batteries like the Energizer Ultimate Lithium over LR6 types because of the higher capacity and better discharge properties. Other Batteries or accumulators with a nominal voltage of more than 1.5V must not inserted into the device under any circumstances. In particular, lithium based cells with a nominal voltage of 3.6V or 3.7V must not be used on the AA battery slots! On request we can supply custom product variants with special housings powered by even bigger batteries. For example a 3.6V C sized mono cell typically has a capacity of 9Ah with leads to a 3x increased battery life compared to the standard AA-cells. With D sized cells of typically 19Ah capacity this value can be doubled once again (6x). Also available on request are options with permanent external power supply (230V, 9-24V, 5V USB).","title":"Power Supply"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#battery-life-time","text":"The battery life time of the wireless M-Bus to LoRaWAN Bridge can not be specifed trustworthy without knowledge of the detailed installation scenario. At least estimations for the following custom project based parameters have to be known: Meter count per single wMBUS bridge, e.g. 10 different meters. Needed LoRaWAN transmission interval, e.g. daily uploads. Average wireless M-Bus telegram size in bytes, e.g. 35 byte. Wireless M-Bus telegram transmission interval of the meter, e.g. every 10 seconds. Typically used LoRa Spreading Factor / LoRa link quality, e.g. SF10. Depending on these parameters battery life times from a few months to over 15 years can be achieved. You may send us your use-case details as described above to info@lobaro.com and we will return to you a custom battery lifetime calculation, a recommendation for the best power supply scheme and the needed minimal battery capacity.","title":"Battery life time"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#example-calculation","text":"In this battery lifetime calculation scenario the target meters send a 35 byte long ('L-Field') wireless M-Bus telegram constantly every 10 seconds. This behavior is for example very similar to a 'Hydrus' ultrasonic water meter of Diehl Metering . The Diehl meter itself has a specified battery life time of 12 years. Because of the mentioned 10 second send interval it is sufficient to configure the bridge for a wireless M-Bus listen period of 20 seconds by setting the bridge configuration parameter cmodeDurSec to a value of 20 (refer to section \"wMBUS bridge parameters\"). This will ensure that all meters of interest sent their consumption telegrams at least onces during the configured listen period of the bridge. For a worst-case battery-lifetime calculation the weakest possible LoRaWAN connectivity has been selected. That means to reach a LoRaWAN Gateway the Lobaro hardware has to send out its Uplink data very slowly (\u2265 2 seconds) and redundant by using a LoRa spreading factor of 12. Beside this the actual usable battery capacity has been set to 80% of the nominal value. The resulting worst-case minimal battery-life times are presented below. Battery life for daily LoRaWAN uploads with SF12 Collected meters Battery Life (years) AA cell (3Ah) Battery Life (years) Baby cell(9Ah) 1 10.7 32.0 5 7.0 21.1 10 4.9 14.8 20 3.1 9.3 40 1.8 5.3 80 1.0 2.9 Estimations for the opposite situation with a excellent LoRa link quality and thus the possible usage of SF7 are presented below. In real world installations the possible spreading factor may be optimized anytime by setting up additional LoRaWAN Gateways near the meters of interest. Battery life for daily LoRaWAN uploads with SF7 Collected meters Battery Life (years) AA cell (3Ah) Battery Life (years) Baby cell(9Ah) 1 12.1 36.4 5 11.8 35.4 10 11.4 34.4 20 10.6 31.9 40 9.4 28.3 80 7.7 23.0","title":"Example calculation"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#usage-scenario-recommendations","text":"As a simple rule of thumb using the Lobaro wireless M-Bus over LoRaWAN bridge is a good fit in applications that require daily (or less often) consumption values of 1 to 40 installed wireless M-Bus meters. For installations with a higher meter count simply more Lobaro bridges may be used. Another key factor for high battery lifetime is to select or configure your wireless M-Bus meters in a way that they send short telegrams very frequently, proven good values are periods smaller than 30 seconds and telegram sizes smaller 50 bytes. This helps to minimize the needed wMBus listening time period and avoids the need for multiple LoRaWAN packets per single telegram (data splitting). Beside this the bridge is naturally most economical when multiple meters per single bridge can be collected and forwarded via LoRWAN. Although for some applications a 1:1 setup, e.g. one bridge per meter, may deliver enough benefits to justify the invest. For hourly or even more frequent meter data uploads, as requested by some of our customers, LoRaWAN isn't the perfect match from a technology point of view. The same holds for scenarios where hundreds of meters are expected to be transfered by a single bridge, e.g. in 'sub-metering' applications with tons of installed heat cost allocators. For such more demanding cases Lobaro can offer better solutions using higher bandwidth transmission techniques like NB-IoT (Narrowband IoT) or classical 4G/LTE. Contact us if you need such a alternative solution by sending your request to info@lobaro.com - either English or German is fine.","title":"Usage scenario recommendations"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#work-cycle","text":"graph LR; wmbus(wMBUS Collection) init(Initial)==>check(LoRaWAN Join); check(LoRaWAN Join)==>wmbus(wMBUS Collection); wmbus(wMBUS Collection)==>trans(LoRaWAN Transfer); trans(LoRaWAN Transfer)==>sleep(Sleep); sleep(Sleep)==>|Cron expression|wmbus(wMBUS Collection) The Bridge has a simple work cycle that consists of five phases.","title":"Work Cycle"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#initial-phase","text":"This is the phase that is executed after the device is started of restarted. The Bridge performs a quick self test which you can easily spot by the green internal LED flashing. After that, the configuration is evaluated. If successful, the LoRaWAN Join phase is executed next.","title":"Initial Phase"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#lorawan-join-phase","text":"If the Bridge is configured to use over the air activation (OTAA), the OTAA join is performed at this point. The device will repeatedly try to join its LoRaWAN network until the process is successful. It then enters the Data Collection Phase. If the Bridge is configured to use ABP instead of OTAA, this phase is left immediately and the Data Collection Phase is entered according to the cron configuration.","title":"LoRaWAN Join Phase"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#data-collection-phase","text":"During the wMBUS collection phase the device receives any wireless M-Bus data with valid CRC and stores it for the following LoRaWAN upload phase but only if the received telegram passes the user defined white list filters. Similar telegrams of one identical meter may be received multiple times during this phase. In this case the newest telegram with the same id, type and length will replace the previously received one. Only the latest telegram will be uploaded via LoRaWAN. After the configured amount of time for collecting data the LoRaWAN data transfer phase is entered.","title":"Data Collection Phase"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#data-transfer-phase","text":"During the Data Transfer Phase the Bridge uploads all previously stored wMBUS data using LoRaWAN. Depending on original wMBUS telegram byte sitze this can require multiple LoRaWAN messages to be sent. Since LoRa requires any device to respect a strict duty cycle, it is possible, that the Bridge will need to wait before sending its messages. If this happens, the device will enter a power saving modus while waiting for the next message. It is possible that transferring all data will take several minutes. In addition to the wireless M-Bus data, the Bridge sends a status packet once a day during this phase. The status packet will always be transmitted prior to any data packets. For a detailed description of the data sent refer to chapter \"Data Packet\".","title":"Data Transfer Phase"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#sleep-phase","text":"After transferring all data packets the Bridge enters the Sleep Phase. During this it is completely inactive to avoid wasting power. It remains sleeping until one of the cron expressions given in the configuration triggers. When that happens, it enters the Data Collection Phase again.","title":"Sleep Phase"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#configuration","text":"","title":"Configuration"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#the-lobaro-maintenance-tool","text":"The initial device configuration can be done very comfortably from your PC via the serial configuration interface. Beside the needed Lobaro USB to UART adapter the Lobaro Maintenance Tool needs to be installed. This tool is freely available for various operating systems including Windows, Linux, Mac and Linux-ARM (e.g. Raspberry-PI) on and works with all Lobaro sensors. Technically this software opens a webserver on port 8585 that runs in a background console window. The actual user interface can be accessed normally using a standard web browser at address http://localhost:8585 (picture above). Normally your default browser should be opened with this URL automatically after tool startup . Even remote configuration and logobservation over the Internet is possible, e.g. having a Raspberry PI via USB connected to the Lobaro device and accessing the maintenance tool from a remote machines browser over the Internet. Additionally to the device setup the tool can also be used for firmware updates ('Firmware Tab') , watching real-time device diagnostic output ('Logs Tab') and initiating device restarts. Please note that the device is automatically restarted each time the configuration has been changed!","title":"The Lobaro Maintenance Tool"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#connecting-the-usb-config-adapter","text":"For configuration and firmware updates we provide a special serial-USB adapter that can be connected as shown in the picture below. The corresponding connector on the PCB is marked with the word 'Config'. The USB-adapter will add a virtual serial 'COM' Port to your system. Your operating system needs the CP210x USB to UART Bridge driver installed. A download link is provided next to the 'Connect' button when you start the Maintenance Tool. While the config adapter is connected, the device will be powered from the USB port with a regulated voltage of 3.3V. It is not necessary - although it would be no problem - having batteries inserted or a different supply connected while using the config adapter. All configuration parameters will be kept non-volatile regardless of the power supply.","title":"Connecting the USB config adapter"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#system-parameters","text":"After being successfully connected to the hardware using the Lobaro Maintenance Tool you can press 'Reload Config' in the 'Configuration' tab to read the current configuration from the device. For every parameter a default value is stored non volatile inside the hardware to which you can revert using the 'Restore default' button in case anything got miss configured. All LoRaWAN & other firmware parameters are explained in the following.","title":"System parameters"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#lorawan-network-parameters","text":"A large part of the configuration parameters are used to control the device's usage of LoRaWAN. There are two different ways to use LoRaWAN: over-the-air activation (OTAA) and activation by personalization (ABP). Some configuration parameters are only used with one of those methods, others are used for both. Name Type Used Description OTAA bool both true: use over-the-air activation (OTAA) false: use activation by personalization (ABP) DevEUI bytes[8] OTAA the 8 byte long DevEUI is used with OTAA to identify the device on join. The default is predefined in the hardware and guarantees an ID that is unique world wide. Should not be changed unless required by the network provider. Hex format without 0x prefix. AppEUI bytes[8] OTAA ID defining the application used in the LoRaWAN network. Hex format without 0x prefix. AppKey bytes[16] OTAA Application Key as defined by the LoRaWAN network operator. This is used to encrypt communication, so keep it secret. Hex format without 0x prefix. OTAADelay int OTAA Seconds to wait for a new attempt after an unsuccessful OTAA join. The actual waiting time will be randomly increased by up to a third of that amount, in order to avoid devices repeatedly interfering with each other through bad timing. The default value is 300, which means the timeout between attempts is 300-400 seconds. AppSKey bytes[16] ABP App Session Key as defined by the LoRaWAN network operator. Hex format without 0x prefix. NetSKey bytes[16] ABP Network Session Key ad defined by the LoRaWAN network operator. Hex format without 0x prefix. DevAdr bytes[4] ABP Device Address as defined by the LoRaWAN network operator. Hex format without 0x prefix. SF int both Initial LoRa spreading factor used for transmissions. Valid range is 7-12. The actual spreading factor used might change during operation of the device if Adaptive Data Rate (ADR) is used. TxPower int both Initial transmission output power in dBm. The LoRaWAN protocol allows only specific values: 2, 5, 8, 11, 14. The actual power used might change during operation if Adaptive Data Rate (ADR) is used. ADR bool both true: use adaptive data rate (ADR) false: don't use adaptive data rate (ADR)","title":"LoRaWAN network parameters"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#wmbus-bridge-parameters","text":"Name Type Description loraMaxMsgSize int Received wireless M-Bus telegrams might have a byte size bigger than a single LoRaWAN message can hold. This parameter defines the bytes per LoRaWAN message before a partition over multiple LoRaWAN Uplink msg appears. (Range 10-50 bytes) resetHours int Hours after which the firmware will reset and rejoin the network. Can support the change of LoRaWAN network providers with already deployed devices. (0 = never) cmodeCron string Cron Expression defining when the device starts wMBUS T1/C1 mode receive phases. Please refer to chapter \"Cron expression\" for an introduction. (blank = no T1/C1 receive) cmodeDurSec int Duration in seconds for each C1/T1-mode wMBUS receive phase, if cmodeCron != blank. Should be chosen in relation the wMBUS sendout interval of the target meter. smodeCron string Cron Expression defining when the device starts wMBUS S1 mode receive phases. Please refer to chapter \"Cron expression\" for an introduction. (blank = no S1 receive) smodeDurSec int Duration in seconds for each S1-mode wMBUS receive phase, if smodeCron != blank. Should be chosen in relation the wMBUS sendout interval of the target meter. devFilter string wMBUS device id white-list filter using 8 digits with leading zeros list separated by ','. Example '88009035,06198833'. (blank = filter inactive) mFilter string wMBUS manufacturer white-list filter separated by ',' . Example: 'DME,QDS' for receiving just telegrams from Diehl Metering GmbH and Qundis GmbH meters. Telegrams with different 3 character wMBUS manufacturer id will not be uploaded via LoRaWAN. (blank = filter inactive) typFilter string wMBUS device type white-list filter list separated by ','. Example: '08,07' for Heat-Cost and Water meters. Please refer to appendix B.1 for a list of possible values. (blank = filter inactive)","title":"wMBUS bridge parameters"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#cron-expressions","text":"Cron expressions are used to define specific points in time and regular repetitions of them. The schedule for data collecting phases is defined using the CRON format which is very powerful format to define repeatedly occurring events. Standard Lobaro devices typically do not need to know the real time for proper operation. All times are relative to the random time when batteries are inserted. If needed by the target application Lobaro can deliver on request special hardware support for keeping data acquisition intervals based on a real time clock which stays in sync with the real time. Please contact Lobaro directly if you need such a custom product variant. A cron expression consists of 6 values separated by spaces: Seconds (0-59) Minutes (0-59) Hours (0-23) Days (1-31) Month (1-12) Day of Week (SUN-SAT b= [0,6]) Examples of CRON definitions: 0 5 * * * * Hourly at minute 5, second 0 (at 00:05:00, 01:05:00, ...) 0 1/10 * * * * every 10 minutes from minute 1, second 0 (minutes 1, 11, 21, ...) 0 0 6 * * * Daily at 6:00:00 0 0 13 1,15 * * 1 st and 15 th day of every month at 13:00:00 0 0 9 1-5 * * Every month daily from day 1 till 5 at 9:00:00","title":"Cron expressions"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#lorawan-data-upload-formats","text":"After collecting wireless M-Bus telegrams over the air, the Bridge starts uploading data via LoRaWAN. There exist two data formats that are transmitted over different LoRaWAN ports. As LoRaWAN can only transmit very short messages, the message formats contain only data bytes. The meaning of a byte is determined by its position within a message. The following describes the package formats used by the wireless M-Bus Bridge.","title":"LoRaWAN Data Upload Formats"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#status-packet","text":"Port 1 - In order to provide some information about the health & connectivity state of the device itself, the device sends a status update at a daily basis. The status packet is sent on the first upload phase after activation of the device (after reboot) and then repeatedly in every upload phase that takes place a day or longer after the previous status packet. It has a fixed length of 7 bytes. The battery voltages and ambient temperature are encodes as 16 bit integer using little endian encoding. name type bytes description example version uint8[3] 0-2 Version of the firmware running on the device 1, 5, 1 \u2261 v1.5.1 v_bat uint16 3-4 Battery voltage in mV 2947 \u2261 2:947V temp int16 5-6 Temperature measured inside the device in 1/10 \u00b0C 246 \u2261 24.6\u00b0C We provide a JavaScript reference implementation of a decoder for this status packet on GitHub , which can be used directly for decoding in The Things Network .","title":"Status Packet"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#data-packet","text":"After each wMBUS collecting phase, all saved telegrams (up to 500 can be stored) will be uploaded via LoRaWAN uplink messages as fast as possible. The received wMBUS telegrams that did pass the configured white list filters will be uploaded without any modification in one or more LoRaWAN messages. If a wMBUS telegram is bigger than the bridge configuration parameter loraMaxMsgSize the transmission will be done using multiple LoRaWAN messages. This parameter is limited to \u2264 50 bytes due to LoRaWANs maximum payload size restrictions. In case of telegram splitting is needed the receiving backend application server as to reassemble the original wMBUS telegram before decryption & parsing of the meter data. This is done by simply joining the messages together in the order of receive. The LoRaWAN port encodes identifies a LoRaWAN fragment of the original wireless M-Bus telegram. This way partial messages can be identified using the LoRaWAN Port: 10 < LoRaWAN Port < 100 \u2261 (Part Number | Total Parts) Gaps in the LoRaWAN Frame Counter are giving a hint for missing telegram parts which can happen in LoRaWAN since it's a ALOHA based protocol, e.g. collisions and some packet losses are accepted by principle of operation. In case the backend noticed a missing packet the wMBUS telegram can't be assembled anymore as described before.","title":"Data Packet"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#examples","text":"Examples (with loraMaxMsgSize = 50): A 48 Byte wMBUS telegram will be send on LoRaWAN port 11. Port 11 says it is the first message of only one message (no splitting). A 75 byte wMBUS telegram will be send in two messages on LoRaWAN ports 12 and 22. Port 12 means this part one of a wMBUS telegram that got splitted into two LoRaWAN messages. Port 22 means that this data is the 2 nd part of the original wMBUS data. Both parts have to been concatenated in the order of receive by the backend. A 101 byte wMBUS telegram will be send in three messages on LoRaWAN ports 13, 23 and 33. Port 13 means this part one of a wMBUS telegram that got splitted into three LoRaWAN messages. Port 23 means that this data is the 2 nd part of the original wMBUS data. Port 33 means that this data is the 3 rd part of the original wMBUS data. All three parts have to been concatenated in the order of receive by the backend.","title":"Examples"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#upload-rate","text":"The bridge has to work in compliance with the European SRD 868 1% duty-cycle regulations. This implies as a rule of thumb the device can upload at most wMBUS telegrams for 36 seconds every hour. The actual transmit time ('ToA: time on air') for each LoRaWAN message depends on the byte size and the used LoRa spreading factor (SF) which de\u001cnes how redundant LoRa data is send. This means a device with good connectivity and consequently using LoRa SF7 (ToA \u2264 0,050s) can upload much faster more data than a node using LoRa SF11 (ToA \u2265 1s) due to a hard to reach LoRaWAN gateway. The bridge will upload in conformity with the regulations automatically as fast as possible. When it has to wait it enters a low power sleep mode until the next transmission is possible again. The next data collection phase will be started only after completion of the previous upload phase in respect to the configured cmodeCron or smodeCron, whichever is earlier. Because of this it is advisable to define the cron parameters with an estimation of the upload duration in mind. This will avoid unexpected 'skipping' of data collection phases. If you find that the data rate LoRaWAN offers is a limitation for your setup, we could also provide you with a wireless M-Bus solution that uses alternate data transmission technologies, for example GSM/LTE or NarrowBand-IoT. Find our contact information under https://www.lobaro.com/contact/ , or simple send us an email to info@lobaro.com - either English or German is fine.","title":"Upload Rate"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#decoding-wireless-m-bus","text":"After receiving the raw wireless M-Bus telegrams from your LoRaWAN network provider the actual metering data has to be decrypted and decoded by a backend service for further processing. The details of this are described in the EN 13757 norm and the newer OMS specification, which is a clarification of the original underlying norm. A universal wireless M-Bus decoder is a relatively complicated piece of software if you start implementing it from scratch since the norm covers many different use cases, units, meter types and data formats. If you know in advance the exact telegram format of the deployed meters in your setup a hard coded data decoding may be a feasible approach. This is because wireless M-Bus devices often send the same telegram format in every transmission. Please contact the manufacturer of your meters for the needed telegram format details. An an alternative to support a quick evaluation of our hardware Lobaro offers a easy to use webservice which is designed to decode all sorts of wMBUS input data including decryption if the correct key has been provided (see picture above). This REST API returns a JSON object including all encapsulated fields, e.g. the actual metering values. This greatly simplifies the bridge integration into your web based service or application. A 12 months period of free access to this API is included in our 'wmbus bridge testpacket' offer for quick device evaluation. API Integration into production systems is also possible, but in this case a separate agreement about a royalty fee must be achieved up front. For more information on licensing our wireless M-Bus parsing API plase send us your request via email to info@lobaro.com - either English or German is fine.","title":"Decoding wireless M-Bus"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#technical-characteristics","text":"Product Type name wMBUS-LoRaWAN Description wMBUS over LoRaWAN Bridge RF transceiver Chipset Semtech SX1272 Frequency Range 863 to 870 MHz TX Power \u2264 14 dBm LoRa communication LoRaWAN Protocol Class A / Class C LoRaWAN 1.1 EU868 Activation method Over-the-air activation (OTAA) Activation by personalization (ABP) Encryption AES128 Typically RF range \u2264 2km Ideal RF range \u2264 10km (free line of sight) Wireless M-BUS communication Supported Modes (EN13757-4) S1, C1, T1 Frequencies 868.3 MHz, 868.95 MHz RF Range \u2264 30m Telegram memory up to 500 telegrams (on request: 1.500) Power Supply Nominal Supply Voltage 3V Supply Voltage Range 2.2V - 3.7V Power supply 2xAA battery, 1.5V (LR6/FR6) 5V USB powered over Lobaro Adapter On Request: 230V mains adapter, 3.6V Battery Current consumption @3V Normal \u22643 mA Wireless M-BUS RX \u226414 mA LoRa RX \u226414 mA LoRa TX \u226480 mA Sleep with RTC running \u226420 \u00b5A Mechanical dimensions Size 114.3 mm x 59.3 mm x 26.8 mm Housing Material ABS plastic Environmental Requirements Operating temperature range -20\u00b0C to +55\u00b0C Max. Installation height 2m Conformity","title":"Technical characteristics"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#housing-dimensions","text":"","title":"Housing Dimensions"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#target-measurement-purpose","text":"Forwarding of wireless M-BUS messages via LoRaWAN. Features wMBUS C1/T1 and S1 modes 868 MHz only (433 MHz on request)","title":"Target Measurement / Purpose"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#parser","text":"","title":"Parser"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#ttn","text":"function readVersion ( bytes , i ) { if ( bytes . length < 3 ) { return null ; } return \"v\" + bytes [ i ] + \".\" + bytes [ i + 1 ] + \".\" + bytes [ i + 2 ]; } function Decoder ( bytes , port ) { // Decode an uplink message from a buffer // (array) of bytes to an object of fields. var decoded = {}; if ( port === 9 ) { decoded . devStatus = bytes [ 0 ]; decoded . devID = bytes [ 1 ] | bytes [ 2 ] << 8 | bytes [ 3 ] << 16 | bytes [ 4 ] << 24 ; decoded . dif = bytes [ 5 ]; decoded . vif = bytes [ 6 ]; decoded . data0 = bytes [ 7 ]; decoded . data1 = bytes [ 8 ]; decoded . data2 = bytes [ 9 ]; } // example decoder for status packet by lobaro if ( port === 1 && bytes . length == 9 ) { // status packet decoded . FirmwareVersion = String . fromCharCode . apply ( null , bytes . slice ( 0 , 5 )); // byte 0-4 decoded . Vbat = ( bytes [ 5 ] | bytes [ 6 ] << 8 ) / 1000.0 ; // byte 6-7 (originally in mV) decoded . Temp = ( bytes [ 7 ] | bytes [ 8 ] << 8 ) / 10.0 ; // byte 8-9 (originally in 10th degree C) decoded . msg = \"Firmware Version: v\" + decoded . FirmwareVersion + \" Battery: \" + decoded . Vbat + \"V Temperature: \" + decoded . Temp + \"\u00b0C\" ; } else if ( port === 1 && bytes . length == 7 ) { decoded . FirmwareVersion = readVersion ( bytes , 0 ); // byte 0-2 decoded . Vbat = ( bytes [ 3 ] | bytes [ 4 ] << 8 ) / 1000.0 ; // originally in mV decoded . Temp = ( bytes [ 5 ] | bytes [ 6 ] << 8 ) / 10.0 ; // originally in 10th degree C decoded . msg = \"Firmware Version: \" + decoded . FirmwareVersion + \" Battery: \" + decoded . Vbat + \"V Temperature: \" + decoded . Temp + \"\u00b0C\" ; } return decoded ; }","title":"TTN"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#ce-declaration-of-conformity-pdf-manual","text":"PDF Manual (en) up to firmware V1.6.0 Product Flyer CE Declaration of Conformity","title":"CE Declaration of Conformity / PDF Manual"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#firmware-v1x","text":"Old Firmware Release V1.6 - not recommended for use anymore! Old stable v1.6 firmware release for reference only: Download: app-wMbusLoraBridge-1.6.0.hex Consider using the current v2.x version instead! Firmware Changelog:","title":"Firmware v1.x"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v160-20052019","text":"Add additional config parameter \"cmodeCompatibility\" to allow wideband receive as fallback fix issue with crc validation of unencrypted meters","title":"v1.6.0 (20.05.2019)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v158-18022019","text":"Reduce chance to miss wMbus packet when there is a lot of traffic","title":"v1.5.8 (18.02.2019)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v157-07012019","text":"Fix issue with very large T1 mode telegrams","title":"v1.5.7 (07.01.2019)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v156-20112018","text":"Support new FRAM memory type Improve random generator behaviour","title":"v1.5.6 (20.11.2018)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v155-14112018","text":"internal use only","title":"v1.5.5 (14.11.2018)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v154-25102018","text":"Support LoRaWAN NBTrans > 1 Don't allow to set unsupported FSK DR during ADR","title":"v1.5.4 (25.10.2018)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v153-18102018","text":"Fix bug with not working deduplication of same wMBUS messages during listen intervals","title":"v1.5.3 (18.10.2018)"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v152","text":"Support LoRaWAN Rx1 DataRate Offset","title":"v1.5.2"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v151","text":"New parameter \"resetHours\" (default = 0): Hours after which the firmware will reset and rejoin the network (0 = never)","title":"v1.5.1"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v150","text":"Changed duration parameters to seconds: cmodeDur -> cmodeDurSec and smodeDur -> smodeDurSec Status packet is 2 byte shorter, version is encoded with 3 bytes now Upload correct battery status in DevStatusReq LoRaWAN Changes: - Support ADR ChMask to disable Channels - Restore default channels when loosing uplink connectivity - Support LoRaWAN NewChannelReq MAC command - Support LoRaWAN DlChannelReq MAC command - Support LoRaWAN RxParamSetupReq MAC command - No LoraWAN MAC Commands are dropped when unknown MAC command is received - Fix bug with endless loop when unknown LoRaWAN MAC command was received - Improve debug logs of LoRaWAN stack","title":"v1.5.0"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v141","text":"Bugfix: Allow big wMBUS raw messages > 160 Bytes in T1 mode Improved cfg parameter explanation texts Improved wmbus telegram terminal output","title":"v1.4.1"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v140","text":"New Parameters for ADR (OTAA = false): AppSKey, NetSKey, DevAdr New Parameter: OTAADelay to configure the delay between OTAA joins on fail + [0% ... 30%] Bugfix: Support LoRaWAN Status MAC command Bugfix: TxPower was not considered Requires Lobaro Tool > v1.3.1 for configuration","title":"v1.4.0"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v131","text":"Fix ADR Bugs","title":"v1.3.1"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v130","text":"Allow to enable ADR (default: enabled)","title":"v1.3.0"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v120","text":"Increase config version (Config will be reset) Introduce LoRaWAN default parameter","title":"v1.2.0"},{"location":"lorawan-sensors/wmbus-lorawan/1.x/index.html#v110","text":"New Filter: device id (devFilter), device type (typFilter), manufacturer (mFilter) Energy Meter, Water Meter and House Icons made by Freepik from www.flaticon.com is licensed by CC 3.0 BY Heater Icon made by Nikita Golubev from www.flaticon.com is licensed by CC 3.0 BY Map Icon Icons made by Darius Dan from www.flaticon.com is licensed by CC 3.0 BY LoRaWAN Logo \u00a9 LoRa Alliance, NB-IoT Logo \u00a9 GSM Association, wM-Bus Logo \u00a9 www.m-bus.com \u21a9","title":"v1.1.0"},{"location":"nbiot-sensors/wmbus-nbiot/index.html","text":"LOB-GW-WMBUS-NB-2 The Lobaro Wireless M-Bus NB-IoT Gateway. The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"nbiot-sensors/wmbus-nbiot/index.html#lob-gw-wmbus-nb-2","text":"The Lobaro Wireless M-Bus NB-IoT Gateway.","title":"LOB-GW-WMBUS-NB-2"},{"location":"nbiot-sensors/wmbus-nbiot/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"nbiot-sensors/wmbus-nbiot/firmware.html","text":"Firmware The documentation has moved. Please find the firmware on its new location at https://doc.lobaro.com","title":"Firmware & Changelog"},{"location":"nbiot-sensors/wmbus-nbiot/firmware.html#firmware","text":"","title":"Firmware"},{"location":"nbiot-sensors/wmbus-nbiot/firmware.html#the-documentation-has-moved","text":"Please find the firmware on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"platform/index.html","text":"Lobaro IoT Platform The documentation has moved. Please find the manual on its new location at https://doc.lobaro.com","title":"Manual"},{"location":"platform/index.html#lobaro-iot-platform","text":"","title":"Lobaro IoT Platform"},{"location":"platform/index.html#the-documentation-has-moved","text":"Please find the manual on its new location at https://doc.lobaro.com","title":"The documentation has moved."},{"location":"platform/changelog-backend.html","text":"Changelog Application: Lobaro Backend unreleased 1.7.0 - 2020-06-04 Added Allow sending user invitation mails with password reset link Allow user to restore a lost password GraphQL API: Devices can be filtered by DeviceTypeId Verify that server.frontendUrl is set in configuration Add TTN REST Endpoint /api/ttn/data Changed Prevent spaces in device addresses 1.6.0 - 2020-04-09 Added Allow org-admin to edit wMbus Keys Allow org-admin to upload organisation logos Documentation for REST API endpoint /api/devices Parser: Record.getReceivedAt() to access the uplink message received_at date Changed Chirpstack device synchronisation reports more details Removed Gateway entity that is no longer used Hardcoded MQTT publishers that are no longer used Fixed Allow to remove App in device via GraphQL API NB-IoT Data is saved for all matching devices, not just one Downlink messages created_at was set to null after update Allow to update config values that are not defined in Device Type Allow org-Admin to edit wMbus Keys 1.5.0 Added Synchronization of devices with Chirpstack","title":"Backend"},{"location":"platform/changelog-backend.html#changelog","text":"Application: Lobaro Backend","title":"Changelog"},{"location":"platform/changelog-backend.html#unreleased","text":"","title":"unreleased"},{"location":"platform/changelog-backend.html#170-2020-06-04","text":"","title":"1.7.0 - 2020-06-04"},{"location":"platform/changelog-backend.html#added","text":"Allow sending user invitation mails with password reset link Allow user to restore a lost password GraphQL API: Devices can be filtered by DeviceTypeId Verify that server.frontendUrl is set in configuration Add TTN REST Endpoint /api/ttn/data","title":"Added"},{"location":"platform/changelog-backend.html#changed","text":"Prevent spaces in device addresses","title":"Changed"},{"location":"platform/changelog-backend.html#160-2020-04-09","text":"","title":"1.6.0 - 2020-04-09"},{"location":"platform/changelog-backend.html#added_1","text":"Allow org-admin to edit wMbus Keys Allow org-admin to upload organisation logos Documentation for REST API endpoint /api/devices Parser: Record.getReceivedAt() to access the uplink message received_at date","title":"Added"},{"location":"platform/changelog-backend.html#changed_1","text":"Chirpstack device synchronisation reports more details","title":"Changed"},{"location":"platform/changelog-backend.html#removed","text":"Gateway entity that is no longer used Hardcoded MQTT publishers that are no longer used","title":"Removed"},{"location":"platform/changelog-backend.html#fixed","text":"Allow to remove App in device via GraphQL API NB-IoT Data is saved for all matching devices, not just one Downlink messages created_at was set to null after update Allow to update config values that are not defined in Device Type Allow org-Admin to edit wMbus Keys","title":"Fixed"},{"location":"platform/changelog-backend.html#150","text":"","title":"1.5.0"},{"location":"platform/changelog-backend.html#added_2","text":"Synchronization of devices with Chirpstack","title":"Added"},{"location":"platform/changelog-frontend.html","text":"Changelog Application: Dashboard Server unreleased 1.7.0 - 2020-06-04 Added Allow sending user invitation mails with password reset link Allow user to restore a lost password Sidebar on Devices page to filter by Device Type Devices page is using \"Device Table Config\" of the Device Type Allow sorting of Devices on Devices page by \"name\", \"address\" and \"last received\" Allow org-admin to update device configurations Allow org-admin to manage HTTP Integrations Add CRON type for configuration values Add UI to select predefined CRON expressions in device config Allow org-admin to change device app Display number of items per list on hardware activation page Allow to specify Activation Group on device import Add Link from Hardware Activation setup page to Hardware Activation page Changed Only import non blank config values from CSV Add column \"Firmware\" to import overview Fixed HTTP Integration \"Authentication Method\" can be set to \"None\" Fix bug where Lookup option cannot be selected when clicking too slow 1.6.0 - 2020-04-09 Added Display more details when sync devices with chirpstack New notifications for user actions Allow to select organisation when creating a device in configuration -> hardware Allow to edit Organisation Name and Logo in Organisation -> Settings Allow to import names for devices in Configuration -> Hardware -> Import Allow to import config values from separate cols in Configuration -> Hardware -> Import Changed Use new notifications in organisation -> wMbus Keys Change platform title to \"IoT Platform\" for better white-labeling Fixed Allow to remove App in configuration -> hardware Missing entries in device -> downlinks 1.5.1 Added Device synchronisation with Chirpstack 1.5.0 Added CSV Import for devices Changed Rename directory \"configs\" to \"config\". Needs update of docker volume path","title":"Frontend"},{"location":"platform/changelog-frontend.html#changelog","text":"Application: Dashboard Server","title":"Changelog"},{"location":"platform/changelog-frontend.html#unreleased","text":"","title":"unreleased"},{"location":"platform/changelog-frontend.html#170-2020-06-04","text":"","title":"1.7.0 - 2020-06-04"},{"location":"platform/changelog-frontend.html#added","text":"Allow sending user invitation mails with password reset link Allow user to restore a lost password Sidebar on Devices page to filter by Device Type Devices page is using \"Device Table Config\" of the Device Type Allow sorting of Devices on Devices page by \"name\", \"address\" and \"last received\" Allow org-admin to update device configurations Allow org-admin to manage HTTP Integrations Add CRON type for configuration values Add UI to select predefined CRON expressions in device config Allow org-admin to change device app Display number of items per list on hardware activation page Allow to specify Activation Group on device import Add Link from Hardware Activation setup page to Hardware Activation page","title":"Added"},{"location":"platform/changelog-frontend.html#changed","text":"Only import non blank config values from CSV Add column \"Firmware\" to import overview","title":"Changed"},{"location":"platform/changelog-frontend.html#fixed","text":"HTTP Integration \"Authentication Method\" can be set to \"None\" Fix bug where Lookup option cannot be selected when clicking too slow","title":"Fixed"},{"location":"platform/changelog-frontend.html#160-2020-04-09","text":"","title":"1.6.0 - 2020-04-09"},{"location":"platform/changelog-frontend.html#added_1","text":"Display more details when sync devices with chirpstack New notifications for user actions Allow to select organisation when creating a device in configuration -> hardware Allow to edit Organisation Name and Logo in Organisation -> Settings Allow to import names for devices in Configuration -> Hardware -> Import Allow to import config values from separate cols in Configuration -> Hardware -> Import","title":"Added"},{"location":"platform/changelog-frontend.html#changed_1","text":"Use new notifications in organisation -> wMbus Keys Change platform title to \"IoT Platform\" for better white-labeling","title":"Changed"},{"location":"platform/changelog-frontend.html#fixed_1","text":"Allow to remove App in configuration -> hardware Missing entries in device -> downlinks","title":"Fixed"},{"location":"platform/changelog-frontend.html#151","text":"","title":"1.5.1"},{"location":"platform/changelog-frontend.html#added_2","text":"Device synchronisation with Chirpstack","title":"Added"},{"location":"platform/changelog-frontend.html#150","text":"","title":"1.5.0"},{"location":"platform/changelog-frontend.html#added_3","text":"CSV Import for devices","title":"Added"},{"location":"platform/changelog-frontend.html#changed_2","text":"Rename directory \"configs\" to \"config\". Needs update of docker volume path","title":"Changed"},{"location":"platform/integrations.html","text":"Integrations Integrations allow exchange data between the Lobaro Platform and other applications. REST Navigate to: Integrations -> REST The API is located and documented at: https://backend.lobaro.com/api Access Tokens All API calls must be authenticated with an access token. Access tokens can be managed on the REST Integration page. Each token has a list of roles assigned to it. Token roles: network-server : Allows to write device data. Required for LoRaWAN Network Server Integrations. Add the Token into the HTTP request Header: Field: Authorization Value: Bearer eyJhbGciOiJIU... Receive data from a LoRaWAN network server Create an Bearer Token or BasicAuth credentials in the Lobaro Platform with the role network-server to allow write access for device data. Configure your network server to send data to the corresponding endpoint (see list below) using the token (e.g. Bearer eyJhbGciOiJ... ) or BasicAuth credentials in the Authorization header field. Please consult the documentation of your network server for further instructions. Platform REST Endpoints for network server integrations: Chirpstack: https://backend.lobaro.com/api/chirpstack/uplink (deprecated: /api/loraserver/uplink ) Element-IoT: https://backend.lobaro.com/api/element-iot/data Actility: https://backend.lobaro.com/api/actility/data Everynet: https://backend.lobaro.com/api/everynet/data TTN: https://backend.lobaro.com/api/ttn/data (Platform Version > 1.0.6) Wanesy: https://backend.lobaro.com/api/wanesy (/dataUp & /dataDownEvent) (Platform Version > 1.7.0) We also support other network servers on request, e.g. Firefly, Loriot, ... Just ask! Filter query parameters Filters parameters can be appended to some requests in the form of f:<parameter>=<op>:<value> e.g. f:createdAt=gt:<timestamp> to filter by createdAt date. The Value must be URL encoded e.g. a timestamp might look like gt:2000-01-01T02:37:00%2B01:00 The allowed <parameter> is specified for each endpoint separately. <op> must be one of the following operators: In Query Meaning eq = lte <= lt < gte >= gt > If no operator is given the default eq operator will be used. HTTP (forwarding) Navigate to: Integrations -> HTTP Forward data from the Lobaro Platform to any HTTP(s) endpoint. HTTP Method : The HTTP method to use for the request. Target URL : Any reachable HTTP server endpoint. Authentication : One of the following authentication schemes can be used: Basic Auth: Adds Username & password to request headers. Bearer Token: Adds a Bearer Token to request headers. Just put the Token (without Bearer prefix). OAuth: Fetch a OAuth token with the given scope from a Token URL using a ClientId and Secret as BasicAuth credentials. The fetched token is used for all API calls and automatically refreshed when invalid. Headers : List of headers to be set on HTTP request in the format: <FieldName>: <Value> (e.g. Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== ) MQTT (forwarding) Navigate to: Integrations -> MQTT Forward data from the Lobaro Platform via MQTT Publish to any MQTT broker. Broker URL : must be in one of the following formats: mqtt[s]://host.domain[:port] tcp[s]://host.domain[:port] Default port for mqtt/tcp is 1883 . Default port for mqtts/tcps is 8883 . ClientId : Used on MQTT connect. Default is: lobaro-{RND} . {RND} will be replaced by a unique random string. Username / Password : Used to authenticate with the MQTT broker. Topic : The MQTT topic to publish sensor data. Note Currently we only support username/password authentication for MQTT yet.","title":"Integrations"},{"location":"platform/integrations.html#integrations","text":"Integrations allow exchange data between the Lobaro Platform and other applications.","title":"Integrations"},{"location":"platform/integrations.html#rest","text":"Navigate to: Integrations -> REST The API is located and documented at: https://backend.lobaro.com/api","title":"REST"},{"location":"platform/integrations.html#access-tokens","text":"All API calls must be authenticated with an access token. Access tokens can be managed on the REST Integration page. Each token has a list of roles assigned to it. Token roles: network-server : Allows to write device data. Required for LoRaWAN Network Server Integrations. Add the Token into the HTTP request Header: Field: Authorization Value: Bearer eyJhbGciOiJIU...","title":"Access Tokens"},{"location":"platform/integrations.html#receive-data-from-a-lorawan-network-server","text":"Create an Bearer Token or BasicAuth credentials in the Lobaro Platform with the role network-server to allow write access for device data. Configure your network server to send data to the corresponding endpoint (see list below) using the token (e.g. Bearer eyJhbGciOiJ... ) or BasicAuth credentials in the Authorization header field. Please consult the documentation of your network server for further instructions. Platform REST Endpoints for network server integrations: Chirpstack: https://backend.lobaro.com/api/chirpstack/uplink (deprecated: /api/loraserver/uplink ) Element-IoT: https://backend.lobaro.com/api/element-iot/data Actility: https://backend.lobaro.com/api/actility/data Everynet: https://backend.lobaro.com/api/everynet/data TTN: https://backend.lobaro.com/api/ttn/data (Platform Version > 1.0.6) Wanesy: https://backend.lobaro.com/api/wanesy (/dataUp & /dataDownEvent) (Platform Version > 1.7.0) We also support other network servers on request, e.g. Firefly, Loriot, ... Just ask!","title":"Receive data from a LoRaWAN network server"},{"location":"platform/integrations.html#filter-query-parameters","text":"Filters parameters can be appended to some requests in the form of f:<parameter>=<op>:<value> e.g. f:createdAt=gt:<timestamp> to filter by createdAt date. The Value must be URL encoded e.g. a timestamp might look like gt:2000-01-01T02:37:00%2B01:00 The allowed <parameter> is specified for each endpoint separately. <op> must be one of the following operators: In Query Meaning eq = lte <= lt < gte >= gt > If no operator is given the default eq operator will be used.","title":"Filter query parameters"},{"location":"platform/integrations.html#http-forwarding","text":"Navigate to: Integrations -> HTTP Forward data from the Lobaro Platform to any HTTP(s) endpoint. HTTP Method : The HTTP method to use for the request. Target URL : Any reachable HTTP server endpoint. Authentication : One of the following authentication schemes can be used: Basic Auth: Adds Username & password to request headers. Bearer Token: Adds a Bearer Token to request headers. Just put the Token (without Bearer prefix). OAuth: Fetch a OAuth token with the given scope from a Token URL using a ClientId and Secret as BasicAuth credentials. The fetched token is used for all API calls and automatically refreshed when invalid. Headers : List of headers to be set on HTTP request in the format: <FieldName>: <Value> (e.g. Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ== )","title":"HTTP (forwarding)"},{"location":"platform/integrations.html#mqtt-forwarding","text":"Navigate to: Integrations -> MQTT Forward data from the Lobaro Platform via MQTT Publish to any MQTT broker. Broker URL : must be in one of the following formats: mqtt[s]://host.domain[:port] tcp[s]://host.domain[:port] Default port for mqtt/tcp is 1883 . Default port for mqtts/tcps is 8883 . ClientId : Used on MQTT connect. Default is: lobaro-{RND} . {RND} will be replaced by a unique random string. Username / Password : Used to authenticate with the MQTT broker. Topic : The MQTT topic to publish sensor data. Note Currently we only support username/password authentication for MQTT yet.","title":"MQTT (forwarding)"},{"location":"platform/parser.html","text":"Parser A Parser takes raw input from the Sensor API and converts the data into a unified format used by the Dashboard. In addition the parser can access an API to set device level properties and additional meta information outside of the actual data record. Parsers are organized in 3 levels: Hardcoded default parser DeviceType parser Device parser When no parser on device level is defined, the parser for the device type will be executed. When no parser for the device type is defined, a hardcoded default parser will be executed. Parsers are written in JavaScript. Example function Parse ( input ) { var dataStr = atob ( input . data ); var data = bytes ( dataStr ); // Decode an incoming message to an object of fields. var decoded = { input : input }; return decoded ; } JS Parser API Helper functions // Bytes can convert binary data to byte array // atob converts Base64 string to byte string var bytes = bytes ( atob ( \"aGFsbG8gYmFzZTY0\" )); // Convert Base64 to byte array, shortcut for bytes(atob(...)) var bytes = parseBase64 ( \"aGFsbG8gYmFzZTY0\" ); // Convert bytes to string var str = string ( bytes ); // byte parsing helper uint16BE ( bytes , idx ); uint16LE ( bytes , idx ); uint32BE ( bytes , idx ); uint32LE ( bytes , idx ); float32LE ( bytes , idx ); float32BE ( bytes , idx ); Special parser functions // Parse wMbus message Parser . parseWmbus ( bytes ); // Takes bytes of a partial message and a cacheKey // In context of the receiving device all data with the same cacheKey // is concatinated and the restult returned // To start a new message, pass a new cacheKey var joined = Parser . joinPartial ( bytes , cacheKey ); // Clears all data with the given cacheKey // returns the joined parts that were added by joinPartial before var joined = Parser . clearPartial ( cacheKey ); // Equivalent to clearPartial followed by joinPartial var joined = Parser . newPartial ( cacheKey ); All functions are optional. Not calling them will not change any data. Update the physical location of the sensor Device . setLocation ( lon , lat ) Set an device config value, displayed on the \"Config\" tab of the device Device . setConfig ( \"key\" , \"value\" ); Set an arbitary device property, displayed on the \"Overview\" tab of the device Device . setProperty ( \"key\" , \"value\" ); Get an arbitary device property, displayed on the \"Overview\" tab of the device var value = Device . getProperty ( \"key\" ); Set the Sensor time of the current data record. Used for display, filter, sorting Record . setTime ( new Date ()); Get the time when the data was received by the server in ms, compatible with new Date(...) . Record . getReceivedAt ();","title":"Parser"},{"location":"platform/parser.html#parser","text":"A Parser takes raw input from the Sensor API and converts the data into a unified format used by the Dashboard. In addition the parser can access an API to set device level properties and additional meta information outside of the actual data record. Parsers are organized in 3 levels: Hardcoded default parser DeviceType parser Device parser When no parser on device level is defined, the parser for the device type will be executed. When no parser for the device type is defined, a hardcoded default parser will be executed. Parsers are written in JavaScript. Example function Parse ( input ) { var dataStr = atob ( input . data ); var data = bytes ( dataStr ); // Decode an incoming message to an object of fields. var decoded = { input : input }; return decoded ; }","title":"Parser"},{"location":"platform/parser.html#js-parser-api","text":"Helper functions // Bytes can convert binary data to byte array // atob converts Base64 string to byte string var bytes = bytes ( atob ( \"aGFsbG8gYmFzZTY0\" )); // Convert Base64 to byte array, shortcut for bytes(atob(...)) var bytes = parseBase64 ( \"aGFsbG8gYmFzZTY0\" ); // Convert bytes to string var str = string ( bytes ); // byte parsing helper uint16BE ( bytes , idx ); uint16LE ( bytes , idx ); uint32BE ( bytes , idx ); uint32LE ( bytes , idx ); float32LE ( bytes , idx ); float32BE ( bytes , idx ); Special parser functions // Parse wMbus message Parser . parseWmbus ( bytes ); // Takes bytes of a partial message and a cacheKey // In context of the receiving device all data with the same cacheKey // is concatinated and the restult returned // To start a new message, pass a new cacheKey var joined = Parser . joinPartial ( bytes , cacheKey ); // Clears all data with the given cacheKey // returns the joined parts that were added by joinPartial before var joined = Parser . clearPartial ( cacheKey ); // Equivalent to clearPartial followed by joinPartial var joined = Parser . newPartial ( cacheKey ); All functions are optional. Not calling them will not change any data. Update the physical location of the sensor Device . setLocation ( lon , lat ) Set an device config value, displayed on the \"Config\" tab of the device Device . setConfig ( \"key\" , \"value\" ); Set an arbitary device property, displayed on the \"Overview\" tab of the device Device . setProperty ( \"key\" , \"value\" ); Get an arbitary device property, displayed on the \"Overview\" tab of the device var value = Device . getProperty ( \"key\" ); Set the Sensor time of the current data record. Used for display, filter, sorting Record . setTime ( new Date ()); Get the time when the data was received by the server in ms, compatible with new Date(...) . Record . getReceivedAt ();","title":"JS Parser API"},{"location":"platform/table-config.html","text":"Table Config Audience: Platform Admins Platform Admins can manage Table Configs for different tables in the Platform. (Currently only for Device Data) The table config is shared between all devices of a device type. Navigate to: Configuration -> Device Types -> Select a Device Type -> Data Table Config Data -> Gear Icon above table Devices -> Select a Device -> Device Data -> Gear Icon above table Column Fields: Heading: Title of the column Width: Optional width of the column (use CSS) Sort Property: Optional: Path to property to allow sorting CSV Export: Export CSV : Check to enable CSV export for the column CSV Format: Format for the CSV export Cell: Format: Format of the value inside the table Is Html: HTML is not escaped. This is unsafe. Do not use! Href: Add a link to another page to the value Note Formats are handlebar templates. See: Format Template Format Templates Formatting values in HTML or CSS output is done via Handlebar Templates . Please also have a look into the Handlebar Documentation Note You can not use HTML directly for security reasons. There is a checkbox Is HTML to skip the escaping. We do not recommend using it and it might get removed in future versions. The underling data structure can be seen when expanding the table: Parser output is saved in the data field. But you can also render all other fields. To replace part of the template with variable data you need to put the variable in double curly brackets: e.g. {{variable}} Example To display the temperature field of the parser output you can simply write {{data.temperature}} . For more advanced formatting you will need Handlebar Helpers. Handlebar Template Helpers Handlebar Helpers can be used to apply advanced formatting to data outputs. Starting from conditionals to simple calculations. All built-in Handlebar Helpers can be used. Helpers are used in the following format: {{helper_name <required_parameters> [optional_parameters]}} date Format a given time and date. {{date <date> [format]}} date must be a valid input for moment() . When using timestamps it must be in milliseconds. format must be a valid moment.format() string . Example Template: {{date data.time}} Data: { \"data\" : { \"time\" : 1585823609000 } } Output: 02.04.2020 10:33:29 duration Format given duration. {{duration <duration> [format]}} duration must be a valid input for moment.duration() . When using timestamps it must be in milliseconds. format must be a valid moment.format() string . Example Template: {{duration duration}} Data: { \"data\" : { \"duration\" : 10000 } } Output: 00:00:10 durationHumanize Format a given duration in a human readable format. {{durationHumanize <duration>}} duration must be a valid input for moment.duration() . When using timestamps it must be in milliseconds. Example Template: {{durationHumanize data.duration}} Data: { \"data\" : { \"duration\" : 10000 } } Output: 10 seconds durationAs Get a given duration in a certain unit of time. {{durationAs <duration> [unit_of_time]}} duration must be a valid input for moment.duration() . When using timestamps it must be in milliseconds. unit_of_time must be a valid input for moment.duration().as() Example Template: {{durationAs data.duration \"milliseconds\"}} Data: { \"data\" : { \"duration\" : 10000 } } Output: 10000 fromNow Display the time between now and a given time. See also: moment().fromNow() . {{fromNow <date>}} date must be a valid input for moment() . When using timestamps it must be in milliseconds. Example Template: {{fromNow data.time}} Data: { \"data\" : { \"time\" : 1585823609000 } } Output: 3 days ago typeof Display the js type of a value. Useful for debugging. {{typeof <value>}} date must be a valid input for moment() . When using timestamps it must be in milliseconds. Example Template: {{typeof data.value}} Data: { \"data\" : { \"value\" : 1337 } } Output: number toFixed (number of decimals) Display a number with given amount of decimal places. For more advanced formatting see numberFormat . {{toFixed <value> [decimals]}} decimals number of decimal places (Default: 2) Example Template: {{toFixed data.value 3}} Data: { \"data\" : { \"value\" : 1.2345 } } Output: 1.234 numberFormat Format a number. {{numberFormat <value> [options]}} options: thousandsSep separator between 3 digits (Default: locale dependent) decimalSep decimal separator (Default: locale dependent) decimals number of decimal places (Default: 2) Example Template: {{numberFormat 1024.23 thousandsSep=\".\" decimalSep=\",\"}} Data: { \"data\" : { \"value\" : 1024.2345 } } Output: 1.024,23 Math: ceil, floor, div, max Mathematical operations. {{ceil <value>}} round up to integer {{floor <value>}} round down to integer {{div <nom> <denom>}} returns nom / denom {{max <list> [property_path]}} returns the biggest element from the list. Compares the given property_path . Boolean operations Boolean operations, useful for #if conditions. {{not <value>}} negate the value {{eq <v1> <v2>}} v1 == v2 {{lt <v1> <v2>}} v1 < v2 {{lte <v1> <v2>}} v1 <= v2 {{gt <v1> <v2>}} v1 > v2 {{gte <v1> <v2>}} v1 >= v2 icon Render an Icon {{icon <name> [category]}} name name of the icon. Find all icons here: SLDS Icons category category of the icon (Default: \"utility\").","title":"Table Config"},{"location":"platform/table-config.html#table-config","text":"Audience: Platform Admins Platform Admins can manage Table Configs for different tables in the Platform. (Currently only for Device Data) The table config is shared between all devices of a device type. Navigate to: Configuration -> Device Types -> Select a Device Type -> Data Table Config Data -> Gear Icon above table Devices -> Select a Device -> Device Data -> Gear Icon above table Column Fields: Heading: Title of the column Width: Optional width of the column (use CSS) Sort Property: Optional: Path to property to allow sorting CSV Export: Export CSV : Check to enable CSV export for the column CSV Format: Format for the CSV export Cell: Format: Format of the value inside the table Is Html: HTML is not escaped. This is unsafe. Do not use! Href: Add a link to another page to the value Note Formats are handlebar templates. See: Format Template","title":"Table Config"},{"location":"platform/table-config.html#format-template","text":"Formatting values in HTML or CSS output is done via Handlebar Templates . Please also have a look into the Handlebar Documentation Note You can not use HTML directly for security reasons. There is a checkbox Is HTML to skip the escaping. We do not recommend using it and it might get removed in future versions. The underling data structure can be seen when expanding the table: Parser output is saved in the data field. But you can also render all other fields. To replace part of the template with variable data you need to put the variable in double curly brackets: e.g. {{variable}} Example To display the temperature field of the parser output you can simply write {{data.temperature}} . For more advanced formatting you will need Handlebar Helpers.","title":"Format Templates"},{"location":"platform/table-config.html#handlebar-template-helpers","text":"Handlebar Helpers can be used to apply advanced formatting to data outputs. Starting from conditionals to simple calculations. All built-in Handlebar Helpers can be used. Helpers are used in the following format: {{helper_name <required_parameters> [optional_parameters]}}","title":"Handlebar Template Helpers"},{"location":"platform/table-config.html#date","text":"Format a given time and date. {{date <date> [format]}} date must be a valid input for moment() . When using timestamps it must be in milliseconds. format must be a valid moment.format() string . Example Template: {{date data.time}} Data: { \"data\" : { \"time\" : 1585823609000 } } Output: 02.04.2020 10:33:29","title":"date"},{"location":"platform/table-config.html#duration","text":"Format given duration. {{duration <duration> [format]}} duration must be a valid input for moment.duration() . When using timestamps it must be in milliseconds. format must be a valid moment.format() string . Example Template: {{duration duration}} Data: { \"data\" : { \"duration\" : 10000 } } Output: 00:00:10","title":"duration"},{"location":"platform/table-config.html#durationhumanize","text":"Format a given duration in a human readable format. {{durationHumanize <duration>}} duration must be a valid input for moment.duration() . When using timestamps it must be in milliseconds. Example Template: {{durationHumanize data.duration}} Data: { \"data\" : { \"duration\" : 10000 } } Output: 10 seconds","title":"durationHumanize"},{"location":"platform/table-config.html#durationas","text":"Get a given duration in a certain unit of time. {{durationAs <duration> [unit_of_time]}} duration must be a valid input for moment.duration() . When using timestamps it must be in milliseconds. unit_of_time must be a valid input for moment.duration().as() Example Template: {{durationAs data.duration \"milliseconds\"}} Data: { \"data\" : { \"duration\" : 10000 } } Output: 10000","title":"durationAs"},{"location":"platform/table-config.html#fromnow","text":"Display the time between now and a given time. See also: moment().fromNow() . {{fromNow <date>}} date must be a valid input for moment() . When using timestamps it must be in milliseconds. Example Template: {{fromNow data.time}} Data: { \"data\" : { \"time\" : 1585823609000 } } Output: 3 days ago","title":"fromNow"},{"location":"platform/table-config.html#typeof","text":"Display the js type of a value. Useful for debugging. {{typeof <value>}} date must be a valid input for moment() . When using timestamps it must be in milliseconds. Example Template: {{typeof data.value}} Data: { \"data\" : { \"value\" : 1337 } } Output: number","title":"typeof"},{"location":"platform/table-config.html#tofixed-number-of-decimals","text":"Display a number with given amount of decimal places. For more advanced formatting see numberFormat . {{toFixed <value> [decimals]}} decimals number of decimal places (Default: 2) Example Template: {{toFixed data.value 3}} Data: { \"data\" : { \"value\" : 1.2345 } } Output: 1.234","title":"toFixed (number of decimals)"},{"location":"platform/table-config.html#numberformat","text":"Format a number. {{numberFormat <value> [options]}} options: thousandsSep separator between 3 digits (Default: locale dependent) decimalSep decimal separator (Default: locale dependent) decimals number of decimal places (Default: 2) Example Template: {{numberFormat 1024.23 thousandsSep=\".\" decimalSep=\",\"}} Data: { \"data\" : { \"value\" : 1024.2345 } } Output: 1.024,23","title":"numberFormat"},{"location":"platform/table-config.html#math-ceil-floor-div-max","text":"Mathematical operations. {{ceil <value>}} round up to integer {{floor <value>}} round down to integer {{div <nom> <denom>}} returns nom / denom {{max <list> [property_path]}} returns the biggest element from the list. Compares the given property_path .","title":"Math: ceil, floor, div, max"},{"location":"platform/table-config.html#boolean-operations","text":"Boolean operations, useful for #if conditions. {{not <value>}} negate the value {{eq <v1> <v2>}} v1 == v2 {{lt <v1> <v2>}} v1 < v2 {{lte <v1> <v2>}} v1 <= v2 {{gt <v1> <v2>}} v1 > v2 {{gte <v1> <v2>}} v1 >= v2","title":"Boolean operations"},{"location":"platform/table-config.html#icon","text":"Render an Icon {{icon <name> [category]}} name name of the icon. Find all icons here: SLDS Icons category category of the icon (Default: \"utility\").","title":"icon"},{"location":"tools/lobaro-tool.html","text":"Lobaro Maintenance Tool Downloads Lobaro Maintenance Tool Download (v1.5.4 Windows) Lobaro Maintenance Tool Download (v1.5.4 Linux) Lobaro Maintenance Tool Download (v1.5.4 Mac 64Bit) Lobaro Maintenance Tool previous versions CP2102 Driver Download Device config not saved? When upgrading the Lobaro Tool from version v1.4.x or earlier you have to hit \"F5\" or \"Site full reload\" in your browser once the Lobaro Tool started! Otherwise your device config can not be saved! This is because your browser caches the incompatible frontend from earlier versions. Supports the PC based configuration of all Lobaro IoT sensors. It is intended to be used in conjunction with our USB configuration adapter . Features Change static sensor configuration Perform firmware updates for your Lobaro devices Live monitoring of device diagnostic output Save diagnostric output into *.txt file System Requirements Operating system: MacOS X Windows 7/10 Linux Browser Firefox Chrome Edge USB Driver The CP2102 USB driver MUST to be installed before using the Lobaro-tool. CP2102 Driver Download Download & Installation macOS / Linux After downloading the \"lobaro-tool\" file, e.g. to a directory \"lobaro\" in your home path. Then make the tool file executable: cd ~/lobaro chmod +x lobaro-tool ./lobaro-tool Info If MacOS shows up a security warning and refuses to start the tool: You can solve this by right-clicking the lobaro-tool file, selecting open and overrule the warning. Windows After downloading simply start the \"lobaro-tool.exe\" with double click. Alternativly download the windows installer and start this. Note Windows might show up a security warning and ask you to proceed anyway. This is behavior is normal. Connecting to your device Physical connection Connect your Lobaro Device to the USB-port of your computer using the Lobaro Config Adapter . The 6-pin connector must be plugged into the white rectangular socket on the device that is labeled with the word CONFIG . The location of the socket is dependent on the specific device and hardware version you are trying to attach. Make sure to use the port labeled CONFIG Some of our devices have multiple sockets the connector fits into. Be sure to use the correct one, the one labeled CONFIG ! The LoRaWAN Board (left image) can be powered by the config adapter. Other devices, like the NB-IoT/LTE-M boards or the wMBus-LoRaWAN-Bridge Hardware revision 2 , need to be connected to their normal power supply. If in doubt, just make sure you have the device powered! Software connection When your device is successfully attached to your computer, you can build a connection with the Lobaro Maintenance Tool: Under Hardware Connectiom select auto and click Connect , as seen in the screenshot above. If you know to which port the device is connected to your computer (either COM or ttyUSB), you can alternatively select it explicitly instead of using auto . UART Connection 115200 Baud - 8N1 DTR (Boot): enabled, RTS (Reset): disabled (F\u00fcr Start im Firmware mode) Device Configuration When you are connected to a Lobaro Device, you can use the Tab CONFIGURATION to read and change the configuration parameters of the Device. You can read out the current configuration from the device by pressing the Reload Config button (reading takes a few seconds). Reading/changing config reboots the device! Every time you use one of the buttons Reload Config . Write to Device , or Restore Default , the connected device will be rebooted! Also keep in mind that the operations triggered by pressing the buttons include communication with the device over a serial bus and they will take a few seconds. To avoid errors, please do not those buttons repeatedly! When the configuration is read, you can alter the parameters by clicking on the pencil icon on the right. Values that you changed will by printed in bold font. When you have adjusted all values you want to change, you must press Write to Device to actually change anything on the Device. Writing the values will reboot the device. The Button Restore Default will reset all config parameters of the connected Device to their internal default values. The device will reboot, and the listed values of the configuration in the Lobaro Maintenance Tool well be updated. Always reload the config before changing it! When you are working with multiple devices, make sure that your always press Reload Config after attaching a new device before you start updating values. If you fail to do so, you might accidentally transfer values from the previously attached device to the newly connected. This is especially a problem when working with LoRaWAN sensors, as you will copy the DevEUI from one device to the other! You can watch the rebooting of the Device and check the altered configuration parameters by locking in the LOGS Tab. Device Logging All of our Devices provide extensive logging information over the CONFIG port. When you are connected to a Device in the Lobaro Maintenance Tool, you can read the log messages in the LOGS Tab. This feature is helpful if you try to find out the cause of problems you experience. You can also find out a lot of information about your Device, for example you can find the parameters used to connect your LoRaWAN Devices to your Network Server (DevEUI, AppKey, etc.). All messages are displayed in the big textarea, each line is prefixed by the time it is received (using the clock of your computer). You can use Clear Log to start again with an empty textarea. The cleared messages will still be available through the log files that the tool creates. When starting, our devices print out their current configuration parameter values. Most Devices also have a power on test, that checks if attached sensors can be read successfully. Any Problems that the Device detects will be printed to the log. Restarting The LOGS Tab also contains a button Run (reset) . This button triggers a reboot of the attached device. This can be useful when you start working with your device or if you try to fix issues with connected sensors. Log files The log is also written to a file on your computer whenever a Device is attached to the Maintenance Tool. Every time you start the Lobaro Maintenance Tool, a new log file is created. When you press the button Show Log Files , a file browser is opened at the location where log files are kept. Sending to the Device Below the textarea is an input field Send via UART . Text entered here (and confirmed with Enter) will be sent to the connected Device via UART. Some of our Devices use this feature, for example the LoRaWAN Modbus Bridge for its interactive Dialog Mode. Log parsing If need to parse the log messages of one of our Devices with your own tools, you can connect to it without the Maintenance Tool by using any serial UART reader. You can find the UART parameters at the page for our Config Adapter . Updating Firmware Our devices are shipped ready to use with firmware installed on them, so normally you do not need to install firmware yourself. However, over time we sometimes add new features to our devices or fix bugs that come up over time. If you want to use those improvements for devices all ready shipped to you, you can update the firmware yourself. Firmware updates with our config adapter vs. firmware update over the air (FUOTA) This page describes how you install firmware on devices that you have physical access to. This can be done for most of our devices, those using LoRaWAN and those using NB-IoT/LTE-M. Our NB-IoT/LTE-M devices also support installing firmware over the air, without physical access. This can currently only be done by Lobaro. Getting the Firmware You will need the Firmware you want to install to your device as a file on your computer. You can get the latest Firmware files from this site, the Lobaro Online Documentation , on the Firmware subpage for your Device. The files are in a format called Hex and are therefore also called Hex-File . The filename always starts with app- and contains the version number as well as a short description of its function and the hardware it is used for. So, for example, app-nrf9160-wmbus-TZ2-0.3.1-mcuboot-slot0.hex contains firmware for our wMBus-Gateway on NB-IoT-Hardware (nrf9160) in version 0.3.1 . In some cases you will get a hex-file provided directly by Lobaro, when we develop a specialised solution for you. Make sure you install the correct Firmware for your hardware! If you install Firmware for a different hardware you will get unpredictable results. Installing Firmware Make sure your Device is successfully attached to the your computer and the Maintenance Tool is connected , as described above. In the Tab FIRMWARE you can select the Firmware file you want to install using the button Select Hex File . This will open a file selection dialog, where you can select the hex-file with the Firmware you want to install to your Device. To start installing you need to press Flash Hex File . The upload will take several seconds; progress will be displayed by the blue progress bar. It turns green on successful completion. You can verify the installation succeeded and your Device is now running the correct version by checking the LOGS Tab. You should also take a look at the Configuration Parameters. When an update adds new features, there might be new Configuration Parameters to set, or some existing Parameters might work differently. Check the Firmware's Changelog to see what changed between versions and what you have to look out for, for your individual Firmware update. Changelog 1.5.4 - 11.02.2020 Fix a bug where the configuration can not be changed 1.5.3 - 07.02.2020 Minor: Add \"...flash -t\" command line argument to speedup manual flash startup time 1.5.2 - 05.02.2020 Avoid browser caching of frontend code 1.5.1 - 31.01.2020 Support nRF9160 Config and Firmware update on Lobaro hardware Improve progress indicator and error checks during Flash 1.4.10 - 11.10.2019 No relevant changes 1.4.9 - 17.09.2019 Fix a bug where flashing firmware fails due to UART buffer issues 1.4.4 - 11.09.2019 Fix a bug that failed to flash very big firmware files. Add delays when communicating with Bootloader to avoid timing issues. Flash command now support --verbose flag 1.4.3 - 30.07.2019 Fix a bug where writing the config does not work. 1.4.2 - 29.07.2019 Fix a bug where the program hangs up while connecting to a wrong serial port in \"auto\" mode. Fix a bug where the tool crashes when flashing the firmware while not connected. 1.4.0 - 10.08.2018 Log Tool events like Connect, Disconnect, Read Config, etc. to UART Log Switch to firmware mode after connecting with \"auto\" port 1.3.4 - 09.08.2018 Always switch to Firmware run mode after: Connect, Load Config, Restore Config. 1.3.3 Internet Explorer support 1.3.2 - 09.07.2018 Fix reading configs bigger than 256 Bytes (needed for wMbus Bridge) 1.3.0 - 21.03.2018 Improve connection detection Allow to connect to specific serial port Do not reset to boot mode when connecting to selected serial port 1.2.5 - 07.03.2018 Fix issues with loading a configuration file. Default is now \"config.yaml\" Remove horizontal scrollbars in tabs Add \"Set Time\" button to send \"time= \" via UART Add send UART input below Log Display if Firmware or Booloader is running Add success message when loading config 1.2.4 - 07.03.2018 Allow to replace assets e.g. the logo by placing /assets/logo.png next to the executable 1.2.3 - 05.03.2018 Log Timestamp in UART log file on disk Allow to set http server ip and port to allow remote access 1.2.2 - 19.02.2018 Fix CBOR decoding error that was introduced in 1.2.0 (see: https://github.com/ugorji/go/issues/232 ) 1.2.0 - 16.02.2018 Fix Serial port issues that appear on MAC, Linux and in rare cases on Windows 1.2.0 - 15.02.2018 Log UART output to file in $HOME/.lobaro/ 1.1.x Restore Default Config Close button Closing the browser window now also shut down the server","title":"Lobaro Maintenance Tool"},{"location":"tools/lobaro-tool.html#lobaro-maintenance-tool","text":"Downloads Lobaro Maintenance Tool Download (v1.5.4 Windows) Lobaro Maintenance Tool Download (v1.5.4 Linux) Lobaro Maintenance Tool Download (v1.5.4 Mac 64Bit) Lobaro Maintenance Tool previous versions CP2102 Driver Download Device config not saved? When upgrading the Lobaro Tool from version v1.4.x or earlier you have to hit \"F5\" or \"Site full reload\" in your browser once the Lobaro Tool started! Otherwise your device config can not be saved! This is because your browser caches the incompatible frontend from earlier versions. Supports the PC based configuration of all Lobaro IoT sensors. It is intended to be used in conjunction with our USB configuration adapter .","title":"Lobaro Maintenance Tool"},{"location":"tools/lobaro-tool.html#features","text":"Change static sensor configuration Perform firmware updates for your Lobaro devices Live monitoring of device diagnostic output Save diagnostric output into *.txt file","title":"Features"},{"location":"tools/lobaro-tool.html#system-requirements","text":"Operating system: MacOS X Windows 7/10 Linux Browser Firefox Chrome Edge USB Driver The CP2102 USB driver MUST to be installed before using the Lobaro-tool. CP2102 Driver Download","title":"System Requirements"},{"location":"tools/lobaro-tool.html#download-installation","text":"","title":"Download &amp; Installation"},{"location":"tools/lobaro-tool.html#macos-linux","text":"After downloading the \"lobaro-tool\" file, e.g. to a directory \"lobaro\" in your home path. Then make the tool file executable: cd ~/lobaro chmod +x lobaro-tool ./lobaro-tool Info If MacOS shows up a security warning and refuses to start the tool: You can solve this by right-clicking the lobaro-tool file, selecting open and overrule the warning.","title":"macOS / Linux"},{"location":"tools/lobaro-tool.html#windows","text":"After downloading simply start the \"lobaro-tool.exe\" with double click. Alternativly download the windows installer and start this. Note Windows might show up a security warning and ask you to proceed anyway. This is behavior is normal.","title":"Windows"},{"location":"tools/lobaro-tool.html#connecting-to-your-device","text":"","title":"Connecting to your device"},{"location":"tools/lobaro-tool.html#physical-connection","text":"Connect your Lobaro Device to the USB-port of your computer using the Lobaro Config Adapter . The 6-pin connector must be plugged into the white rectangular socket on the device that is labeled with the word CONFIG . The location of the socket is dependent on the specific device and hardware version you are trying to attach. Make sure to use the port labeled CONFIG Some of our devices have multiple sockets the connector fits into. Be sure to use the correct one, the one labeled CONFIG ! The LoRaWAN Board (left image) can be powered by the config adapter. Other devices, like the NB-IoT/LTE-M boards or the wMBus-LoRaWAN-Bridge Hardware revision 2 , need to be connected to their normal power supply. If in doubt, just make sure you have the device powered!","title":"Physical connection"},{"location":"tools/lobaro-tool.html#software-connection","text":"When your device is successfully attached to your computer, you can build a connection with the Lobaro Maintenance Tool: Under Hardware Connectiom select auto and click Connect , as seen in the screenshot above. If you know to which port the device is connected to your computer (either COM or ttyUSB), you can alternatively select it explicitly instead of using auto . UART Connection 115200 Baud - 8N1 DTR (Boot): enabled, RTS (Reset): disabled (F\u00fcr Start im Firmware mode)","title":"Software connection"},{"location":"tools/lobaro-tool.html#device-configuration","text":"When you are connected to a Lobaro Device, you can use the Tab CONFIGURATION to read and change the configuration parameters of the Device. You can read out the current configuration from the device by pressing the Reload Config button (reading takes a few seconds). Reading/changing config reboots the device! Every time you use one of the buttons Reload Config . Write to Device , or Restore Default , the connected device will be rebooted! Also keep in mind that the operations triggered by pressing the buttons include communication with the device over a serial bus and they will take a few seconds. To avoid errors, please do not those buttons repeatedly! When the configuration is read, you can alter the parameters by clicking on the pencil icon on the right. Values that you changed will by printed in bold font. When you have adjusted all values you want to change, you must press Write to Device to actually change anything on the Device. Writing the values will reboot the device. The Button Restore Default will reset all config parameters of the connected Device to their internal default values. The device will reboot, and the listed values of the configuration in the Lobaro Maintenance Tool well be updated. Always reload the config before changing it! When you are working with multiple devices, make sure that your always press Reload Config after attaching a new device before you start updating values. If you fail to do so, you might accidentally transfer values from the previously attached device to the newly connected. This is especially a problem when working with LoRaWAN sensors, as you will copy the DevEUI from one device to the other! You can watch the rebooting of the Device and check the altered configuration parameters by locking in the LOGS Tab.","title":"Device Configuration"},{"location":"tools/lobaro-tool.html#device-logging","text":"All of our Devices provide extensive logging information over the CONFIG port. When you are connected to a Device in the Lobaro Maintenance Tool, you can read the log messages in the LOGS Tab. This feature is helpful if you try to find out the cause of problems you experience. You can also find out a lot of information about your Device, for example you can find the parameters used to connect your LoRaWAN Devices to your Network Server (DevEUI, AppKey, etc.). All messages are displayed in the big textarea, each line is prefixed by the time it is received (using the clock of your computer). You can use Clear Log to start again with an empty textarea. The cleared messages will still be available through the log files that the tool creates. When starting, our devices print out their current configuration parameter values. Most Devices also have a power on test, that checks if attached sensors can be read successfully. Any Problems that the Device detects will be printed to the log.","title":"Device Logging"},{"location":"tools/lobaro-tool.html#restarting","text":"The LOGS Tab also contains a button Run (reset) . This button triggers a reboot of the attached device. This can be useful when you start working with your device or if you try to fix issues with connected sensors.","title":"Restarting"},{"location":"tools/lobaro-tool.html#log-files","text":"The log is also written to a file on your computer whenever a Device is attached to the Maintenance Tool. Every time you start the Lobaro Maintenance Tool, a new log file is created. When you press the button Show Log Files , a file browser is opened at the location where log files are kept.","title":"Log files"},{"location":"tools/lobaro-tool.html#sending-to-the-device","text":"Below the textarea is an input field Send via UART . Text entered here (and confirmed with Enter) will be sent to the connected Device via UART. Some of our Devices use this feature, for example the LoRaWAN Modbus Bridge for its interactive Dialog Mode.","title":"Sending to the Device"},{"location":"tools/lobaro-tool.html#log-parsing","text":"If need to parse the log messages of one of our Devices with your own tools, you can connect to it without the Maintenance Tool by using any serial UART reader. You can find the UART parameters at the page for our Config Adapter .","title":"Log parsing"},{"location":"tools/lobaro-tool.html#updating-firmware","text":"Our devices are shipped ready to use with firmware installed on them, so normally you do not need to install firmware yourself. However, over time we sometimes add new features to our devices or fix bugs that come up over time. If you want to use those improvements for devices all ready shipped to you, you can update the firmware yourself. Firmware updates with our config adapter vs. firmware update over the air (FUOTA) This page describes how you install firmware on devices that you have physical access to. This can be done for most of our devices, those using LoRaWAN and those using NB-IoT/LTE-M. Our NB-IoT/LTE-M devices also support installing firmware over the air, without physical access. This can currently only be done by Lobaro.","title":"Updating Firmware"},{"location":"tools/lobaro-tool.html#getting-the-firmware","text":"You will need the Firmware you want to install to your device as a file on your computer. You can get the latest Firmware files from this site, the Lobaro Online Documentation , on the Firmware subpage for your Device. The files are in a format called Hex and are therefore also called Hex-File . The filename always starts with app- and contains the version number as well as a short description of its function and the hardware it is used for. So, for example, app-nrf9160-wmbus-TZ2-0.3.1-mcuboot-slot0.hex contains firmware for our wMBus-Gateway on NB-IoT-Hardware (nrf9160) in version 0.3.1 . In some cases you will get a hex-file provided directly by Lobaro, when we develop a specialised solution for you. Make sure you install the correct Firmware for your hardware! If you install Firmware for a different hardware you will get unpredictable results.","title":"Getting the Firmware"},{"location":"tools/lobaro-tool.html#installing-firmware","text":"Make sure your Device is successfully attached to the your computer and the Maintenance Tool is connected , as described above. In the Tab FIRMWARE you can select the Firmware file you want to install using the button Select Hex File . This will open a file selection dialog, where you can select the hex-file with the Firmware you want to install to your Device. To start installing you need to press Flash Hex File . The upload will take several seconds; progress will be displayed by the blue progress bar. It turns green on successful completion. You can verify the installation succeeded and your Device is now running the correct version by checking the LOGS Tab. You should also take a look at the Configuration Parameters. When an update adds new features, there might be new Configuration Parameters to set, or some existing Parameters might work differently. Check the Firmware's Changelog to see what changed between versions and what you have to look out for, for your individual Firmware update.","title":"Installing Firmware"},{"location":"tools/lobaro-tool.html#changelog","text":"","title":"Changelog"},{"location":"tools/lobaro-tool.html#154-11022020","text":"Fix a bug where the configuration can not be changed","title":"1.5.4 - 11.02.2020"},{"location":"tools/lobaro-tool.html#153-07022020","text":"Minor: Add \"...flash -t\" command line argument to speedup manual flash startup time","title":"1.5.3 - 07.02.2020"},{"location":"tools/lobaro-tool.html#152-05022020","text":"Avoid browser caching of frontend code","title":"1.5.2 - 05.02.2020"},{"location":"tools/lobaro-tool.html#151-31012020","text":"Support nRF9160 Config and Firmware update on Lobaro hardware Improve progress indicator and error checks during Flash","title":"1.5.1 - 31.01.2020"},{"location":"tools/lobaro-tool.html#1410-11102019","text":"No relevant changes","title":"1.4.10 - 11.10.2019"},{"location":"tools/lobaro-tool.html#149-17092019","text":"Fix a bug where flashing firmware fails due to UART buffer issues","title":"1.4.9 - 17.09.2019"},{"location":"tools/lobaro-tool.html#144-11092019","text":"Fix a bug that failed to flash very big firmware files. Add delays when communicating with Bootloader to avoid timing issues. Flash command now support --verbose flag","title":"1.4.4 - 11.09.2019"},{"location":"tools/lobaro-tool.html#143-30072019","text":"Fix a bug where writing the config does not work.","title":"1.4.3 - 30.07.2019"},{"location":"tools/lobaro-tool.html#142-29072019","text":"Fix a bug where the program hangs up while connecting to a wrong serial port in \"auto\" mode. Fix a bug where the tool crashes when flashing the firmware while not connected.","title":"1.4.2 - 29.07.2019"},{"location":"tools/lobaro-tool.html#140-10082018","text":"Log Tool events like Connect, Disconnect, Read Config, etc. to UART Log Switch to firmware mode after connecting with \"auto\" port","title":"1.4.0 - 10.08.2018"},{"location":"tools/lobaro-tool.html#134-09082018","text":"Always switch to Firmware run mode after: Connect, Load Config, Restore Config.","title":"1.3.4 - 09.08.2018"},{"location":"tools/lobaro-tool.html#133","text":"Internet Explorer support","title":"1.3.3"},{"location":"tools/lobaro-tool.html#132-09072018","text":"Fix reading configs bigger than 256 Bytes (needed for wMbus Bridge)","title":"1.3.2 - 09.07.2018"},{"location":"tools/lobaro-tool.html#130-21032018","text":"Improve connection detection Allow to connect to specific serial port Do not reset to boot mode when connecting to selected serial port","title":"1.3.0 - 21.03.2018"},{"location":"tools/lobaro-tool.html#125-07032018","text":"Fix issues with loading a configuration file. Default is now \"config.yaml\" Remove horizontal scrollbars in tabs Add \"Set Time\" button to send \"time= \" via UART Add send UART input below Log Display if Firmware or Booloader is running Add success message when loading config","title":"1.2.5 - 07.03.2018"},{"location":"tools/lobaro-tool.html#124-07032018","text":"Allow to replace assets e.g. the logo by placing /assets/logo.png next to the executable","title":"1.2.4 - 07.03.2018"},{"location":"tools/lobaro-tool.html#123-05032018","text":"Log Timestamp in UART log file on disk Allow to set http server ip and port to allow remote access","title":"1.2.3 - 05.03.2018"},{"location":"tools/lobaro-tool.html#122-19022018","text":"Fix CBOR decoding error that was introduced in 1.2.0 (see: https://github.com/ugorji/go/issues/232 )","title":"1.2.2 - 19.02.2018"},{"location":"tools/lobaro-tool.html#120-16022018","text":"Fix Serial port issues that appear on MAC, Linux and in rare cases on Windows","title":"1.2.0 - 16.02.2018"},{"location":"tools/lobaro-tool.html#120-15022018","text":"Log UART output to file in $HOME/.lobaro/","title":"1.2.0 - 15.02.2018"},{"location":"tools/lobaro-tool.html#11x","text":"Restore Default Config Close button Closing the browser window now also shut down the server","title":"1.1.x"},{"location":"tools/usb-config-adapter.html","text":"Lobaro USB configuration adapter The Lobaro USB configuration adapter connects the configuration serial uart of our hardware to a PC. It is useful for: Sensor initial configuration, e.g. network parameters Viewing firmware log/debug diagnostic output Firmware updates using our free Lobaro Maintenance Tool PC software. Wire orientation The blue wire is not consistent the RST/RTS pin(1) and may be inverted on some adapters, e.g. being the GND wire pin(6). Check the orientation of the adapter with the picture above to determinate the actual pin ordering and do not simply rely on the the wire color coding alone! USB Driver The CP2102 USB driver needs to be installed before using it. Download CP2102 Driver Download Hardware Connection (LoRaWAN Sensors) The USB adapter uses a six-wire JST-ZH series connector for attaching to Lobaro hardware at the config connector. Boot0 of Lobaro sensors is connected to DTR line of the PC uart Reset (active low) of Lobaro sensors is connected to RTS line of the PC uart Note Normally the handling of these uart control is done automatically by the Lobaro PC tool . When using an alternative uart terminal tool (e.g. HTERM ) make sure you setup the RTS and DTR lines correctly or simply cut the DTR/RTS wires from the USB adapter if the reset and/or bootloader functions are not needed. Default UART Configuration The default 8N1 UART configuration that is used by all Lobaro devices on the \"Config\" port: BaudRate 115200 Parity No Parity StopBits OneStopBit DataBits 8 DTR control line Low / true => Run Firmware after Reset (Default since BOOT0 has internal pull-down) High / false => Run Bootloader after Reset RTS control line High / false => Run Firmware / Bootloader (Default since RESET has internal pull-up) Low / true => Chip in RESET mode (not running) Adapter Schematic Picture USB Config Adapter","title":"USB Config Adapter"},{"location":"tools/usb-config-adapter.html#lobaro-usb-configuration-adapter","text":"The Lobaro USB configuration adapter connects the configuration serial uart of our hardware to a PC. It is useful for: Sensor initial configuration, e.g. network parameters Viewing firmware log/debug diagnostic output Firmware updates using our free Lobaro Maintenance Tool PC software. Wire orientation The blue wire is not consistent the RST/RTS pin(1) and may be inverted on some adapters, e.g. being the GND wire pin(6). Check the orientation of the adapter with the picture above to determinate the actual pin ordering and do not simply rely on the the wire color coding alone! USB Driver The CP2102 USB driver needs to be installed before using it. Download CP2102 Driver Download","title":"Lobaro USB configuration adapter"},{"location":"tools/usb-config-adapter.html#hardware-connection-lorawan-sensors","text":"The USB adapter uses a six-wire JST-ZH series connector for attaching to Lobaro hardware at the config connector. Boot0 of Lobaro sensors is connected to DTR line of the PC uart Reset (active low) of Lobaro sensors is connected to RTS line of the PC uart Note Normally the handling of these uart control is done automatically by the Lobaro PC tool . When using an alternative uart terminal tool (e.g. HTERM ) make sure you setup the RTS and DTR lines correctly or simply cut the DTR/RTS wires from the USB adapter if the reset and/or bootloader functions are not needed.","title":"Hardware Connection (LoRaWAN Sensors)"},{"location":"tools/usb-config-adapter.html#default-uart-configuration","text":"The default 8N1 UART configuration that is used by all Lobaro devices on the \"Config\" port: BaudRate 115200 Parity No Parity StopBits OneStopBit DataBits 8","title":"Default UART Configuration"},{"location":"tools/usb-config-adapter.html#dtr-control-line","text":"Low / true => Run Firmware after Reset (Default since BOOT0 has internal pull-down) High / false => Run Bootloader after Reset","title":"DTR control line"},{"location":"tools/usb-config-adapter.html#rts-control-line","text":"High / false => Run Firmware / Bootloader (Default since RESET has internal pull-up) Low / true => Chip in RESET mode (not running)","title":"RTS control line"},{"location":"tools/usb-config-adapter.html#adapter-schematic","text":"Picture USB Config Adapter","title":"Adapter Schematic"}]}